# japanese_translator.py
import random
import re
import aiohttp
from aiohttp import ClientTimeout


# Расширенные словари для транслитерации (исправлены)
HIRAGANA_MAP = {
    'а': 'あ', 'и': 'い', 'у': 'う', 'э': 'え', 'о': 'お', 'е': 'え',
    'ка': 'か', 'ки': 'き', 'ку': 'く', 'кэ': 'け', 'ке': 'け', 'ко': 'こ',
    'кя': 'きゃ', 'кю': 'きゅ', 'кё': 'きょ',
    'га': 'が', 'ги': 'ぎ', 'гу': 'ぐ', 'гэ': 'げ', 'ге': 'げ', 'го': 'ご',
    'гя': 'ぎゃ', 'гю': 'ぎゅ', 'гё': 'ぎょ',
    'са': 'さ', 'си': 'し', 'су': 'す', 'сэ': 'せ', 'со': 'そ',
    'ся': 'しゃ', 'сю': 'しゅ', 'сё': 'しょ',
    'за': 'ざ', 'зи': 'じ', 'зу': 'ず', 'зэ': 'ぜ', 'зо': 'ぞ',
    'зя': 'じゃ', 'зю': 'じゅ', 'зё': 'じょ',
    'та': 'た', 'ти': 'ち', 'тэ': 'て', 'те': 'て', 'то': 'と', 'цу': 'つ', 'тсу': 'つ',
    'тя': 'ちゃ', 'тю': 'ちゅ', 'тё': 'ちょ',
    'да': 'だ', 'ди': 'ぢ', 'дэ': 'で', 'де': 'で', 'до': 'ど', 'дзу': 'づ', 'ду': 'づ',
    'дя': 'ぢゃ', 'дю': 'ぢゅ', 'дё': 'ぢょ',
    'на': 'な', 'ни': 'に', 'ну': 'ぬ', 'нэ': 'ね', 'не': 'ね', 'но': 'の',
    'ня': 'にゃ', 'ню': 'にゅ', 'нё': 'にょ',
    'ха': 'は', 'хи': 'ひ', 'ху': 'ふ', 'хэ': 'へ', 'хе': 'へ', 'хо': 'ほ',
    'хя': 'ひゃ', 'хю': 'ひゅ', 'хё': 'ひょ',
    'ба': 'ば', 'би': 'び', 'бу': 'ぶ', 'бэ': 'べ', 'бе': 'べ', 'бо': 'ぼ',
    'бя': 'びゃ', 'бю': 'びゅ', 'бё': 'びょ',
    'па': 'ぱ', 'пи': 'ぴ', 'пу': 'ぷ', 'пэ': 'ぺ', 'пе': 'ぺ', 'по': 'ぽ',
    'пя': 'ぴゃ', 'пю': 'ぴゅ', 'пё': 'ぴょ',
    'ма': 'ま', 'ми': 'み', 'му': 'む', 'мэ': 'め', 'ме': 'め', 'мо': 'も',
    'мя': 'みゃ', 'мю': 'みゅ', 'мё': 'みょ',
    'ра': 'ら', 'ри': 'り', 'ру': 'る', 'рэ': 'れ', 'ре': 'れ', 'ро': 'ろ',
    'ря': 'りゃ', 'рю': 'りゅ', 'рё': 'りょ',
    'ва': 'わ', 'ви': 'うぃ', 'вэ': 'うぇ', 'во': 'を', 'ве': 'うぇ',
    'фа': 'ふぁ', 'фи': 'ふぃ', 'фу': 'ふ', 'фэ': 'ふぇ', 'фо': 'ふぉ',
    'йа': 'や', 'йу': 'ゆ', 'йо': 'よ',
    'ла': 'ら', 'ли': 'り', 'лэ': 'れ', 'ле': 'れ', 'лу': 'る', 'ло': 'ろ', 'ля': 'りゃ', 'лю': 'りゅ', 'лё': 'りょ',
    'ща': 'しゃ', 'щу': 'しゅ', 'що': 'しょ', 'ще': 'しぇ', 'щэ': 'しぇ',
    'ча': 'ちゃ', 'чу': 'ちゅ', 'чо': 'ちょ', 'че': 'ちぇ',
    'ц': 'つ', 'ца': 'つぁ', 'цо': 'つぉ', 'це': 'つぇ', 'цы': 'つぃ', 'цю': 'つゅ', 'цэ': 'つぇ',
    'ж': 'じ', 'жа': 'じゃ', 'же': 'じぇ', 'жи': 'じ', 'жо': 'じょ', 'жу': 'じゅ', 'жэ': 'じぇ',
    'ш': 'し', 'ша': 'しゃ', 'ше': 'しぇ', 'ши': 'し', 'шо': 'しょ', 'шу': 'しゅ',
    'й': 'い', 'ь': '', 'ъ': '', 'ы': 'い', 'йи': 'い', 'йы': 'い',
    'в': 'ゔ', 'ва': 'ゔぁ', 'ве': 'ゔぇ', 'ви': 'ゔぃ', 'во': 'ゔぉ', 'ву': 'ゔ', 
    'дж': 'ぢ', 'дз': 'づ', 'джа': 'ぢゃ', 'дже': 'ぢぇ', 'джо': 'ぢょ', 'джу': 'ぢゅ',
    'кс': 'くす', 'гз': 'ぐず', 'кв': 'くゔ', 'тс': 'つ', 'тьс': 'つ', 
    'нь': 'ん', 'рр': 'っら', 'сс': 'っさ', 'тт': 'った', 'пп': 'っぱ',
    'йе': 'いぇ', 'йэ': 'いぇ', 'йё': 'いよ', 'йя': 'いや',
    'тр': 'とら', 'др': 'どら', 'стр': 'すとら', 'кр': 'くら', 'гр': 'ぐら',
    'пр': 'ぷら', 'бр': 'ぶら', 'фр': 'ふら', 'вр': 'ゔら', 'зр': 'ずら',
    'кл': 'くら', 'гл': 'ぐら', 'пл': 'ぷら', 'бл': 'ぶら', 'фл': 'ふら',
    'вл': 'ゔら', 'сл': 'すら', 'зл': 'ずら', 'тл': 'とら', 'дл': 'どら',
    'кт': 'くと', 'гт': 'ぐと', 'пт': 'ぷと', 'бт': 'ぶと', 'фт': 'ふと',
    'вт': 'ゔと', 'ст': 'すと', 'зт': 'ずと', 'хт': 'ひと', 'цт': 'つと',
    'чт': 'ちと', 'шт': 'しと', 'щт': 'しと', 'ск': 'すく', 'зк': 'ずく',
    'б': 'ぶ', 'в': 'ゔ', 'г': 'ぐ', 'д': 'ど', 'ж': 'じ', 'з': 'ず', 
    'к': 'く', 'л': 'る', 'м': 'む', 'н': 'ん', 'п': 'ぷ', 'р': 'ら', 
    'с': 'す', 'т': 'と', 'ф': 'ふ', 'х': 'ひ', 'ц': 'つ', 'ч': 'ち', 
    'ш': 'し', 'щ': 'し',
    'ё': 'よ'  # Исправлено: 'ょ' → 'よ'
}

KATAKANA_MAP = {
    'а': 'ア', 'и': 'イ', 'у': 'ウ', 'э': 'エ', 'о': 'オ', 'е': 'エ',
    'ка': 'カ', 'ки': 'キ', 'ку': 'ク', 'кэ': 'ケ', 'ко': 'コ', 'ке': 'ケ',
    'кя': 'キャ', 'кю': 'キュ', 'кё': 'キョ',
    'га': 'ガ', 'ги': 'ギ', 'гу': 'グ', 'гэ': 'ゲ', 'го': 'ゴ', 'ге': 'ゲ',
    'гя': 'ギャ', 'гю': 'ギュ', 'гё': 'ギョ',
    'са': 'サ', 'си': 'シ', 'су': 'ス', 'сэ': 'セ', 'со': 'ソ', 'се': 'セ',
    'ся': 'シャ', 'сю': 'シュ', 'сё': 'ショ',
    'за': 'ザ', 'зи': 'ジ', 'зу': 'ズ', 'зэ': 'ゼ', 'зо': 'ゾ', 'зе': 'ゼ',
    'зя': 'ジャ', 'зю': 'ジュ', 'зё': 'ジョ',
    'та': 'タ', 'ти': 'チ', 'тэ': 'テ', 'то': 'ト', 'цу': 'ツ', 'те': 'テ',
    'тя': 'チャ', 'тю': 'チュ', 'тё': 'チョ',
    'да': 'ダ', 'ди': 'ヂ', 'дэ': 'デ', 'до': 'ド', 'дзу': 'ヅ', 'де': 'デ',
    'дя': 'ヂャ', 'дю': 'ヂュ', 'дё': 'ヂョ',
    'на': 'ナ', 'ни': 'ニ', 'ну': 'ヌ', 'нэ': 'ネ', 'но': 'ノ', 'не': 'ネ',
    'ня': 'ニャ', 'ню': 'ニュ', 'нё': 'ニョ',
    'ха': 'ハ', 'хи': 'ヒ', 'ху': 'フ', 'хэ': 'ヘ', 'хо': 'ホ', 'хе': 'ヘ',
    'хя': 'ヒャ', 'хю': 'ヒュ', 'хё': 'ヒョ',
    'ба': 'バ', 'би': 'ビ', 'бу': 'ブ', 'бэ': 'ベ', 'бо': 'ボ', 'бе': 'ベ',
    'бя': 'ビャ', 'бю': 'ビュ', 'бё': 'ビョ',
    'па': 'パ', 'пи': 'ピ', 'пу': 'プ', 'пэ': 'ペ', 'по': 'ポ', 'пе': 'ペ',
    'пя': 'ピャ', 'пю': 'ピュ', 'пё': 'ピョ',
    'ма': 'マ', 'ми': 'ミ', 'му': 'ム', 'мэ': 'メ', 'мо': 'モ', 'ме': 'メ',
    'мя': 'ミャ', 'мю': 'ミュ', 'мё': 'ミョ',
    'ра': 'ラ', 'ри': 'リ', 'ру': 'ル', 'рэ': 'レ', 'ро': 'ロ', 'ре': 'レ',
    'ря': 'リャ', 'рю': 'リュ', 'рё': 'リョ',
    'ва': 'ワ', 'ви': 'ウィ', 'вэ': 'ウェ', 'во': 'ヲ',
    'фа': 'ファ', 'фи': 'フィ', 'фу': 'フ', 'фэ': 'フェ', 'фо': 'フォ', 'фе': 'フェ',
    'йа': 'ヤ', 'йу': 'ユ', 'йо': 'ヨ',
    'ла': 'ラ', 'ли': 'リ', 'лэ': 'レ', 'ле': 'レ', 'лу': 'ル', 'ло': 'ロ', 'ля': 'リャ', 'лю': 'リュ', 'лё': 'リョ',
    'ща': 'シャ', 'щу': 'シュ', 'що': 'ショ', 'ще': 'シェ',
    'ча': 'チャ', 'чу': 'チュ', 'чо': 'チョ', 'че': 'チェ',
    'ц': 'ツ', 'ца': 'ツァ', 'цо': 'ツォ', 'це': 'ツェ', 'цы': 'ツィ', 'цю': 'ツュ',
    'ж': 'ジ', 'жа': 'ジャ', 'же': 'ジェ', 'жи': 'ジ', 'жо': 'ジョ', 'жу': 'ジュ',
    'ш': 'シ', 'ша': 'シャ', 'ше': 'シェ', 'ши': 'シ', 'шо': 'ショ', 'шу': 'シュ',
    'й': 'イ', 'ь': '', 'ъ': '', 'ы': 'イ', 'йи': 'イ', 'йы': 'イ',
    'в': 'ヴ', 'ва': 'ヴァ', 'ве': 'ヴェ', 'ви': 'ヴィ', 'во': 'ヴォ', 'ву': 'ヴ',
    'дж': 'ヂ', 'дз': 'ヅ', 'джа': 'ヂャ', 'дже': 'ヂェ', 'джо': 'ヂョ', 'джу': 'ヂュ',
    'кс': 'クス', 'гз': 'グズ', 'кв': 'クヴ', 'тс': 'ツ', 'тьс': 'ツ', 
    'нь': 'ン', 'рр': 'ッラ', 'сс': 'ッサ', 'тт': 'ッタ', 'пп': 'ッパ',
    'йе': 'イェ', 'йэ': 'イェ', 'йё': 'イヨ', 'йя': 'イヤ',
    'б': 'ブ', 'в': 'ヴ', 'г': 'グ', 'д': 'ド', 'ж': 'ジ', 'з': 'ズ', 
    'к': 'ク', 'л': 'ル', 'м': 'ム', 'н': 'ン', 'п': 'プ', 'р': 'ラ', 
    'с': 'ス', 'т': 'ト', 'ф': 'フ', 'х': 'ヒ', 'ц': 'ツ', 'ч': 'チ', 
    'ш': 'シ', 'щ': 'シ',
    'ё': 'ヨ'  # Добавлено отсутствующее
}

# Японские числа (улучшенная конвертация)
NUMERALS = {
    0: '零', 1: '一', 2: '二', 3: '三', 4: '四',
    5: '五', 6: '六', 7: '七', 8: '八', 9: '九',
    10: '十', 100: '百', 1000: '千', 10000: '万',
    100000000: '億', 1000000000000: '兆'  # Добавлен триллион
}


# Расширенные списки японских частиц
PARTICLES = [
    'ね', 'よ', 'か', 'わ', 'の', 'な', 'ぞ', 'ぜ', 'が', 'に', 'で', 'と', 'も', 'や',
    'さ', 'かしら', 'とも', 'っけ', 'こそ', 'まで', 'ばかり', 'だけ', 'ほど', 'くらい',
    'なり', 'やら', 'だの', 'とか', 'って', 'てば', 'たら', 'れば', 'のに', 'ので',
    'から', 'し', 'ながら', 'たり', 'つつ', 'とも', 'ども', 'もの', 'こと', 'ところ',
    'として', 'において', 'について', 'によって', 'としては', 'にとって', 'ばかりか',
    'のみならず', 'どころか', 'ばかりでなく', 'だけでなく', 'けれども', 'がてら', 'かたがた',
    'ついでに', 'とともに', 'にしたがって', 'にともなって', 'にもかかわらず', 'のかわりに',
    'のほかに', 'のうちに', 'のとおりに', 'のだ', 'のです', 'んでした', 'んです'
]

# Расширенные списки междометий
INTERJECTIONS = [
    'ああ', 'あら', 'まあ', 'ええ', 'おお', 'やれ', 'やっほ', 'わあ', 'うわ', 'あっ',
    'ううん', 'うん', 'えへへ', 'おや', 'おっと', 'おおきに', 'ありがと', 'すみません',
    'ごめん', 'ごめんなさい', 'わーい', 'やったー', 'しまった', 'ちくしょう', 'くそ',
    'おいおい', 'おやおや', 'さてさて', 'よしよし', 'あれれ', 'あらら', 'うふふ', 'くくく',
    'にやり', 'げっ', 'うえっ', 'おっとっと', 'どっこい', 'おっほっほ', 'あはは', 'いやいや',
    'いやはや', 'はあ', 'へえ', 'ほう', 'ふうん', 'ふむ', 'むむ', 'うむ', 'うーん', 'んん',
    'あーあ', 'はぁ', 'はああ', 'ひいい', 'ひええ', 'うひょー', 'わくわく', 'どきどき',
    'わさわさ', 'そわそわ', 'じーん', 'がーん', 'びっくり', 'おっと', 'どん', 'ばん', 'ぱちぱち',
    'ぽよよーん', 'にょろにょろ', 'ぬるぬる', 'つるつる', 'ぷにぷに', 'もふもふ', 'ごしごし',
    'ごろごろ', 'すやすや', 'すいすい', 'すたこら', 'てけてけ', 'にゃお', 'わん', 'こんにちは',
    'おはよう', 'こんばんは', 'おやすみ', 'いただきます', 'ごちそうさま', 'ただいま', 'おかえり',
    'いってきます', 'いってらっしゃい', 'おめでとう', 'おだいじに'
]

# Расширенные списки ня-междометий
NYA_INTERJECTIONS = [
    'にゃあ', 'にゃん', 'にゃーん', 'にゃお', 'ぎゃあ', 'きゃあ', 'みゃあ', 'みゃお',
    'にゃっ', 'にゃんにゃん', 'にゃー', 'にゃも', 'にゃろ', 'にゃはは', 'にゃふ', 'にゃんこ',
    'にゃんぱすー', 'にゃーんご', 'にゃんち', 'にゃんて', 'にゃんたん', 'にゃんべ', 'にゃんぼ',
    'にゃんにゃんお', 'にゃんちゅ', 'にゃんぴ', 'にゃんぷ', 'にゃんみ', 'にゃんも', 'にゃんり',
    'にゃんわ', 'にゃんが', 'にゃんざ', 'にゃんだ', 'にゃんば', 'にゃんぱ', 'にゃんじ',
    'にゃんび', 'にゃんぎ', 'にゃんぷ', 'みゃー', 'みゃう', 'みゃく', 'みゃこ', 'みゃそ',
    'ぎゃー', 'ぎゃく', 'ぎゃぐ', 'ぎゃす', 'ぎゃぜ', 'ぎゃど', 'ぎゃば', 'ぎゃぱ', 'きゃー',
    'きゃき', 'きゃく', 'きゃち', 'きゃつ', 'きゃん', 'きゃんきゃん', 'にゃんき', 'にゃんきー',
    'にゃんきゃ', 'にゃんきゅ', 'にゃんきょ', 'みゃん', 'ぎゃん', 'きゃん', 'にゃんにゃんにゃん'
]

# Расширенные списки начальных фраз
START_PHRASES = [
    '実は', 'つまり', '要するに', '例えば', '確かに', '一般的に', '基本的に', '正直言って',
    '実際のところ', '私の考えでは', '言ってみれば', 'あのね', 'えっと', 'そういえば', 
    '結論から言うと', '突然ですが', 'ご存知ですか', '実を言うと', '驚いたことに', 
    '信じられないかもしれないが', '率直に言って', '個人的には', '皆さんご存知のように',
    '昔から', '最近気づいたんだけど', '改めて言うまでもなく', '周知の事実ですが',
    '意外かもしれませんが', '面白いことに', '悲しいかな', '残念ながら', '幸いなことに',
    '残念なことに', '当然のことながら', '驚くべきことに', '予想通り', '予想外にも',
    '興味深いことに', '厳密に言えば', '大げさに言えば', '簡単に言うと', '一言で言うと',
    '詳しく説明すると', '結論を先に言えば', '本題に入りますが', '前置きが長くなりましたが',
    '突然で恐縮ですが', '余談ですが', '話は変わりますが', '蛇足ながら', 'ついでに言えば',
    '言い忘れていましたが', '補足すると', 'ちなみに', 'そうそう', 'あ、そうだ', '思い出した',
    'ごめん、忘れてた', '先ほども言いましたが', '繰り返しになりますが'
]

# Расширенные списки конечных фраз
END_PHRASES = [
    'です', 'ですね', 'ですよ', 'ですわ', 'なのです', 'かもしれません', 'でしょう', 'だろう',
    'かもね', 'に違いない', 'に決まってる', 'かもしれない', 'でしょうね', 'だと思う', 'かな',
    'なんだよね', 'ってこと', 'わけ', 'はず', 'べき', 'つもり', '予定', 'みたい', 'そう', 'らしい',
    'ようだ', 'みたいだ', '感じ', '気がする', 'と言われている', 'とされている', 'と考えられる',
    'と言える', 'と言っても過言ではない', 'と言わざるを得ない', 'に他ならない', 'にすぎない',
    'に越したことはない', 'に限る', 'かもしれないし、そうでないかもしれない', 'かどうかは分からない',
    'かも、いや、違うか', 'かもしれないけど、自信はない', 'って本当かな', 'って思う今日この頃',
    'って感じがするんだよね', 'って言う人もいる', 'ってところかな', 'ってわけさ', 'ってことだよ',
    'ってことになるね', 'ってことらしい', 'ってのが一般的な見方', 'って言ってもいいかも',
    'って思わない？', 'って気がしてならない', 'って言いたいところだけど', 'ってのが本音',
    'って言うのが適切かな', 'って感じです', 'ってことです', 'ってわけです', 'ってことになります',
    'ってことでしょう', 'ってことでいいですか', 'ってことでよろしくお願いします',
    'ってことで今日はここまで', 'ってことで終わります', 'ってことで失礼します'
]

# Иероглифы для случайной вставки
KANJI_WORDS = {
    '猫': 'ねこ', '犬': 'いぬ', '愛': 'あい', '夢': 'ゆめ', '空': 'そら',
    '桜': 'さくら', '月': 'つき', '星': 'ほし', '花': 'はな', '本': 'ほん',
    '友': 'とも', '力': 'ちから', '水': 'みず', '火': 'ひ', '風': 'かぜ'
}

# Кавайные аниме-смайлики
KAWAII_EMOJIS = [
    ' (´∀｀) ', ' (￣ω￣) ', ' (◕‿◕) ', ' (⁄ ⁄>⁄ ▽⁄<⁄ ⁄) ', ' (✿◠‿◠) ',
    ' (◡‿◡✿) ', ' (◕‿-) ', ' (=^･ｪ･^=) ', ' (^・ω・^ ) ', ' (●´ω｀●) ',
    ' ヾ(≧▽≦*)o ', ' o((>ω< ))o ', ' (｡･ω･｡) ', ' (・ω<) ', ' (づ｡◕‿‿◕｡)づ ',
    ' (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ ', ' ✧ﾟ･: *ヽ(◕ヮ◕ヽ) ', ' (ﾉ´ヮ`)ﾉ*: ･ﾟ ', ' (●´□`)♡ ',
    ' (´｡• ω •｡`) ', ' (●´□`)σ ', ' (っ◕‿◕)っ ', ' (づ￣ ³￣)づ ', ' (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ ',
    ' (ﾉ>ω<)ﾉ :｡･:*:･ﾟ’★,｡･:*:♪･ﾟ’☆ ', ' (●´ω｀●)ゞ ', ' (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ ', ' ✧･ﾟ: *✧･ﾟ:* ',
    ' (●´艸`) ', ' (✪‿✪)ノ ', ' (⁄ ⁄>⁄ ▽⁄<⁄ ⁄) ', ' (◕‿◕✿) ', ' (◕‿-) ',
    ' (=^-ω-^=) ', ' (^・ω・^ ) ', ' (●´ω｀●) ', ' ヾ(≧▽≦*)o ', ' o((>ω< ))o ',
    ' (｡･ω･｡) ', ' (・ω<) ', ' (づ｡◕‿‿◕｡)づ ', ' (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ ', ' ✧ﾟ･: *ヽ(◕ヮ◕ヽ) ',
    ' (ﾉ´ヮ`)ﾉ*: ･ﾟ ', ' (●´□`)♡ ', ' (´｡• ω •｡`) ', ' (●´□`)σ ', ' (っ◕‿◕)っ ',
    ' (づ￣ ³￣)づ ', ' (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ ', ' (ﾉ>ω<)ﾉ :｡･:*:･ﾟ’★,｡･:*:♪･ﾟ’☆ ', ' (●´ω｀●)ゞ ',
    ' ^_^', ' ^o^', ' >_<', ' T_T', ' ;_;', ' :3', ' :D', ' :P', ' :O', ' :*', ' <3',
    ' (^_^) ', ' (^o^) ', ' (>_<) ', ' (T_T) ', ' (;_;) ', ' :3 ', ' :D ', ' :P ', ' :O ', ' :* ', ' <3 ',
    ' (｡>﹏<｡) ', ' (¬_¬) ', ' (⌒_⌒;) ', ' (＾▽＾) ', ' (￣ヘ￣) ', ' (╯°□°）╯︵ ┻━┻ ', ' ヽ(´▽`)/ ',
    ' ¯\\_(ツ)_//¯ ', ' ( ͡° ͜ʖ ͡°) ', ' (づ￣ ³￣)づ ', ' (っ˘ω˘ς ) ', ' (´･ω･`) ', ' (＾ω＾) ',
    ' (；一_一) ', ' (´･_･`) ', ' (⊙_◎) ', ' (・_・;) ', ' (◐‿◑)﻿ ', ' (◑‿◐) ', ' (◕‿◕) ',
    ' (◠‿◠) ', ' (◠﹏◠) ', ' (✖﹏✖) ', ' (◡﹏◡) ', ' (◕﹏◕) ', ' (◕‿◕) ', ' (◠‿◠✿) ',
    ' (◡‿◡✿) ', ' (◕‿◕✿) ', ' (◕‿◕)♡ ', ' (◕‿◕✿)♡ ', ' (◕‿◕)ノ♡ ', ' (◕‿◕✿)ノ♡ ',
    ' (っ´▽｀)っ ', ' (づ｡◕‿‿◕｡)づ ', ' (っ˘ڡ˘ς) ', ' (っ˘ω˘ς) ', ' (っ˘з˘ς) ',
    ' (っ˘з(˘⌣˘ ) ', ' (っˆڡˆς) ', ' (っˆڡˆς)っ ', ' (っˆڡˆς) ', ' (っˆڡˆς)っ ',
    ' (っ´∀｀)っ ', ' (っ´ω｀)っ ', ' (っ´▽｀)っ ', ' (っ´∀｀)ﾉ ', ' (っ´ω｀)ﾉ ',
    ' (っ´▽｀)ﾉ ', ' (っ・∀・)っ ', ' (っ・ω・)っ ', ' (っ・▽・)っ ', ' (っ・∀・)ﾉ ',
    ' (っ・ω・)ﾉ ', ' (っ・▽・)ﾉ ', ' (っ=∀=)っ ', ' (っ=ω=)っ ', ' (っ=▽=)っ ',
    ' (っ=∀=)ﾉ ', ' (っ=ω=)ﾉ ', ' (っ=▽=)ﾉ ', ' (っ´∀｀) ', ' (っ´ω｀) ',
    ' (っ´▽｀) ', ' (っ・∀・) ', ' (っ・ω・) ', ' (っ・▽・) ', ' (っ=∀=) ',
    ' (っ=ω=) ', ' (っ=▽=) ', ' (っ´∀｀) ', ' (っ´ω｀) ', ' (っ´▽｀) ',
    ' (っ・∀・) ', ' (っ・ω・) ', ' (っ・▽・) ', ' (っ=∀=) ', ' (っ=ω=) ',
    ' (っ=▽=) ', ' (っ´∀｀) ', ' (っ´ω｀) ', ' (っ´▽｀) ', ' (っ・∀・) ',
    ' (っ・ω・) ', ' (っ・▽・) ', ' (っ=∀=) ', ' (っ=ω=) ', ' (っ=▽=) ',
    ' (っ´∀｀) ', ' (っ´ω｀) ', ' (っ´▽｀) ', ' (っ・∀・) ', ' (っ・ω・) ',
    ' (っ・▽・) ', ' (っ=∀=) ', ' (っ=ω=) ', ' (っ=▽=) ', ' (っ´∀｀) ',
    ' (っ´ω｀) ', ' (っ´▽｀) ', ' (っ・∀・) ', ' (っ・ω・) ', ' (っ・▽・) ',
    ' (っ=∀=) ', ' (っ=ω=) ', ' (っ=▽=) ', ' (っ´∀｀) ', ' (っ´ω｀) ',
    ' (っ´▽｀) ', ' (っ・∀・) ', ' (っ・ω・) ', ' (っ・▽・) ', ' (っ=∀=) ',
    ' (っ=ω=) ', ' (っ=▽=) '
]

def convert_number(num_str):
    """Улучшенная конвертация чисел в японские иероглифы"""
    try:
        num = int(num_str)
        
        # Обработка больших чисел
        if num >= 10**16:  # Числа больше 10^16 не поддерживаются
            return num_str
        if num == 0:
            return NUMERALS[0]
        
        result = []
        # Расширенные единицы с поддержкой триллионов
        units = [1000000000000, 100000000, 10000, 1000, 100, 10, 1]
        
        for unit in units:
            if num < unit:
                continue
                
            count = num // unit
            num %= unit
            
            if count > 1 or unit == 1:
                if count >= 10:
                    # Безопасная рекурсия для больших чисел
                    result.append(convert_number(str(count)))
                else:
                    result.append(NUMERALS[count])
                    
            if unit > 1:
                result.append(NUMERALS[unit])
                
        return ''.join(result)
    except Exception:
        return num_str  # Возвращаем строку при ошибках

def transliterate_word(word, kana_map):
    """Улучшенная транслитерация слов"""
    # Специальные последовательности
    word = re.sub(r'ться$', 'тсу', word)
    word = re.sub(r'тся$', 'тса', word)
    
    # Обработка двойных согласных (только для согласных)
    word = re.sub(
        r'([бвгджзйклмнпрстфхцчшщ])\1', 
        lambda m: 'っ' + m.group(1) if kana_map is HIRAGANA_MAP else 'ッ' + m.group(1), 
        word
    )
    
    # Обработка мягкого знака
    word = re.sub(r'([бвгджзйклмнпрстфхцчшщ])ь([ауоыэеёюяи])', 
                 lambda m: m.group(1) + {
                     'а': 'я', 'у': 'ю', 'о': 'ё', 
                     'э': 'е', 'е': 'е', 'ы': 'и',
                     'ё': 'ё', 'ю': 'ю', 'я': 'я', 'и': 'и'
                 }[m.group(2)], word)
    
    # Основная транслитерация
    result = []
    while word:
        found = False
        for length in range(min(3, len(word)), 0, -1):
            syllable = word[:length]
            if syllable in kana_map:
                result.append(kana_map[syllable])
                word = word[length:]
                found = True
                break
                
        if not found:
            result.append(word[0])
            word = word[1:]
    
    return ''.join(result)

def to_kana(text, kana_map):
    """Универсальная конвертация текста в кану"""
    tokens = re.findall(r'\w+|[^\w]', text.lower())
    result = []
    
    for token in tokens:
        if not token.isalpha():
            result.append(token)
            continue
            
        if token.isdigit():
            result.append(convert_number(token))
            continue
            
        result.append(transliterate_word(token, kana_map))
        
    return ''.join(result)

def anime_transform(text):
    """Улучшенная функция преобразования в аниме-стиль"""
    if not text.strip():
        return text
        
    kana_map = random.choice([HIRAGANA_MAP, KATAKANA_MAP])
    transformed = to_kana(text, kana_map)
    words = transformed.split()
    
    # Безопасная вставка элементов
    new_words = []
    for word in words:
        new_words.append(word)
        
        # Частицы (15% вероятность)
        if random.random() < 0.15:
            new_words[-1] += random.choice(PARTICLES)
            
        # Ня-междометия (10% вероятность)
        if random.random() < 0.10:
            new_words[-1] += random.choice(NYA_INTERJECTIONS)
            
        # Иероглифы (2% вероятность)
        if random.random() < 0.02 and KANJI_WORDS:
            new_words.append(random.choice(list(KANJI_WORDS.keys())))
    
    # Добавление смайликов (безопасная реализация)
    final_words = []
    for word in new_words:
        final_words.append(word)
        # Смайлики после слова (7% вероятность)
        if random.random() < 0.07:
            final_words.append(random.choice(KAWAII_EMOJIS))
    
    # Смайлик в конце (40% вероятность)
    if random.random() < 0.4:
        final_words.append(random.choice(KAWAII_EMOJIS))
    
    # Собираем результат
    result = ' '.join(final_words)
    
    # Конечная фраза (20% вероятность)
    if random.random() < 0.2:
        result += " " + random.choice(END_PHRASES)
        
    return result

async def get_random_anime_image():
    """Получает URL случайной аниме-картинки с API"""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=3)) as session:
            async with session.get("https://api.nekosapi.com/v4/images/random?limit=1") as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('url')  # Из документации API
                else:
                    print(f"Ошибка API: {response.status}")
    except Exception as e:
        print(f"Ошибка при получении аниме-картинки: {e}")
    return None
