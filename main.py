from __future__ import annotations
import asyncio
import gc
import io
import json
import logging
import time
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
import re 
import glob
import random
import secrets
import pickle
import gzip
from aiogram import types
import weakref
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor
from typing import Tuple
import aiohttp
from aiohttp import web
import shutil
from aiogram.types import Message
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.exceptions import TelegramRetryAfter
from asyncio import Semaphore
from aiogram import Bot, Dispatcher, F, types
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramForbiddenError,
    TelegramNetworkError,
    TelegramConflictError,
)
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
import subprocess
import signal
from datetime import datetime, timedelta, timezone, UTC
from japanese_translator import anime_transform, get_random_anime_image
from ukrainian_mode import ukrainian_transform, UKRAINIAN_PHRASES
import deanonymizer 
from conan import conan_roaster, conan_phrase
from zaputin_mode import zaputin_transform, PATRIOTIC_PHRASES 
from deanonymizer import process_deanon_command, DEANON_SURNAMES, DEANON_CITIES, DEANON_PROFESSIONS, DEANON_FETISHES, DEANON_DETAILS, generate_deanon_info
from help_text import HELP_TEXT
from help_broadcaster import help_broadcaster

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å–æ–∫ ==========
BOARDS = ['b', 'po', 'a', 'sex', 'vg']  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å–æ–∫

BOT_TOKENS = {
    'b': os.environ.get('BOT_TOKEN'),    # –¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ /b/
    'po': os.environ.get('BOT_TOKEN_PO'),  # –¢–æ–∫–µ–Ω –¥–ª—è /po/
    'a': os.environ.get('BOT_TOKEN_A'),    # –¢–æ–∫–µ–Ω –¥–ª—è /a/
    'sex': os.environ.get('BOT_TOKEN_SEX'), # –¢–æ–∫–µ–Ω –¥–ª—è /sex/
    'vg': os.environ.get('BOT_TOKEN_VG'),   # –¢–æ–∫–µ–Ω –¥–ª—è /vg/
}

BOARD_INFO = {
    'b': {"name": "/b/", "description": "–ë—Ä–µ–¥", "username": "@dvach_chatbot"},
    'po': {"name": "/po/", "description": "–ü–æ–ª–∏—Ç–∏–∫–∞", "username": "@dvach_po_chatbot"},
    'a': {"name": "/a/", "description": "–ê–Ω–∏–º–µ", "username": "@dvach_a_chatbot"},
    'sex': {"name": "/sex/", "description": "–°–µ–∫—Å–∞—á", "username": "@dvach_sex_chatbot"},
    'vg': {"name": "/vg/", "description": "–í–∏–¥–µ–æ–∏–≥—Ä—ã", "username": "@dvach_vg_chatbot"},
}

# –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏
message_queues = {board: asyncio.Queue(maxsize=9000) for board in BOARDS}

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
is_shutting_down = False
git_executor = ThreadPoolExecutor(max_workers=1)
send_executor = ThreadPoolExecutor(max_workers=100)
git_semaphore = asyncio.Semaphore(1)
message_queue = asyncio.Queue()
anime_mode = False
zaputin_mode = False
slavaukraine_mode = False
suka_blyat_mode = False
last_suka_blyat = None
suka_blyat_counter = 0
last_mode_activation = None
MODE_COOLDOWN = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
# –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö / –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
last_texts: dict[int, deque[str]] = defaultdict(lambda: deque(maxlen=5))

shadow_mutes: dict[int, datetime] = {}  # user_id -> datetime –∫–æ–Ω—Ü–∞ —Ç–∏—Ö–æ–≥–æ –º—É—Ç–∞
# —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 Message-–æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –í–º–µ—Å—Ç–æ defaultdict –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π dict —Å —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
last_user_msgs = {}
MAX_ACTIVE_USERS_IN_MEMORY = 5000

# –†—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞—Ä—è–º–∏
spam_violations = defaultdict(dict)  # user_id -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π


# –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ aiogram
os.environ["AIORGRAM_DISABLE_SIGNAL_HANDLERS"] = "1"


SPAM_RULES = {
    'text': {
        'max_repeats': 3,  # –ú–∞–∫—Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
        'min_length': 2,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        'window_sec': 15,  # –û–∫–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)
        'max_per_window': 6,  # –ú–∞–∫—Å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∫–Ω–µ
        'penalty': [60, 300, 600]  # –®–∫–∞–ª–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π: [1 –º–∏–Ω, 5–º–∏–Ω, 10 –º–∏–Ω]
    },
    'sticker': {
        'max_per_window': 6,  # 5 —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ 15 —Å–µ–∫
        'window_sec': 15,
        'penalty': [60, 600, 900]  # 1–º–∏–Ω, 10–º–∏–Ω, 15 –º–∏–Ω
    },
    'animation': {  # –ì–∏—Ñ–∫–∏
        'max_per_window': 5,  # 4 –≥–∏—Ñ–∫–∏ –∑–∞ 30 —Å–µ–∫
        'window_sec': 24,
        'penalty': [60, 600, 900]  # 1–º–∏–Ω, 10–º–∏–Ω, 15 –º–∏–Ω
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
state = {
    'users_data': {
        'active': set(),
        'banned': set()
    },
    'post_counter': 0,
    'message_counter': {},
    'settings': {  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'dvach_enabled': False
    }
}
# user_id -> datetime –∫–æ–Ω—Ü–∞ –º—É—Ç–∞ (UTC)
mutes: dict[int, datetime] = {}
# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
spam_tracker = defaultdict(list)
messages_storage = {}
post_to_messages = {}
message_to_post = {}
last_messages = deque(maxlen=300)
last_activity_time = datetime.now()
daily_log = io.StringIO()

# –î–æ–±–∞–≤—å—Ç–µ —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
sent_media_groups = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø

# –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞—Ö: media_group_id -> –¥–∞–Ω–Ω—ã–µ
current_media_groups = {}
media_group_timers = {}

def suka_blyatify_text(text: str) -> str:
    if not text:
        return text
    global suka_blyat_counter
    words = text.split()
    for i in range(len(words)):
        if random.random() < 0.3:
            words[i] = random.choice(MAT_WORDS)
    suka_blyat_counter += 1
    if suka_blyat_counter % 3 == 0:
        words.append("... –°–£–ö–ê –ë–õ–Ø–¢–¨!")
    return ' '.join(words)

def restore_backup_on_start():
    """–ó–∞–±–∏—Ä–∞–µ—Ç —Å–≤–µ–∂–∏–π state.json –∏ reply_cache.json –∏–∑ backup-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    repo_url = "https://github.com/shlomapetia/dvachbot-backup.git"
    backup_dir = "/tmp/backup"
    try:
        if os.path.exists(backup_dir):
            shutil.rmtree(backup_dir)
        subprocess.run(["git", "clone", repo_url, backup_dir], check=True)

        for fname in ["state.json", "reply_cache.json"]:
            src = os.path.join(backup_dir, fname)
            dst = os.path.join(os.getcwd(), fname)
            if os.path.exists(src):
                shutil.copy2(src, dst)
                print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {fname} –∏–∑ backup-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
            else:
                print(f"{fname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ backup-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ backup: {e}")

async def healthcheck(request):
    print("üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ healthcheck")
    return web.Response(text="Bot is alive")


async def start_healthcheck():
    port = int(os.environ.get('PORT', 8080))
    app = web.Application()
    app.router.add_get("/", healthcheck)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    try:
        print(f"üü¢ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å healthcheck —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        await site.start()  # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        print(f"üü¢ Healthcheck-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ healthcheck —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        raise


GITHUB_REPO = "https://github.com/shlomapetia/dvachbot-backup.git"
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å –≤ Railway!

async def git_commit_and_push():
    """–ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞ –≤ GitHub"""
    global is_shutting_down

    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ shutdown
    if git_executor._shutdown and not is_shutting_down:
        print("‚ö†Ô∏è Git executor –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø")
        return False

    async with git_semaphore:
        try:
            token = os.getenv("GITHUB_TOKEN")
            if not token:
                print("‚ùå –ù–µ—Ç GITHUB_TOKEN")
                return False

            loop = asyncio.get_running_loop()
            return await loop.run_in_executor(
                git_executor, 
                sync_git_operations, 
                token
            )
        except Exception as e:
            print(f"‚õî –û—à–∏–±–∫–∞ –≤ git_commit_and_push: {str(e)}")
            return False

def sync_git_operations(token: str) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ Git-–æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        work_dir = "/tmp/git_backup"
        os.makedirs(work_dir, exist_ok=True)
        repo_url = f"https://{token}@github.com/shlomapetia/dvachbot-backup.git"

        if not os.path.exists(os.path.join(work_dir, ".git")):
            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            clone_cmd = ["git", "clone", repo_url, work_dir]
            result = subprocess.run(clone_cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result.stderr}")
                return False
            print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
        else:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            pull_cmd = ["git", "-C", work_dir, "pull"]
            result = subprocess.run(pull_cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result.stderr}")

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        files_to_copy = ["state.json", "reply_cache.json"]
        copied_files = []

        for fname in files_to_copy:
            src = os.path.join(os.getcwd(), fname)
            if os.path.exists(src):
                shutil.copy2(src, work_dir)
                copied_files.append(fname)

        if not copied_files:
            print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞")
            return False

        # Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        subprocess.run(["git", "-C", work_dir, "config", "user.name", "Backup Bot"], check=True)
        subprocess.run(["git", "-C", work_dir, "config", "user.email", "backup@dvachbot.com"], check=True)

        subprocess.run(["git", "-C", work_dir, "add", "."], check=True)

        commit_msg = f"Backup: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}"
        subprocess.run(["git", "-C", work_dir, "commit", "-m", commit_msg], check=True)

        push_cmd = ["git", "-C", work_dir, "push", "-u", "origin", "main"]
        result = subprocess.run(push_cmd, capture_output=True, text=True)

        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É—à–∞: {result.stderr}")
            return False

        print(f"‚úÖ –ë–µ–∫–∞–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub: {', '.join(copied_files)}")
        return True

    except Exception as e:
        print(f"‚õî –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è Git –æ—à–∏–±–∫–∞: {str(e)}")
        return False

dp = Dispatcher()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING,  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    format="%(message)s",  # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–∞—Ç
    datefmt="%H:%M:%S"  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ
)
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è aiohttp (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä)
aiohttp_log = logging.getLogger('aiohttp')
aiohttp_log.setLevel(logging.CRITICAL)  # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è aiogram (–±–æ—Ç)
aiogram_log = logging.getLogger('aiogram')
aiogram_log.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è


def clean_html_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    if not text:
        return text
    return re.sub(r'<[^>]+>', '', text)

def add_you_to_my_posts(text: str, user_id: int) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç (You) –∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –ø–æ—Å—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –∂–µ –ø–æ—Å—Ç"""
    if not text:
        return text

    pattern = r">>(\d+)"
    matches = re.findall(pattern, text)

    for post_str in matches:
        try:
            post_num = int(post_str)
            post_data = messages_storage.get(post_num, {})
            original_author = post_data.get("author_id")

            if original_author == user_id:
                # –î–æ–±–∞–≤–ª—è–µ–º "(You)", –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                target = f">>{post_num}"
                replacement = f">>{post_num} (You)"

                if target in text and replacement not in text:
                    text = text.replace(target, replacement)
        except (ValueError, KeyError):
            continue

    return text


async def shutdown():
    """Cleanup tasks before shutdown"""
    print("Shutting down...")
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º healthcheck —Å–µ—Ä–≤–µ—Ä
        if 'healthcheck_site' in globals():
            await healthcheck_site.stop()
            print("üõë Healthcheck server stopped")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º executors –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        git_executor.shutdown(wait=True, cancel_futures=True)
        send_executor.shutdown(wait=True, cancel_futures=True)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if hasattr(dp, 'storage') and dp.storage:
            await dp.storage.close()
    except Exception as e:
        print(f"Error during shutdown: {e}")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    if 'bot' in globals() and bot.session:
        await bot.session.close()

    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    await asyncio.wait_for(
        asyncio.gather(*tasks, return_exceptions=True),
        timeout=5.0
    )
    print("All background tasks stopped")


async def auto_backup():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1 —á"""
    while True:
        try:
            await asyncio.sleep(14400)  # 4 —á

            if is_shutting_down:
                break

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º reply_cache
            save_reply_cache()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º state.json
            with open('state.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'post_counter': state['post_counter'],
                    'users_data': {
                        'active': list(state['users_data']['active']),
                        'banned': list(state['users_data']['banned']),
                    },
                    'message_counter': state['message_counter'],
                    'settings': state['settings'],
                    'recent_post_mappings': {
                        str(k): v for k, v in list(post_to_messages.items())[-500:]
                    }
                }, f, ensure_ascii=False, indent=2)

            # –ü—É—à –≤ GitHub
            print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ state.json –∏ reply_cache.json, –ø—É—à–∏–º –≤ GitHub...")
            success = await git_commit_and_push()
            if success:
                print("‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ GitHub")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_backup: {e}")
            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(60)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
gc.set_threshold(
    700, 10, 10)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –ø–∞–º—è—Ç–∏/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

async def save_state_and_backup():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç state.json –∏ reply_cache.json, –ø—É—à–∏—Ç –≤ GitHub"""
    try:
        with open('state.json', 'w', encoding='utf-8') as f:
            json.dump({
                'post_counter': state['post_counter'],
                'users_data': {
                    'active': list(state['users_data']['active']),
                    'banned': list(state['users_data']['banned']),
                },
                'message_counter': state['message_counter'],
                'settings': state['settings'],
                'recent_post_mappings': {
                    str(k): v for k, v in list(post_to_messages.items())[-500:]
                }
            }, f, ensure_ascii=False, indent=2)
        save_reply_cache()
        print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ state.json –∏ reply_cache.json, –ø—É—à–∏–º –≤ GitHub...")
        return await git_commit_and_push()
    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state: {e}")
        return False

async def cleanup_old_messages():
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π"""
    while True:
        await asyncio.sleep(7200)  # –ö–∞–∂–¥—ã–µ 1 —á–∞—Å
        try:
            current_time = datetime.now(UTC)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤–º–µ—Å—Ç–æ MSK
            old_posts = [
                pnum for pnum, data in messages_storage.items()
                if (current_time - data.get('timestamp', current_time)).days > 7
            ]
            for pnum in old_posts:
                messages_storage.pop(pnum, None)
                post_to_messages.pop(pnum, None)
            print(f"–û—á–∏—â–µ–Ω–æ {len(old_posts)} —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

def get_user_msgs_deque(user_id):
    """–ü–æ–ª—É—á–∞–µ–º deque –¥–ª—è —é–∑–µ—Ä–∞, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏"""
    if user_id not in last_user_msgs:
        if len(last_user_msgs) >= MAX_ACTIVE_USERS_IN_MEMORY:
            oldest_user = next(iter(last_user_msgs))
            del last_user_msgs[oldest_user]

        last_user_msgs[user_id] = deque(maxlen=10)

    return last_user_msgs[user_id]

# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMINS = {int(x) for x in os.getenv("ADMINS", "").split(",") if x}
SPAM_LIMIT = 14
SPAM_WINDOW = 15
STATE_FILE = 'state.json'
SAVE_INTERVAL = 14400  # —Å–µ–∫—É–Ω–¥
STICKER_WINDOW = 10  # —Å–µ–∫—É–Ω–¥
STICKER_LIMIT = 7
REST_SECONDS = 30  # –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
REPLY_CACHE = 500  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –¥–µ—Ä–∂–∞—Ç—å
REPLY_FILE = "reply_cache.json"  # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è reply
# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
MAX_MESSAGES_IN_MEMORY = 1110  # —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –ø–æ—Å—Ç–æ–≤


WEEKDAYS = [
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", 
    "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
]

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
MOTIVATIONAL_MESSAGES = [
    "–ß–µ–º –±–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤, —Ç–µ–º —ç–ø–∏—á–Ω–µ–µ —Ç—Ä–µ–¥—ã",
    "–û–¥–∏–Ω –∞–Ω–æ–Ω - –Ω–µ –∞–Ω–æ–Ω. –ó–æ–≤–∏ –±—Ä–∞—Ç–∏—à–µ–∫",
    "–ë–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤ - –±–æ–ª—å—à–µ —Ä–æ—Ñ–ª–æ–≤",
    "–¢–≤–æ–π –¥—Ä—É–≥ –≤—Å—ë –µ—â—ë —Å–∏–¥–∏—Ç –≤ —Ç–µ–ª–µ–≥–µ –∫–∞–∫ –Ω–æ—Ä–º–∏—Å? –ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ",
    "–ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –∞–Ω–æ–Ω = -1 –Ω–æ—Ä–º–∏—Å –≤ –º–∏—Ä–µ",
    "–°–∏–¥–∏—à—å —Ç—É—Ç –æ–¥–∏–Ω? –ó–∞–µ–±–∞–ª, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π, –Ω–µ –±—É–¥—å –∞—É—Ç–∏—Å—Ç–æ–º",
    "–ë–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤ - –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ —Ç—Ä–µ–¥ —É–º—Ä—ë—Ç",
    "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ –¥–≤–æ–π–Ω—É—é –¥–æ–∑—É –ª—É–ª–∑–æ–≤",
    "–¢–≤–æ–∏ –∫–µ–Ω—Ç—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –≤ –≤–∫? –ü–æ—Ä–∞ –∏—Ö —Å–ø–∞—Å–∞—Ç—å",
    "–ê–Ω–æ–Ω–∏–º—É—Å—ã –Ω–µ —Ä–∞–∑–º–Ω–æ–∂–∞—é—Ç—Å—è –ø–æ—á–∫–æ–≤–∞–Ω–∏–µ–º. –ó–æ–≤–∏ –Ω–æ–≤—ã—Ö",
    "–°–∫—É—á–Ω–æ? –ü–æ–∑–æ–≤–∏ –∞–Ω–æ–Ω–æ–≤, –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–µ–µ",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —á–∞—Ç = –º—ë—Ä—Ç–≤—ã–π —á–∞—Ç. –î–µ–π—Å—Ç–≤—É–π",
    "–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å. –≠—Ç–æ –∏ –¥—Ä—É–∂–±–∞",
    "–ê–±—É —Å–æ—Å–µ—Ç —Ö—É–π. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π",
    "–¢–≥–∞—á - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —á–∞—Ç. –≠—Ç–æ –∞–Ω–æ–Ω—ã",
    "–í–æ–∑—Ä–æ–∂–¥–∞–µ–º —Å–æ—Å–∞—á. –ê–Ω–æ–Ω—ã, –∑–æ–≤–∏—Ç–µ –¥—Ä—É–∑–µ–π",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞",
    "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω. –¢—ã –Ω–µ –æ–¥–∏–Ω. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π",
    "–î–∞ —Ç—ã –∑–∞–µ–±–∞–ª, –ø—Ä–∏–≥–ª–∞—à–∞–π –∞–Ω–æ–Ω–æ–≤",
    "–ü–æ—Ä–∞ –±—ã –ø—Ä–æ–ø–∏–∞—Ä–∏—Ç—å —Ç–≥–∞—á. –†–∞–∑–æ—à–ª–∏ –≤ —Å–≤–æ–∏ –∫–æ–Ω—Ñ—ã",
]

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
INVITE_TEXTS = [
    "–ê–Ω–æ–Ω, –∑–∞–ª–µ—Ç–∞–π –≤ –¢–≥–∞—á @dvach_chatbot\n–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ",
    "–ï—Å—Ç—å —Ç–µ–ª–µ–≥–∞? –ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? \n@dvach_chatbot - –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
    "–£—Å—Ç–∞–ª –æ—Ç —Ü–µ–Ω–∑—É—Ä—ã? –•–æ—á–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏?\n –í–µ–ª–∫–∞–º –≤ –¢–≥–∞—á - @dvach_chatbot - –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ",
    "@dvach_chatbot - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    "–¢–≥–∞—á: @dvach_chatbot\n–ü–∏—à–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–°–∫—É—á–∞–µ—à—å –ø–æ –¥–≤–∞—á—É? –û–Ω —Ç—É—Ç:  –¢–≥–∞—á @dvach_chatbot\n–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞",
    "–ó–∞–ª–µ—Ç–∞–π –≤ @dvach_chatbot\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≥–¥–µ –º–æ–∂–Ω–æ –≤—Å—ë",
    "@dvach_chatbot - –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —É—Å—Ç–∞–ª –æ—Ç –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤\n100% –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å",
    "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ: @dvach_chatbot\n–ü–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–¢–≥–∞—á –≤ —Ç–µ–ª–µ–≥–µ: @dvach_chatbot\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    "@dvach_chatbot - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ü–∏—à–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–°–∞–ø —Ç–≥–∞—á: @dvach_chatbot\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞. @dvach_chatbot",
    "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω. –¢—ã –Ω–µ –æ–¥–∏–Ω. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π. @dvach_chatbot",
    "–¢–≥–∞—á - –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ @dvach_chatbot",
]

# –î–ª—è /suka_blyat
MAT_WORDS = ["—Å—É–∫–∞", "–±–ª—è–¥—å", "–ø–∏–∑–¥–µ—Ü", "–µ–±–∞—Ç—å", "–Ω–∞—Ö", "–ø–∏–∑–¥–∞", "—Ö—É–π–Ω—è", "–µ–±–∞–ª", "–±–ª—è—Ç—å", "–æ—Ç—ä–µ–±–∏—Å—å", "–µ–±–∞–Ω—ã–π", "–µ–±–ª–∞–Ω", "–•–£–ô", "–ü–ò–ó–î–ê"]

# —Ö—Ä–∞–Ω–∏—Ç 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö sticker_file_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ¬´–æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö¬ª
last_stickers: dict[int, deque[str]] = defaultdict(lambda: deque(maxlen=5))

# —Ç–∞–π–º-—à—Ç–∞–º–ø—ã –≤—Å–µ—Ö –ø—Ä–∏—à–µ–¥—à–∏—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 c
sticker_times: dict[int, list[datetime]] = defaultdict(list)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ú–°–ö
MSK = timezone(timedelta(hours=3))

# ‚îÄ‚îÄ‚îÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–π error-handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.errors()
async def global_error_handler(event: types.ErrorEvent) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è aiogram"""
    exception = event.exception
    update = event.update

    if exception is None:
        if update:
            update_info = f"Update {update.update_id}"
            if update.message:
                update_info += f" from user {update.message.from_user.id}"
            print(f"‚ö†Ô∏è Event without exception: {update_info}")
        else:
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –±–µ–∑ update")
        return True

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {type(exception).__name__}"
    if str(exception):
        error_msg += f": {exception}"
    print(error_msg)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ TelegramForbiddenError (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
    if isinstance(exception, TelegramForbiddenError):
        user_id = None
        if update and update.message:
            user_id = update.message.from_user.id
        elif update and update.callback_query:
            user_id = update.callback_query.from_user.id

        if user_id:
            state['users_data']['active'].discard(user_id)
            print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    elif isinstance(exception, (TelegramNetworkError, TelegramConflictError, aiohttp.ClientError)):
        print(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {exception}")
        await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        return False  # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å polling

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ KeyError (–ø—Ä–æ–±–ª–µ–º—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º)
    elif isinstance(exception, KeyError):
        print(f"üîë KeyError: {exception}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return True

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    else:
        print(f"‚õî –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
        if update:
            print(f"Update: {update.model_dump_json(exclude_none=True)}")
        await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        return False

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã"""
    if not text:
        return text
    return text.replace('&', '&amp;').replace('<', '&lt;').replace(
        '>', '&gt;').replace('"', '&quot;')


def is_admin(uid: int) -> bool:
    return uid in ADMINS

async def save_state():
    """–¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ state.json –∏ push –≤ GitHub"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º state.json
        with open('state.json', 'w', encoding='utf-8') as f:
            json.dump({
                'post_counter': state['post_counter'],
                'users_data': {
                    'active': list(state['users_data']['active']),
                    'banned': list(state['users_data']['banned']),
                },
                'message_counter': state['message_counter'],
                'settings': state['settings'],
                'recent_post_mappings': {
                    str(k): v for k, v in list(post_to_messages.items())[-500:]
                }
            }, f, ensure_ascii=False, indent=2)

        # –í—Å–µ–≥–¥–∞ –ø—É—à–∏–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ state.json, –ø—É—à–∏–º –≤ GitHub...")
        return await git_commit_and_push()

    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state: {e}")
        return False

def save_reply_cache():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        recent_posts = sorted(messages_storage.keys())[-REPLY_CACHE:]
        new_data = {
            "post_to_messages": {
                str(p): post_to_messages[p]
                for p in recent_posts 
                if p in post_to_messages
            },
            "message_to_post": {
                f"{uid}_{mid}": p 
                for (uid, mid), p in message_to_post.items() 
                if p in recent_posts
            },
            "messages_storage_meta": {
                str(p): {
                    "author_id": messages_storage[p].get("author_id", ""),
                    "timestamp": messages_storage[p].get("timestamp", datetime.now(UTC)).isoformat(),
                    "author_msg": messages_storage[p].get("author_message_id")
                }
                for p in recent_posts
            }
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        old_data = {}
        if os.path.exists(REPLY_FILE):
            with open(REPLY_FILE, 'r', encoding='utf-8') as f:
                try:
                    old_data = json.load(f)
                except json.JSONDecodeError:
                    old_data = {}

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –≤—ã—Ö–æ–¥–∏–º
        if old_data == new_data:
            print("‚ÑπÔ∏è reply_cache.json –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(REPLY_FILE, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, ensure_ascii=False, indent=2)
            print("‚úÖ reply_cache.json –æ–±–Ω–æ–≤–ª–µ–Ω")

        return True

    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è reply_cache: {str(e)[:200]}")
        return False

def load_state():
    global message_to_post, post_to_messages
    if not os.path.exists('state.json'):
        return
    with open('state.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    state['post_counter'] = data.get('post_counter', 0)
    state['users_data']['active'] = set(data['users_data'].get('active', []))
    state['users_data']['banned'] = set(data['users_data'].get('banned', []))
    state['message_counter'] = data.get('message_counter', {})
    state['settings'] = data.get('settings', {'dvach_enabled': False})  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –ø–æ—Å—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'recent_post_mappings' in data:
        for post_str, messages in data['recent_post_mappings'].items():
            post_to_messages[int(post_str)] = messages
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
            for uid, mid in messages.items():
                message_to_post[(uid, mid)] = int(post_str)

    load_reply_cache()

def load_archived_post(post_num):
    """–ò—â–µ–º –ø–æ—Å—Ç –≤ –∞—Ä—Ö–∏–≤–∞—Ö"""
    for archive_file in glob.glob("archive_*.pkl.gz"):
        with gzip.open(archive_file, "rb") as f:
            data = pickle.load(f)
            if post_num in data:
                return data[post_num]
    return None

def load_reply_cache():
    global message_to_post, post_to_messages
    """–ß–∏—Ç–∞–µ–º reply_cache.json, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏"""
    if not os.path.exists(REPLY_FILE):
        return

    try:
        if os.path.getsize(REPLY_FILE) == 0:
            return
        with open(REPLY_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, OSError) as e:
        print(f"reply_cache.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ({e}), –∏–≥–Ω–æ—Ä–∏—Ä—É—é")
        return

    message_to_post.clear()
    for key, post_num in data.get("message_to_post", {}).items():
        uid, mid = map(int, key.split("_"))
        message_to_post[(uid, mid)] = post_num

    post_to_messages.clear()
    for p_str, mapping in data.get("post_to_messages", {}).items():
        post_to_messages[int(p_str)] = {
            int(uid): mid
            for uid, mid in mapping.items()
        }

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ UTC
    for p_str, meta in data.get("messages_storage_meta", {}).items():
        p = int(p_str)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime —Å —É–∫–∞–∑–∞–Ω–∏–µ–º UTC
        if 'timestamp' in meta:
            dt = datetime.fromisoformat(meta['timestamp'])
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=UTC)  # –î–æ–±–∞–≤–ª—è–µ–º UTC –µ—Å–ª–∏ –Ω–µ—Ç –∑–æ–Ω—ã
            messages_storage[p] = {
                "author_id": meta["author_id"],
                "timestamp": dt,
                "author_message_id": meta.get("author_msg"),
            }

    print(f"reply-cache –∑–∞–≥—Ä—É–∂–µ–Ω: {len(post_to_messages)} –ø–æ—Å—Ç–æ–≤")
    print(f"State: –ø–æ—Å—Ç-—Å—á—ë—Ç—á–∏–∫ = {state['post_counter']}, "
          f"–∞–∫—Ç–∏–≤–Ω—ã—Ö = {len(state['users_data']['active'])}, "
          f"–∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö = {len(state['users_data']['banned'])}")
    print(f"Reply-cache: –ø–æ—Å—Ç–æ–≤ {len(post_to_messages)}, "
          f"—Å–æ–æ–±—â–µ–Ω–∏–π {len(message_to_post)}")

async def graceful_shutdown():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ graceful shutdown (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π)"""
    global is_shutting_down
    if is_shutting_down:
        return

    is_shutting_down = True
    print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª shutdown, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")

    # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await dp.stop_polling()
        print("‚è∏ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è shutdown")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling: {e}")

    # 2. –ñ–¥–∞—Ç—å –ø–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø—É—Å—Ç–µ–µ—Ç (–º–∞–∫—Å 10 —Å–µ–∫)
    for _ in range(10):
        if message_queue and message_queue.empty():
            break
        await asyncio.sleep(1)

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—É—à–∏–º –¥–∞–Ω–Ω—ã–µ
    await save_state_and_backup()

    # 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –±—ã–ª–æ
    try:
        if 'healthcheck_site' in globals():
            await healthcheck_site.stop()
            print("üõë Healthcheck server stopped")

        git_executor.shutdown(wait=True, cancel_futures=True)
        send_executor.shutdown(wait=True, cancel_futures=True)

        if hasattr(dp, 'storage') and dp.storage:
            await dp.storage.close()
    except Exception as e:
        print(f"Error during shutdown: {e}")

    if 'bot' in globals() and bot.session:
        await bot.session.close()

    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()
    await asyncio.gather(*tasks, return_exceptions=True)
    print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")

async def auto_memory_cleaner():
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

        MAX_POSTS = 100  # –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏

        # –ß–∏—Å—Ç–∏–º –≤—Å–µ —Å–ª–æ–≤–∞—Ä–∏ —Å –ø–æ—Å—Ç–∞–º–∏
        if len(post_to_messages) > MAX_POSTS:
            recent = sorted(post_to_messages.keys())[-MAX_POSTS:]
            old_posts = set(post_to_messages.keys()) - set(recent)

            for post in old_posts:
                post_to_messages.pop(post, None)
                messages_storage.pop(post, None)

        # –ß–∏—Å—Ç–∏–º message_to_post –æ—Ç —Å—Ç–∞—Ä—ã—Ö
        valid_posts = set(post_to_messages.keys())
        message_to_post_copy = dict(message_to_post)
        for key, post_num in message_to_post_copy.items():
            if post_num not in valid_posts:
                del message_to_post[key]

        # –ß–∏—Å—Ç–∏–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ø 100
        if len(state['message_counter']) > 100:
            top_users = sorted(state['message_counter'].items(),
                               key=lambda x: x[1],
                               reverse=True)[:100]
            state['message_counter'] = dict(top_users)

        # –ß–∏—Å—Ç–∏–º spam_tracker –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        now = datetime.now(UTC)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤–º–µ—Å—Ç–æ –Ω–∞–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        for user_id in list(spam_tracker.keys()):
            spam_tracker[user_id] = [
                t for t in spam_tracker[user_id]
                if (now - t).total_seconds() < SPAM_WINDOW  # –ò—Å–ø–æ–ª—å–∑—É–µ–º total_seconds
            ]
            if not spam_tracker[user_id]:
                del spam_tracker[user_id]

        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        for _ in range(3):
            gc.collect()

async def cleanup_old_users():
    """–ß–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ —Ä–∞–∑ –≤ —á–∞—Å"""
    while True:
        await asyncio.sleep(3600)
        active_users = state['users_data']['active']

        # –°—á–∏—Ç–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ –æ—á–∏—Å—Ç–∫–∏
        inactive_count = 0
        for user_dict in [
                spam_tracker, last_texts, last_stickers, sticker_times
        ]:
            inactive_users = set(user_dict.keys()) - active_users
            inactive_count = max(inactive_count, len(inactive_users))
            for uid in inactive_users:
                user_dict.pop(uid, None)

        if inactive_count > 0:
            print(
                f"–û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {inactive_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
async def garbage_collector():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        collected = gc.collect()
        if collected > 1000:
            print(f"GC: —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")

async def aiogram_memory_cleaner():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à aiogram –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        # –û—á–∏—â–∞–µ–º –±–æ–ª—å—à–∏–µ weakref —Å–ª–æ–≤–∞—Ä–∏
        cleared = 0
        for obj in gc.get_objects():
            if isinstance(obj, dict) and len(obj) > 700:
                try:
                    sample = next(iter(obj.values()), None) if obj else None
                    if isinstance(sample,
                                  (weakref.ref, weakref.ReferenceType)):
                        obj.clear()
                        cleared += 1
                except:
                    pass

        if cleared > 0:
            collected = gc.collect()
            print(
                f"–û—á–∏—â–µ–Ω–æ {cleared} –±–æ–ª—å—à–∏—Ö weakref —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤"
            )

async def auto_save_state():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 1—á"""
    while True:
        try:
            await asyncio.sleep(14400)

            if is_shutting_down:
                break

            save_reply_cache()

            with open('state.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'post_counter': state['post_counter'],
                    'users_data': {
                        'active': list(state['users_data']['active']),
                        'banned': list(state['users_data']['banned']),
                    },
                    'message_counter': state['message_counter'],
                    'settings': state['settings'],
                    'recent_post_mappings': {
                        str(k): v for k, v in list(post_to_messages.items())[-500:]
                    }
                }, f, ensure_ascii=False, indent=2)

            print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            await git_commit_and_push()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_save_state: {e}")
            await asyncio.sleep(60)

async def check_spam(user_id: int, msg: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∞–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º –∏ —Å–±—Ä–æ—Å–æ–º —É—Ä–æ–≤–Ω—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if msg.content_type == 'text':
        msg_type = 'text'
        content = msg.text
    elif msg.content_type == 'sticker':
        msg_type = 'sticker'
        content = None
    elif msg.content_type == 'animation':
        msg_type = 'animation'
        content = None
    elif msg.content_type in ['photo', 'video', 'document'] and msg.caption:
        msg_type = 'text'
        content = msg.caption
    else:
        return True

    rules = SPAM_RULES.get(msg_type)
    if not rules:
        return True

    now = datetime.now(UTC)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in spam_violations or not spam_violations[user_id]:
        spam_violations[user_id] = {
            'level': 0,
            'last_reset': now,
            'last_contents': deque(maxlen=4)
        }
    # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
    if (now - spam_violations[user_id]['last_reset']) > timedelta(hours=1):
        spam_violations[user_id] = {
            'level': 0,
            'last_reset': now,
            'last_contents': deque(maxlen=4)
        }
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–µ–∫—Å—Ç–æ–≤/–ø–æ–¥–ø–∏—Å–µ–π
    if msg_type == 'text' and content:
        spam_violations[user_id]['last_contents'].append(content)
        # 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
        if len(spam_violations[user_id]['last_contents']) == rules['max_repeats']:
            if len(set(spam_violations[user_id]['last_contents'])) == 1:
                spam_violations[user_id]['level'] = min(
                    spam_violations[user_id]['level'] + 1,
                    len(rules['penalty']) - 1)
                return False
        # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤
        if len(spam_violations[user_id]['last_contents']) == 4:
            unique = set(spam_violations[user_id]['last_contents'])
            if len(unique) == 2:
                contents = list(spam_violations[user_id]['last_contents'])
                p1 = [contents[0], contents[1]] * 2
                p2 = [contents[1], contents[0]] * 2
                if contents == p1 or contents == p2:
                    spam_violations[user_id]['level'] = min(
                        spam_violations[user_id]['level'] + 1,
                        len(rules['penalty']) - 1)
                    return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    window_start = now - timedelta(seconds=rules['window_sec'])
    spam_tracker[user_id] = [t for t in spam_tracker[user_id] if t > window_start]
    spam_tracker[user_id].append(now)
    if len(spam_tracker[user_id]) >= rules['max_per_window']:
        spam_violations[user_id]['level'] = min(
            spam_violations[user_id]['level'] + 1,
            len(rules['penalty']) - 1)
        return False
    return True

async def apply_penalty(user_id: int, msg_type: str):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º—É—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é –Ω–∞—Ä—É—à–µ–Ω–∏—è"""
    rules = SPAM_RULES.get(msg_type, {})
    if not rules:
        return
    level = spam_violations.get(user_id, {}).get('level', 0)
    level = min(level, len(rules.get('penalty', [])) - 1)
    mute_seconds = rules['penalty'][level] if rules.get('penalty') else 30
    mutes[user_id] = datetime.now(UTC) + timedelta(seconds=mute_seconds)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è
    violation_type = {
        'text': "—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∞–º",
        'sticker': "—Å–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏",
        'animation': "—Å–ø–∞–º –≥–∏—Ñ–∫–∞–º–∏"
    }.get(msg_type, "—Å–ø–∞–º")
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        if mute_seconds < 60:
            time_str = f"{mute_seconds} —Å–µ–∫"
        elif mute_seconds < 3600:
            time_str = f"{mute_seconds // 60} –º–∏–Ω"
        else:
            time_str = f"{mute_seconds // 3600} —á–∞—Å"
        await bot.send_message(
            user_id,
            f"üö´ –≠–π –ø–∏–¥–æ—Ä —Ç—ã –≤ –º—É—Ç–µ –Ω–∞ {time_str} –∑–∞ {violation_type}\n"
            f"–°–ø–∞–º–∏—à—å –¥–∞–ª—å—à–µ - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω",
            parse_mode="HTML")
        await send_moderation_notice(user_id, "mute", time_str, 0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—É—Ç–µ: {e}")


def format_header() -> Tuple[str, int]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–æ–≤"""
    state['post_counter'] += 1
    post_num = state['post_counter']

    # –†–µ–∂–∏–º /slavaukraine
    if slavaukraine_mode:
        return f"üíôüíõ –üi—Å—Ç ‚Ññ{post_num}", post_num

    # –†–µ–∂–∏–º /zaputin
    if zaputin_mode:
        return f"üá∑üá∫ –ü–æ—Å—Ç ‚Ññ{post_num}", post_num

    # –†–µ–∂–∏–º /anime
    if anime_mode:
        return f"üå∏ ÊäïÁ®ø {post_num} Áï™", post_num

    # –†–µ–∂–∏–º /suka_blyat
    if suka_blyat_mode:
        return f"üí¢ –ü–æ—Å—Ç ‚Ññ{post_num}", post_num

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    rand = random.random()
    if rand < 0.003:
        circle = "üî¥ "
    elif rand < 0.006:
        circle = "üü¢ "
    else:
        circle = ""

    prefix = ""
    rand_prefix = random.random()
    if rand_prefix < 0.005:  # 0.5%
        prefix = "### –ê–î–ú–ò–ù ### "
    elif rand_prefix < 0.008:  # 0.3%
        prefix = "–ê–±—É - "
    elif rand_prefix < 0.01:   # 0.2%
        prefix = "–ü–∏–¥–æ—Ä - "
    elif rand_prefix < 0.012:  # 0.2%
        prefix = "### –î–ñ–£–õ–£–ü ### "
    elif rand_prefix < 0.014:   # 0.2%
        prefix = "### –•—É–µ—Å–æ—Å ### "
    elif rand_prefix < 0.016:   # 0.2%
        prefix = "–ü—ã–Ω—è - "
    elif rand_prefix < 0.018:   # 0.2%
        prefix = "–ù–∞—Ä–∏–º–∞–Ω –ù–∞–º–∞–∑–æ–≤ - "
    elif rand_prefix < 0.021:
        prefix = "–ò–ú–ü–ï–†–ê–¢–û–† –ö–û–ù–ê–ù - "
    elif rand_prefix < 0.023:
        prefix = "–ê–Ω—Ç–æ–Ω –ë–∞–±–∫–∏–Ω - "
    elif rand_prefix < 0.025:
        prefix = "### –ù–ê–†–ò–ú–ê–ù –ù–ê–ú–ê–ó–û–í ### "
    elif rand_prefix < 0.027:
        prefix = "### –ü–£–¢–ò–ù ### "
    elif rand_prefix < 0.028:
        prefix = "–ì–µ–π - "
    elif rand_prefix < 0.030:
        prefix = "–ê–Ω–∞—Ä—Ö–∏—Å—Ç - "
    elif rand_prefix < 0.033:
        prefix = "### –ò–º–±–µ—Ü–∏–ª ### "
    elif rand_prefix < 0.035:
        prefix = "### –ß–ú–û ### "
    elif rand_prefix < 0.037:
        prefix = "### –û–ù–ê–ù–ò–°–¢ ### "
    elif rand_prefix < 0.040:
        prefix = "### –ß–ï–ß–ï–ù–ï–¶ ### "
    elif rand_prefix < 0.042:
        prefix = "–¢–æ–º–æ–∫–æ –ö—É—Ä–æ–∫–∏ - "
    elif rand_prefix < 0.044:
        prefix = "### –ê–Ω–∏–º–µ –¥–µ–≤–æ—á–∫–∞ ### "

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_text = f"{circle}{prefix}–ü–æ—Å—Ç ‚Ññ{post_num}"
    return header_text, post_num

async def delete_user_posts(user_id: int, time_period_minutes: int) -> int:
    """–£–¥–∞–ª—è–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        time_threshold = datetime.now(UTC) - timedelta(minutes=time_period_minutes)
        posts_to_delete = []
        deleted_messages = 0

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        for post_num, post_data in list(messages_storage.items()):
            post_time = post_data.get('timestamp')
            if not post_time: 
                continue
                
            if (post_data.get('author_id') == user_id and 
                post_time >= time_threshold):
                posts_to_delete.append(post_num)

        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        messages_to_delete = []
        for post_num in posts_to_delete:
            if post_num in post_to_messages:
                for uid, mid in post_to_messages[post_num].items():
                    messages_to_delete.append((uid, mid))

        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for (uid, mid) in messages_to_delete:
            try:
                for _ in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                    try:
                        await bot.delete_message(uid, mid)
                        deleted_messages += 1
                        break
                    except TelegramBadRequest as e:
                        if "message to delete not found" in str(e):
                            break
                        await asyncio.sleep(0.5)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {mid} —É {uid}: {e}")

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
        for post_num in posts_to_delete:
            post_to_messages.pop(post_num, None)
            messages_storage.pop(post_num, None)
            # –£–¥–∞–ª—è–µ–º –∏–∑ message_to_post
            global message_to_post
            message_to_post = {k: v for k, v in message_to_post.items() if v != post_num}

        return deleted_messages
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_user_posts: {e}")
        return 0


async def process_media_group_message(message: Message, media_group_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ"""
    try:
        media_group = state['media_groups'][media_group_id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        media_data = {
            'type': message.content_type,
            'file_id': None,
            'caption': message.caption
        }

        if message.photo:
            media_data['file_id'] = message.photo[-1].file_id
        elif message.video:
            media_data['file_id'] = message.video.file_id
        elif message.document:
            media_data['file_id'] = message.document.file_id
        elif message.audio:
            media_data['file_id'] = message.audio.file_id

        media_group['messages'].append(media_data)

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∞–π–º–∞—É—Ç—É)
        await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã

        if media_group_id in state['media_groups']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
            await asyncio.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            await send_media_group(media_group_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")

async def handle_audio_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    if user_id in state['users_data']['banned']:
        await message.delete()
        return

    if mutes.get(user_id) and mutes[user_id] > datetime.now(UTC):
        await message.delete()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header, current_post_num = format_header()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç?
    reply_to_post = None
    reply_info = {}

    if message.reply_to_message:
        reply_mid = message.reply_to_message.message_id
        reply_to_post = None
        for (uid, mid), pnum in message_to_post.items():
            if mid == reply_mid:
                reply_to_post = pnum
                break
        if reply_to_post and reply_to_post in post_to_messages:
            reply_info = post_to_messages[reply_to_post]
        else:
            reply_to_post = None

    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ –ø–æ–¥–ø–∏—Å–∏
    caption = message.caption
    if slavaukraine_mode and caption:
        caption = ukrainian_transform(caption)
    if suka_blyat_mode and caption:
        caption = suka_blyatify_text(caption)
    if anime_mode and caption:
        caption = anime_transform(caption)
    if zaputin_mode and caption:
        caption = zaputin_transform(caption)      

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content = {
        'type': 'audio',
        'header': header,
        'file_id': message.audio.file_id,
        'caption': caption,
        'reply_to_post': reply_to_post
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[current_post_num] = {
        'author_id': user_id,
        'timestamp': datetime.now(MSK),
        'content': content,
        'reply_to': reply_to_post
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
    reply_to_message_id = reply_info.get(user_id) if reply_info else None

    caption_text = f"<i>{header}</i>"
    if caption:
        caption_text += f"\n\n{escape_html(caption)}"

    sent_to_author = await bot.send_audio(
        user_id,
        message.audio.file_id,
        caption=caption_text,
        reply_to_message_id=reply_to_message_id,
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    if sent_to_author:
        messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
        if current_post_num not in post_to_messages:
            post_to_messages[current_post_num] = {}
        post_to_messages[current_post_num][user_id] = sent_to_author.message_id
        message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
    recipients = state['users_data']['active'] - {user_id}
    if recipients:
        await message_queue.put({
            'recipients': recipients,
            'content': content,
            'post_num': current_post_num,
            'reply_info': reply_info if reply_info else None,
            'user_id': user_id
        })

async def send_media_group(media_group_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã"""
    try:
        media_group = state['media_groups'].get(media_group_id)
        if not media_group or not media_group['messages']:
            return

        # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        builder = MediaGroupBuilder(
            caption=media_group['header']
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        for idx, media in enumerate(media_group['messages']):
            if media['type'] == 'photo':
                if idx == 0 and media['caption']:
                    builder.add_photo(
                        media=media['file_id'],
                        caption=f"{media_group['header']}\n\n{escape_html(media['caption'])}"
                    )
                else:
                    builder.add_photo(media=media['file_id'])
            elif media['type'] == 'video':
                if idx == 0 and media['caption']:
                    builder.add_video(
                        media=media['file_id'],
                        caption=f"{media_group['header']}\n\n{escape_html(media['caption'])}"
                    )
                else:
                    builder.add_video(media=media['file_id'])
            elif media['type'] == 'document':
                if idx == 0 and media['caption']:
                    builder.add_document(
                        media=media['file_id'],
                        caption=f"{media_group['header']}\n\n{escape_html(media['caption'])}"
                    )
                else:
                    builder.add_document(media=media['file_id'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
        sent_messages = await bot.send_media_group(
            chat_id=media_group['author_id'],
            media=builder.build()
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        post_num = media_group['post_num']
        messages_storage[post_num] = {
            'author_id': media_group['author_id'],
            'timestamp': media_group['timestamp'],
            'content': {
                'type': 'media_group',
                'header': media_group['header'],
                'media': media_group['messages']
            }
        }

        if sent_messages:
            messages_storage[post_num]['author_message_id'] = sent_messages[0].message_id
            post_to_messages[post_num] = {media_group['author_id']: sent_messages[0].message_id}
            for msg in sent_messages:
                message_to_post[(media_group['author_id'], msg.message_id)] = post_num

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        recipients = state['users_data']['active'] - {media_group['author_id']}
        if recipients:
            await message_queue.put({
                'recipients': recipients,
                'content': {
                    'type': 'media_group',
                    'header': media_group['header'],
                    'media': media_group['messages']
                },
                'post_num': post_num
            })

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del state['media_groups'][media_group_id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
    finally:
        if media_group_id in state['media_groups']:
            del state['media_groups'][media_group_id]

async def send_moderation_notice(user_id: int, action: str, duration: str = None, deleted_posts: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –≤ —á–∞—Ç"""
    state['post_counter'] += 1
    post_num = state['post_counter']
    header = "### –ê–¥–º–∏–Ω ###"

    if action == "ban":
        text = (f"üö® –•—É–µ—Å–æ—Å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º. –ü–æ–º—è–Ω–µ–º.")
    elif action == "mute":
        text = (f"üîá –ï–±–∞–Ω–æ–≥–æ –ø–∏–¥–æ—Ä–∞—Å–∞ –∑–∞–º—É—Ç–∏–ª–∏ –Ω–∞ {duration}. "
               "–•–æ—Ä–æ—à —Å–ø–∞–º–∏—Ç—å, —Ö—É–π–ª–æ –µ–±–∞–Ω–æ–µ!")
    else:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[post_num] = {
        'author_id': 0,  # 0 = —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'timestamp': datetime.now(MSK),
        'content': {
            'type': 'text',
            'header': header,
            'text': text
        }
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    await message_queue.put({
        "recipients": state["users_data"]["active"],
        "content": {
            "type": "text",
            "header": header,
            "text": text
        },
        "post_num": post_num
    })

async def send_message_to_users(
    recipients: set[int],
    content: dict,
    reply_info: dict | None = None,
    user_id: int | None = None,
) -> list:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–æ–≤"""
    if not recipients and user_id is None:
        return []

    if not content or 'type' not in content:
        return []

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
    modified_content = content.copy()

    # –í —Ñ—É–Ω–∫—Ü–∏–∏ send_message_to_users
    if anime_mode:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–ø–∏—Å–∏
        if modified_content.get('text'):
            modified_content['text'] = anime_transform(modified_content['text'])
        if modified_content.get('caption'):
            modified_content['caption'] = anime_transform(modified_content['caption'])

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤
    if slavaukraine_mode:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        if modified_content.get('text'):
            modified_content['text'] = ukrainian_transform(modified_content['text'])
        elif modified_content.get('caption'):
            modified_content['caption'] = ukrainian_transform(modified_content['caption'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –∫ 30% —Å–æ–æ–±—â–µ–Ω–∏–π
        if random.random() < 0.3:
            if modified_content.get('text'):
                modified_content['text'] += "\n\n" + random.choice(UKRAINIAN_PHRASES)
            elif modified_content.get('caption'):
                modified_content['caption'] += "\n\n" + random.choice(UKRAINIAN_PHRASES)
                
    elif zaputin_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –∫ 30% —Å–æ–æ–±—â–µ–Ω–∏–π
        if random.random() < 0.3:
            if modified_content.get('text'):
                modified_content['text'] += "\n\n" + random.choice(PATRIOTIC_PHRASES)
            elif modified_content.get('caption'):
                modified_content['caption'] += "\n\n" + random.choice(PATRIOTIC_PHRASES)
                
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
        if modified_content.get('text'):
            modified_content['text'] = zaputin_transform(modified_content['text'])
        if modified_content.get('caption'):
            modified_content['caption'] = zaputin_transform(modified_content['caption'])
            
    elif suka_blyat_mode:
        # –ú–∞—Ç–µ—Ä–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        if modified_content.get('text'):
            words = modified_content['text'].split()
            for i in range(len(words)):
                if random.random() < 0.3:
                    words[i] = random.choice(MAT_WORDS)
            modified_content['text'] = ' '.join(words)

            # –î–æ–±–∞–≤–ª—è–µ–º "... –°–£–ö–ê –ë–õ–Ø–¢–¨!" –∫ –∫–∞–∂–¥–æ–º—É 3-–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            global suka_blyat_counter
            suka_blyat_counter += 1
            if suka_blyat_counter % 3 == 0:
                modified_content['text'] += " ... –°–£–ö–ê –ë–õ–Ø–¢–¨!"

        # –ú–∞—Ç–µ—Ä–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
        elif modified_content.get('caption'):
            words = modified_content['caption'].split()
            for i in range(len(words)):
                if random.random() < 0.3:
                    words[i] = random.choice(MAT_WORDS)
            modified_content['caption'] = ' '.join(words)

            suka_blyat_counter += 1
            if suka_blyat_counter % 3 == 0:
                modified_content['caption'] += " ... –°–£–ö–ê –ë–õ–Ø–¢–¨!"

    # –£–¥–∞–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    blocked_users = set()
    active_recipients = set()

    for uid in recipients:
        if uid in state['users_data']['banned']:
            continue
        active_recipients.add(uid)

    if not active_recipients:
        return []

    async def really_send(uid: int, reply_to: int | None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            ct = modified_content["type"]
            header_text = modified_content['header']
            head = f"<i>{header_text}</i>"

            reply_to_post = modified_content.get('reply_to_post')
            original_author = None
            if reply_to_post and reply_to_post in messages_storage:
                original_author = messages_storage[reply_to_post].get('author_id')

            if uid == original_author:
                head = head.replace("–ü–æ—Å—Ç", "üî¥ –ü–æ—Å—Ç")

            reply_text = ""
            if reply_to_post:
                if uid == original_author:
                    reply_text = f">>{reply_to_post} (You)\n"
                else:
                    reply_text = f">>{reply_to_post}\n"

            main_text = ""
            if modified_content.get('text'):
                main_text = add_you_to_my_posts(modified_content['text'], original_author)
            elif modified_content.get('caption'):
                main_text = add_you_to_my_posts(modified_content['caption'], original_author)

            full_text = f"{head}\n\n{reply_text}{main_text}" if reply_text else f"{head}\n\n{main_text}"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if ct == "text":
                return await bot.send_message(
                    uid,
                    full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )
            
            elif ct == "photo":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ image_url (—ç—Ç–æ —Å–ª—É—á–∞–π –∞–Ω–∏–º–µ-—Ñ–æ—Ç–æ)
                img_url = content.get('image_url')
                if img_url:
                    # –ï—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ URL
                    if len(full_text) > 1024:
                        full_text = full_text[:1021] + "..."
                    return await bot.send_photo(
                        uid,
                        img_url,
                        caption=full_text,
                        reply_to_message_id=reply_to,
                        parse_mode="HTML"
                    )
                elif "file_id" in content:
                    # –ï—Å—Ç—å file_id ‚Äî –æ–±—ã—á–Ω–∞—è —Ñ–æ—Ç–æ –∏–∑ Telegram
                    if len(full_text) > 1024:
                        full_text = full_text[:1021] + "..."
                    return await bot.send_photo(
                        uid,
                        content["file_id"],
                        caption=full_text,
                        reply_to_message_id=reply_to,
                        parse_mode="HTML"
                    )
                else:
                    # –ù–ï–¢ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç!
                    return await bot.send_message(
                        uid,
                        full_text,
                        reply_to_message_id=reply_to,
                        parse_mode="HTML"
                    )
        
            elif ct == "video":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_video(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "media_group":
                if not content.get('media') or len(content['media']) == 0:
                    return None
                    
                builder = MediaGroupBuilder()
                for idx, media in enumerate(content['media']):
                    media_caption = None
                    if idx == 0:
                        media_caption = full_text

                    if media['type'] == 'photo':
                        if media_caption:
                            builder.add_photo(
                                media=media['file_id'],
                                caption=media_caption,
                                parse_mode="HTML"
                            )
                        else:
                            builder.add_photo(media=media['file_id'])
                    elif media['type'] == 'video':
                        if media_caption:
                            builder.add_video(
                                media=media['file_id'],
                                caption=media_caption,
                                parse_mode="HTML"
                            )
                        else:
                            builder.add_video(media=media['file_id'])
                    elif media['type'] == 'document':
                        if media_caption:
                            builder.add_document(
                                media=media['file_id'],
                                caption=media_caption,
                                parse_mode="HTML"
                            )
                        else:
                            builder.add_document(media=media['file_id'])

                return await bot.send_media_group(
                    chat_id=uid,
                    media=builder.build(),
                    reply_to_message_id=reply_to
                )

            elif ct == "animation":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_animation(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "document":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_document(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "audio":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_audio(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "sticker":
                return await bot.send_sticker(
                    uid,
                    content["file_id"],
                    reply_to_message_id=reply_to,
                )

            elif ct == "voice":
                return await bot.send_voice(
                    uid,
                    content["file_id"],
                    caption=head,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML"
                )

            elif ct == "video_note":
                return await bot.send_video_note(
                    uid,
                    content["file_id"],
                    reply_to_message_id=reply_to,
                )

        except TelegramRetryAfter as e:
            wait_time = e.retry_after + 1
            print(f"‚ö†Ô∏è Flood control {uid}, waiting {wait_time}s")
            await asyncio.sleep(wait_time)
            return await really_send(uid, reply_to)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
        except TelegramForbiddenError:
            blocked_users.add(uid)
            state['users_data']['active'].discard(uid)
            print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid}: {e}")
            return None

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
    max_concurrent = 100
    semaphore = asyncio.Semaphore(max_concurrent)

    async def send_with_semaphore(uid):
        async with semaphore:
            reply_to = reply_info.get(uid) if reply_info else None
            return await really_send(uid, reply_to)

    tasks = [send_with_semaphore(uid) for uid in active_recipients]
    results = await asyncio.gather(*tasks)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    if content.get('post_num'):
        post_num = content['post_num']
        for uid, msg in zip(active_recipients, results):
            if msg:
                if isinstance(msg, list):
                    if post_num not in post_to_messages:
                        post_to_messages[post_num] = {}
                    post_to_messages[post_num][uid] = msg[0].message_id
                    for m in msg:
                        message_to_post[(uid, m.message_id)] = post_num
                else:
                    if post_num not in post_to_messages:
                        post_to_messages[post_num] = {}
                    post_to_messages[post_num][uid] = msg.message_id
                    message_to_post[(uid, msg.message_id)] = post_num

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid in blocked_users:
        state['users_data']['active'].discard(uid)

    return list(zip(active_recipients, results))

async def message_broadcaster():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ worker'–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    workers = [asyncio.create_task(message_worker(f"Worker-{i}")) for i in range(5)]
    await asyncio.gather(*workers)

async def message_worker(worker_name: str):
    """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    while True:
        try:
            msg_data = await message_queue.get()
            if not msg_data:
                await asyncio.sleep(0.05)
                continue

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            if not await validate_message_format(msg_data):
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            recipients = msg_data['recipients']
            content = msg_data['content']
            post_num = msg_data['post_num']
            reply_info = msg_data.get('reply_info', {})

            # –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            active_recipients = {
                uid for uid in recipients 
                if uid not in state['users_data']['banned']
            }

            if not active_recipients:
                continue

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            print(f"{worker_name} | Processing post #{post_num} for {len(active_recipients)} users")

            # –û—Å–Ω–æ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            try:
                results = await send_message_to_users(
                    active_recipients,
                    content,
                    reply_info,
                    msg_data.get('user_id')
                )

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                success_count = sum(1 for _, msg in results if msg is not None)
                print(f"{worker_name} | ‚úÖ –ü–æ—Å—Ç #{post_num} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success_count}/{len(active_recipients)}")

                await process_successful_messages(post_num, results)

            except Exception as e:
                print(f"{worker_name} | ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ #{post_num}: {str(e)[:200]}")

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            if random.random() < 0.05:
                self_clean_memory()

        except Exception as e:
            print(f"{worker_name} | ‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:200]}")
            await asyncio.sleep(1)

async def validate_message_format(msg_data: dict) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not isinstance(msg_data, dict):
        return False

    required = ['recipients', 'content', 'post_num']
    if any(key not in msg_data for key in required):
        return False

    if not isinstance(msg_data['recipients'], (set, list)):
        return False

    if not isinstance(msg_data['content'], dict):
        return False

    if (msg_data['content'].get('type') == 'media_group' and 
        not isinstance(msg_data['content'].get('media'), list)):
        return False

    return True

async def process_successful_messages(post_num: int, results: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)"""
    post_to_messages.setdefault(post_num, {})

    for uid, msg in results:
        if not msg:
            continue

        if isinstance(msg, list):  # –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞
            post_to_messages[post_num][uid] = msg[0].message_id
            for m in msg:
                message_to_post[(uid, m.message_id)] = post_num
        else:  # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            post_to_messages[post_num][uid] = msg.message_id
            message_to_post[(uid, msg.message_id)] = post_num

def self_clean_memory():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if len(post_to_messages) > MAX_MESSAGES_IN_MEMORY * 1.5:
        # –£–¥–∞–ª—è–µ–º 20% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
        all_posts = sorted(post_to_messages.keys())
        to_delete = int(len(all_posts) * 0.2)
        posts_to_delete = all_posts[:to_delete]

        deleted = 0
        for post in posts_to_delete:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π
            deleted += len(post_to_messages.get(post, {}))
            post_to_messages.pop(post, None)
            messages_storage.pop(post, None)

        # –ß–∏—Å—Ç–∏–º message_to_post
        global message_to_post
        message_to_post = {
            k: v
            for k, v in message_to_post.items() if v not in posts_to_delete
        }

        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π")
        gc.collect()

async def reset_violations_after_hour(user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ —á–∞—Å"""
    await asyncio.sleep(3600)  # 1 —á–∞—Å
    if user_id in spam_violations:
        spam_violations[user_id] = 0

async def fetch_dvach_thread(board: str, only_new: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–¥ —Å –¥–≤–∞—á–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    f'https://2ch.hk/{board}/catalog.json') as response:
                if response.status != 200:
                    return None

                data = await response.json()

                if not data or 'threads' not in data:
                    return None

                threads = data['threads']
                if not threads:
                    return None

                if only_new and board == 'news':
                    threads.sort(key=lambda x: x.get('timestamp', 0),
                                 reverse=True)
                    threads = threads[:10]

                thread = random.choice(threads)
                thread_num = thread.get('num')

                if not thread_num:
                    return None

                async with session.get(
                        f'https://2ch.hk/{board}/res/{thread_num}.json'
                ) as thread_response:
                    if thread_response.status != 200:
                        return None

                    thread_data = await thread_response.json()

                    if not thread_data or 'threads' not in thread_data:
                        return None

                    posts = thread_data['threads'][0]['posts']
                    if not posts:
                        return None

                    op_post = posts[0]
                    text = op_post.get('comment', '')
                    text = re.sub(r'<[^>]+>', '', text)
                    text = text.replace('&gt;', '>')
                    text = text.replace('&lt;', '<')
                    text = text.replace('&amp;', '&')
                    text = text.replace('&quot;', '"')
                    text = text.replace('&#47;', '/')
                    text = text.replace('<br>', '\n')

                    if len(text) > 500:
                        text = text[:500] + '...'

                    link = f"https://2ch.hk/{board}/res/{thread_num}.html"

                    if board == 'news' or random.random() > 0.5:
                        result = f"–¢—Ä–µ–¥ —Å /{board}/:\n\n"
                        result += f"{text}\n\n"
                        result += link
                    else:
                        comment = random.choice(THREAD_COMMENTS)
                        result = f"{link}\n\n{comment}"
                        if text and random.random() > 0.3:
                            result = f"{text}\n\n{link}\n\n{comment}"

                    return result

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ —Å /{board}/: {e}")
        return None

async def news_poster():
    """–ü–æ—Å—Ç–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å /news/"""
    while True:
        try:
            await asyncio.sleep(news_interval * 90)

            if not state['settings']['dvach_enabled'] or not state[
                    'users_data']['active']:
                continue

            thread_text = await fetch_dvach_thread('news', only_new=True)
            if not thread_text:
                continue

            await post_dvach_thread(thread_text, 'news')

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ news –ø–æ—Å—Ç–µ—Ä–µ: {e}")
            await asyncio.sleep(90)


async def boards_poster():
    """–ü–æ—Å—Ç–µ—Ä —Ç—Ä–µ–¥–æ–≤ —Å /b/ –∏ /po/"""
    while True:
        try:
            wait_minutes = random.randint(boards_interval_min,
                                          boards_interval_max)
            await asyncio.sleep(wait_minutes * 20)

            if not state['settings']['dvach_enabled'] or not state[
                    'users_data']['active']:
                continue

            board = random.choice(['b', 'po'])
            thread_text = await fetch_dvach_thread(board)
            if not thread_text:
                continue

            await post_dvach_thread(thread_text, board)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ boards –ø–æ—Å—Ç–µ—Ä–µ: {e}")
            await asyncio.sleep(50)


async def post_dvach_thread(thread_text: str, board: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–¥ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
    active_users = list(state['users_data']['active'] -
                        state['users_data']['banned'])
    if not active_users:
        return

    fake_sender = random.choice(active_users)
    recipients = state['users_data']['active'] - {
        fake_sender
    } - state['users_data']['banned']

    if recipients:
        header, current_post_num = format_header()

        post_to_messages[current_post_num] = {}
        messages_storage[current_post_num] = {
            'author': fake_sender,
            'messages': {}
        }

        await message_queue.put({
            'recipients': recipients,
            'content': {
                'type': 'text',
                'header': header,
                'text': escape_html(thread_text)
            },
            'post_num': current_post_num
        })

        print(f"–¢—Ä–µ–¥ —Å /{board}/ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")


def generate_bot_message():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –¥–≤–∞—á–∞"""
    msg_type = random.choice(
        ['starter', 'topic', 'combined', 'question', 'reaction', 'statement'])

    if msg_type == 'starter':
        return random.choice(DVACH_STARTERS)

    elif msg_type == 'topic':
        topic = random.choice(DVACH_TOPICS)
        ending = random.choice(DVACH_ENDINGS)
        connector = random.choice([" - ", ". ", "! ", "? ", ", "])
        return f"{topic.capitalize()}{connector}{ending}"

    elif msg_type == 'combined' and len(last_messages) > 5:
        words = []
        for msg in random.sample(list(last_messages),
                                 min(5, len(last_messages))):
            if msg and isinstance(msg, str):
                msg_words = msg.split()
                if msg_words:
                    words.extend(
                        random.sample(msg_words, min(2, len(msg_words))))

        if words:
            random.shuffle(words)
            phrase = ' '.join(words[:random.randint(3, 6)])
            return f"{phrase}, {random.choice(DVACH_ENDINGS).lower()}"

    elif msg_type == 'question':
        questions = [
            "–ß–µ –ø–æ {topic}?", "{topic} - –∑–∞ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤?",
            "–ö—Ç–æ —à–∞—Ä–∏—Ç –∑–∞ {topic}?", "–ê–Ω–æ–Ω, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ {topic}",
            "{topic} —ç—Ç–æ –±–∞–∑–∞ –∏–ª–∏ –∫—Ä–∏–Ω–∂?", "–ü–æ—á–µ–º—É –≤—Å–µ —Ö–µ–π—Ç—è—Ç {topic}?",
            "–ö–æ–≥–¥–∞ —É–∂–µ –∑–∞–ø—Ä–µ—Ç—è—Ç {topic}?", "{topic} –ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω?",
            "–ö—Ç–æ-–Ω–∏–±—É–¥—å —é–∑–∞–µ—Ç {topic}?", "–°—Ç–æ–∏—Ç –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å —Å {topic}?"
        ]
        topic = random.choice(DVACH_TOPICS)
        return random.choice(questions).format(topic=topic)

    elif msg_type == 'reaction':
        reactions = [
            "–ø–∏–∑–¥–µ—Ü", "–æ—Ä—É", "–±–∞–∑–∞", "–∫—Ä–∏–Ω–∂", "–∞—Ö—É–µ—Ç—å", "—Ç–æ–ø—á–∏–∫", "–≥–æ–¥–Ω–æ—Ç–∞",
            "—Ö—É–π–Ω—è", "–∑–±—Å", "—á–µ—Ç–∫–æ", "–µ–±–∞—Ç—å", "–Ω–∏—Ö—É—è —Å–µ–±–µ", "–æ—Ö—É–µ–Ω–Ω–æ", "—Ö—É–µ–≤–æ",
            "–Ω–æ—Ä–º"
        ]
        return random.choice(reactions)

    elif msg_type == 'statement':
        statements = [
            "–∫–æ—Ä–æ—á–µ —è –∑–∞–µ–±–∞–ª—Å—è", "–≤—Å–µ —Ö—É–π–Ω—è, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π",
            "—è –µ–±–∞–ª —ç—Ç—É –∂–∏–∑–Ω—å", "–∑–∞–µ–±–∏—Å—å –∂–∏–≤–µ–º", "–Ω—É –∏ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞—Å—Ç–∞–ª–∏",
            "—Ä–∞–Ω—å—à–µ –ª—É—á—à–µ –±—ã–ª–æ", "–¥–µ–≥—Ä–∞–¥–∏—Ä—É–µ–º –ø–æ—Ç–∏—Ö–æ–Ω—å–∫—É",
            "—ç–≤–æ–ª—é—Ü–∏—è –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É"
        ]
        return random.choice(statements)

    return random.choice(DVACH_STARTERS)

async def motivation_broadcaster():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑ –≤ 2-4 —á–∞—Å–∞"""
    await asyncio.sleep(9)  # –ñ–¥—ë–º 9 —Å–µ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞

    while True:
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 2 –¥–æ 4 —á–∞—Å–æ–≤
            delay = random.randint(7200, 14400)  # 2-4 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            await asyncio.sleep(delay)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if not state['users_data']['active']:
                print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                continue

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            motivation = random.choice(MOTIVATIONAL_MESSAGES)
            invite_text = random.choice(INVITE_TEXTS)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            now = datetime.now(MSK)
            date_str = now.strftime("%d/%m/%y")
            weekday = WEEKDAYS[now.weekday()]
            time_str = now.strftime("%H:%M:%S")
            header = f"<i>### –ê–î–ú–ò–ù ### {date_str} ({weekday}) {time_str}</i>"
            state['post_counter'] += 1
            post_num = state['post_counter']

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
            message_text = (
                f"üí≠ {motivation}\n\n"
                f"–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω—á–∏–∫–∞–º:\n"
                f"<code>{escape_html(invite_text)}</code>"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
            content = {
                'type': 'text',
                'header': header,
                'text': message_text
            }

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipients = state['users_data']['active'] - state['users_data']['banned']

            if not recipients:
                print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–∫–∏
            await message_queue.put({
                'recipients': recipients,
                'content': content,
                'post_num': post_num,
                'reply_info': None
            })

            print(f"‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{post_num} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ motivation_broadcaster: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def check_cooldown(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global last_mode_activation

    if last_mode_activation is None:
        return True

    elapsed = (datetime.now(UTC) - last_mode_activation).total_seconds()
    if elapsed < MODE_COOLDOWN:
        time_left = MODE_COOLDOWN - elapsed
        minutes = int(time_left // 60)
        seconds = int(time_left % 60)

        try:
            await message.answer(
                f"‚è≥ –≠–π –ø–∏–¥–æ—Ä, –Ω–µ —Å–ø–µ—à–∏! –†–µ–∂–∏–º—ã –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å.\n"
                f"–ñ–¥–∏ –µ—â–µ: {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥\n\n"
                f"–ê –ø–æ–∫–∞ –ø–æ—Å–∏–¥–∏ –≤ —É–≥–ª—É –∏ –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞: {e}")

        await message.delete()
        return False

    return True

# ========== –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    if user_id not in state['users_data']['active']:
        state['users_data']['active'].add(user_id)
        print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ /start: ID {user_id}")
        logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ /start: ID {user_id}")

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–ì–ê–ß!\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "- –ë–µ–∑ CP\n"
        "- –ù–µ —Å–ø–∞–º–∏—Ç—å\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ. –í—Å–µ–º –æ—Ç –≤—Å–µ—Ö."
        "–ö–æ–º–∞–Ω–¥—ã: \n /roll —Ä–æ–ª–ª \n /stats —Å—Ç–∞—Ç–∞ \n /face –ª–∏—Ü–æ \n / \n /help –ø–æ–º–æ—â—å \n /invite –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å \n /zaputin –∫—Ä–µ–º–ª–µ–±–æ—Ç —Ä–µ–∂–∏–º \n /slavaukraine —Ö–æ—Ö–æ–ª —Ä–µ–∂–∏–º \n /suka_blyat –∑–ª–æ–π —Ä–µ–∂–∏–º \n /anime –∞–Ω–∏–º–µ —Ä–µ–∂–∏–º")
    await message.delete()


AHE_EYES = ['üòµ', 'ü§§', 'üò´', 'üò©', 'üò≥', 'üòñ', 'ü•µ']
AHE_TONGUE = ['üëÖ', 'üí¶', 'üòõ', 'ü§™', 'üòù']
AHE_EXTRA = ['üíï', 'üíó', '‚ú®', 'ü•¥', '']


@dp.message(Command("face"))
async def cmd_face(message: types.Message):
    face = (secrets.choice(AHE_EYES) + secrets.choice(AHE_TONGUE) +
            secrets.choice(AHE_EXTRA))

    # –ü—É–±–ª–∏–∫—É–µ–º –≤—Å–µ–º –≤–º–µ—Å—Ç–æ –ª–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    header, pnum = format_header()
    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": face
        },
        "post_num": pnum,
    })

    await message.delete()


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(HELP_TEXT)
    await message.delete()


@dp.message(Command("roll"))
async def cmd_roll(message: types.Message):
    result = random.randint(1, 100)

    header, pnum = format_header()
    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": f"üé≤ –ù–∞—Ä–æ–ª–ª–∏–ª: {result}"
        },
        "post_num": pnum,
    })

    await message.delete()

@dp.message(Command("slavaukraine"))
async def cmd_slavaukraine(message: types.Message):
    global slavaukraine_mode, last_mode_activation, zaputin_mode, suka_blyat_mode

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if not await check_cooldown(message):
        return

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö
    slavaukraine_mode = True
    last_mode_activation = datetime.now(UTC)
    zaputin_mode = False
    suka_blyat_mode = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    header, pnum = format_header()
    header = "### –ê–¥–º–∏–Ω ###"

    # –ë–æ–ª–µ–µ –¥–≤–∞—á–µ–≤—ã–π —Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    activation_text = (
        "–£–í–ê–ì–ê! –ê–ö–¢–ò–í–û–í–ê–ù–û –£–ö–†–ê–á–ù–°–¨–ö–ò–ô –†–ï–ñ–ò–ú!\n\n"
        "üíôüíõ –°–õ–ê–í–ê –£–ö–†–ê–á–ù–Ü! üíõüíô\n"
        "–ì–ï–†–û–Ø–ú –°–õ–ê–í–ê!\n\n"
        "–•—Ç–æ –Ω–µ —Å–∫–∞–∂–µ '–ü—É—Ç—ñ–Ω —Ö—É–π–ª–æ' - —Ç–æ–π –º–æ—Å–∫–∞–ª—å —ñ –ø—ñ–¥–∞—Ä!"
    )

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": activation_text
        },
        "post_num": pnum,
    })

    # –¢–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    asyncio.create_task(disable_slavaukraine_mode(300))  # 5 –º–∏–Ω—É—Ç

    await message.delete()

async def disable_slavaukraine_mode(delay: int):
    await asyncio.sleep(delay)
    global slavaukraine_mode
    slavaukraine_mode = False

    header, pnum = format_header()
    header = "### –ê–¥–º–∏–Ω ###"

    end_text = (
        "üíÄ –í–∏–∑–≥ —Ö–æ—Ö–ª–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω!\n\n"
        "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ç—Ä—ë–ø—É."
    )

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": end_text
        },
        "post_num": pnum,
    })

async def reset_violations_after_hour(user_id: int):
    await asyncio.sleep(3600)
    if user_id in spam_violations:
        spam_violations[user_id]['level'] = 0

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é–±—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    global zaputin_mode, suka_blyat_mode, slavaukraine_mode

    if not is_admin(message.from_user.id):
        await message.delete()
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã
    zaputin_mode = False
    suka_blyat_mode = False
    slavaukraine_mode = False

    await message.answer("–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    await message.delete()

@dp.message(Command("invite"))
async def cmd_invite(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–Ω–æ–Ω–æ–≤"""
    invite_text = random.choice(INVITE_TEXTS)

    await message.answer(
        f"üì® <b>–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–Ω–æ–Ω–æ–≤:</b>\n\n"
        f"<code>{invite_text}</code>\n\n"
        f"<i>–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å</i>",
        parse_mode="HTML")


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    total_users = len(state['users_data']['active'])
    total_posts = state['post_counter']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–ì–ê–ß–ê:\n\n"
                  f"üë• –ê–Ω–æ–Ω–∏–º–æ–≤: {total_users}\n"
                  f"üì® –ü–æ—Å—Ç–æ–≤ –Ω–∞ –±–æ—Ä–¥–µ: {total_posts}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
    header, pnum = format_header()
    await message_queue.put({
        'recipients': state['users_data']['active'],
        'content': {
            'type': 'text',
            'header': header,
            'text': stats_text
        },
        'post_num': pnum
    })

    await message.delete()

@dp.message(Command("shadowmute"))
async def cmd_shadowmute(message: Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        await message.delete()
        return

    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è target_id
    target_id = None
    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)
    
    if not target_id and command.args:
        try:
            # –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ ID
            target_id = int(command.args.split()[0])
        except ValueError:
            pass

    if not target_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.delete()
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º—É—Ç–∞
    duration_str = "24h"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–∫ –≤—Ä–µ–º—è
    if command.args:
        args = command.args.split()
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–ø–ª–∞–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ –≤—Ä–µ–º—è
        if message.reply_to_message and len(args) >= 1:
            duration_str = args[0]
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–ø–ª–∞—è, –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ –≤—Ä–µ–º—è
        elif not message.reply_to_message and len(args) >= 2:
            duration_str = args[1]

    try:
        # –ü–∞—Ä—Å–∏–º duration_str
        duration_str = duration_str.lower().replace(" ", "")
        
        if duration_str.endswith("m"):  # –º–∏–Ω—É—Ç—ã
            minutes = int(duration_str[:-1])
            total_seconds = minutes * 60
        elif duration_str.endswith("h"):  # —á–∞—Å—ã
            hours = int(duration_str[:-1])
            total_seconds = hours * 3600
        elif duration_str.endswith("d"):  # –¥–Ω–∏
            days = int(duration_str[:-1])
            total_seconds = days * 86400
        else:  # –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –º–∏–Ω—É—Ç—ã
            total_seconds = int(duration_str) * 60
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ (30 –¥–Ω–µ–π)
        total_seconds = min(total_seconds, 2592000)
        shadow_mutes[target_id] = datetime.now(UTC) + timedelta(seconds=total_seconds)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if total_seconds < 60:
            time_str = f"{total_seconds} —Å–µ–∫"
        elif total_seconds < 3600:
            time_str = f"{total_seconds // 60} –º–∏–Ω"
        elif total_seconds < 86400:
            hours = total_seconds // 3600
            time_str = f"{hours} —á–∞—Å"
        else:
            days = total_seconds // 86400
            time_str = f"{days} –¥–Ω–µ–π"

        await message.answer(
            f"üëª –¢–∏—Ö–æ –∑–∞–º—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞ {time_str}",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "30m - 30 –º–∏–Ω—É—Ç\n"
            "2h - 2 —á–∞—Å–∞\n"
            "1d - 1 –¥–µ–Ω—å"
        )
    
    await message.delete()


@dp.message(Command("unshadowmute"))
async def cmd_unshadowmute(message: Message):
    """–°–Ω—è—Ç–∏–µ —Ç–∏—Ö–æ–≥–æ –º—É—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.delete()
        return

    # –ü–æ–ª—É—á–∞–µ–º target_id: –ª–∏–±–æ –∏–∑ —Ä–µ–ø–ª–∞—è, –ª–∏–±–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    target_id = None

    # 1. –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ—Ä–µ–º ID –∞–≤—Ç–æ—Ä–∞
    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)

    # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–∑ —Ä–µ–ø–ª–∞—è, –ø—Ä–æ–±—É–µ–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not target_id:
        parts = message.text.split()
        if len(parts) >= 2:
            try:
                target_id = int(parts[1])
            except ValueError:
                pass

    if not target_id:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unshadowmute <user_id> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await message.delete()
        return

    if target_id in shadow_mutes:
        del shadow_mutes[target_id]
        await message.answer(f"üëª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–∏—Ö–æ —Ä–∞–∑–º—É—á–µ–Ω")
    else:
        await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –≤ shadow-–º—É—Ç–µ")
    
    await message.delete()


@dp.message(Command("anime"))
async def cmd_anime(message: types.Message):
    global anime_mode, last_mode_activation, zaputin_mode, slavaukraine_mode, suka_blyat_mode

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if not await check_cooldown(message):
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∏ –≤—ã–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ
    anime_mode = True
    zaputin_mode = False
    slavaukraine_mode = False
    suka_blyat_mode = False
    last_mode_activation = datetime.now(UTC)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    header = "### ÁÆ°ÁêÜËÄÖ ###"
    state['post_counter'] += 1
    pnum = state['post_counter']

    activation_text = (
        "„Å´„ÇÉ„ÅÇÔΩûÔºÅ„Ç¢„Éã„É°„É¢„Éº„Éâ„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà„Åï„Çå„Åæ„Åó„ÅüÔºÅ\n\n"
        "^_^"
    )

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": activation_text
        },
        "post_num": pnum,
    })

    # –¢–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    asyncio.create_task(disable_anime_mode(300))  # 5 –º–∏–Ω—É—Ç

    await message.delete()

async def disable_anime_mode(delay: int):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º anime —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    await asyncio.sleep(delay)
    global anime_mode
    anime_mode = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏
    header = "### –ê–¥–º–∏–Ω ###"
    state['post_counter'] += 1
    pnum = state['post_counter']

    end_text = (
        "„Ç¢„Éã„É°„É¢„Éº„Éâ„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n\n"
        "ÈÄöÂ∏∏„ÅÆ„ÉÅ„É£„ÉÉ„Éà„Å´Êàª„Çä„Åæ„ÅôÔºÅ"
    )

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": end_text
        },
        "post_num": pnum,
    })


@dp.message(Command("deanon"))
async def cmd_deanon(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deanon"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∞!")
        await message.delete()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –¥–µ–∞–Ω–æ–Ω–∞
    reply_key = (message.from_user.id, message.reply_to_message.message_id)
    target_post = message_to_post.get(reply_key)

    if not target_post or target_post not in messages_storage:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∞!")
        await message.delete()
        return

    target_id = messages_storage[target_post].get("author_id")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    name, surname, city, profession, fetish, detail = generate_deanon_info()
    ip = f"{random.randint(10,250)}.{random.randint(0,255)}.{random.randint(0,255)}.{random.randint(0,255)}"
    age = random.randint(18, 45)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–µ–∞–Ω–æ–Ω–∞
    deanon_text = (
        f"\n–≠—Ç–æ–≥–æ –∞–Ω–æ–Ω–∞ –∑–æ–≤—É—Ç: {name} {surname}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {city}\n"
        f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
        f"–§–µ—Ç–∏—à: {fetish}\n"
        f"IP-–∞–¥—Ä–µ—Å: {ip}\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º: {detail}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    header = "### –î–ï–ê–ù–û–ù ###"
    state['post_counter'] += 1
    pnum = state['post_counter']

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": deanon_text,
            "reply_to_post": target_post
        },
        "post_num": pnum,
        "reply_info": post_to_messages.get(target_post, {})
    })

    await message.delete()
    
# ====== ZAPUTIN ======
@dp.message(Command("zaputin"))
async def cmd_zaputin(message: types.Message):
    global zaputin_mode, last_mode_activation, suka_blyat_mode, slavaukraine_mode

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if not await check_cooldown(message):
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∏ –≤—ã–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ
    zaputin_mode = True
    suka_blyat_mode = False
    slavaukraine_mode = False
    last_mode_activation = datetime.now(UTC)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    header = "### –ê–¥–º–∏–Ω ###"
    state['post_counter'] += 1
    pnum = state['post_counter']

    activation_text = (
        "üá∑üá∫ –°–õ–ê–í–ê –†–û–°–°–ò–ò! –ü–£–¢–ò–ù - –ù–ê–® –ü–†–ï–ó–ò–î–ï–ù–¢! üá∑üá∫\n\n"
        "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∫—Ä–µ–º–ª–µ–±–æ—Ç–æ–≤! –í—Å–µ –Ω–µ—Å–æ–≥–ª–∞—Å–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ä–∞–≤–Ω–µ–Ω—ã –∫ –ø–∏–¥–æ—Ä–∞—Å–∞–º –∏ —É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç–∞–º!"
    )

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": activation_text
        },
        "post_num": pnum,
    })

    # –¢–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    asyncio.create_task(disable_zaputin_mode(300))  # 5 –º–∏–Ω—É—Ç

    await message.delete()

async def disable_zaputin_mode(delay: int):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º zaputin —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    await asyncio.sleep(delay)
    global zaputin_mode
    zaputin_mode = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏
    header = "### –ê–¥–º–∏–Ω ###"
    state['post_counter'] += 1
    pnum = state['post_counter']

    end_text = "üíÄ –ë—É–Ω—Ç –∫—Ä–µ–º–ª–µ–±–æ—Ç–æ–≤ –æ–∫–æ–Ω—á–∏–ª—Å—è. –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ, –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã."

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": end_text
        },
        "post_num": pnum,
    })

# ====== SUKA_BLYAT ======
@dp.message(Command("suka_blyat"))
async def cmd_suka_blyat(message: types.Message):
    global suka_blyat_mode, last_mode_activation, zaputin_mode, slavaukraine_mode

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if not await check_cooldown(message):
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∏ –≤—ã–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ
    suka_blyat_mode = True
    zaputin_mode = False
    slavaukraine_mode = False
    last_mode_activation = datetime.now(UTC)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    header = "### –ê–¥–º–∏–Ω ###"
    state['post_counter'] += 1
    pnum = state['post_counter']

    activation_text = (
        "üí¢üí¢üí¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –°–£–ö–ê –ë–õ–Ø–¢–¨! üí¢üí¢üí¢\n\n"
        "–í—Å–µ—Ö –Ω–∞—Ö—É–π —Ä–∞–∑—ä–µ–±–∞–ª–æ!"
    )

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": activation_text
        },
        "post_num": pnum,
    })

    # –¢–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    asyncio.create_task(disable_suka_blyat_mode(300))  # 5 –º–∏–Ω—É—Ç

    await message.delete()

async def disable_suka_blyat_mode(delay: int):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º suka_blyat —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    await asyncio.sleep(delay)
    global suka_blyat_mode
    suka_blyat_mode = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏
    header = "### –ê–¥–º–∏–Ω ###"
    state['post_counter'] += 1
    pnum = state['post_counter']

    end_text = "üíÄ –°–£–ö–ê –ë–õ–Ø–¢–¨ –ö–û–ù–ß–ò–õ–û–°–¨. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –ø–æ–º–æ–ª—á–∞—Ç—å."

    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": end_text
        },
        "post_num": pnum,
    })

# ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========


@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.delete()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="banned")
        ],
        [
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save"),
            InlineKeyboardButton(text="üë• –¢–æ–ø —Å–ø–∞–º–µ—Ä–æ–≤",
                                 callback_data="spammers")
        ]
    ])

    await message.answer(
        f"–ê–¥–º–∏–Ω–∫–∞:\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/ban /mute /del /wipe /unban /unmute\n",
        reply_markup=keyboard)
    await message.delete()


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====================================
def get_author_id_by_reply(msg: types.Message) -> int | None:
    """–ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ –ø–æ reply"""
    if not msg.reply_to_message:
        return None

    reply_mid = msg.reply_to_message.message_id
    for (uid, mid), pnum in message_to_post.items():
        if mid == reply_mid:
            return messages_storage.get(pnum, {}).get("author_id")
    return None

# ===== /id ==========================================================
@dp.message(Command("id"))
async def cmd_get_id(message: types.Message):
    """ /id ‚Äî –≤—ã–≤–µ—Å—Ç–∏ ID –∏ –∏–Ω—Ñ—É –∞–≤—Ç–æ—Ä–∞ —Ä–µ–ø–ª–∞–π-–ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–≤–æ—é, –µ—Å–ª–∏ –±–µ–∑ reply """
    if message.reply_to_message:
        author_id = get_author_id_by_reply(message)
        if author_id:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
                author = await bot.get_chat(author_id)

                info = "üÜî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ:</b>\n\n"
                info += f"ID: <code>{author_id}</code>\n"
                info += f"–ò–º—è: {author.first_name}\n"

                if author.last_name:
                    info += f"–§–∞–º–∏–ª–∏—è: {author.last_name}\n"

                if author.username:
                    info += f"Username: @{author.username}\n"

                # –°—Ç–∞—Ç—É—Å
                if author_id in state['users_data']['banned']:
                    info += "\n‚õîÔ∏è –°—Ç–∞—Ç—É—Å: –ó–ê–ë–ê–ù–ï–ù"
                elif author_id in state['users_data']['active']:
                    info += "\n‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"

                await message.answer(info, parse_mode="HTML")
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID
                await message.answer(f"ID –∞–≤—Ç–æ—Ä–∞: <code>{author_id}</code>",
                                     parse_mode="HTML")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞.")
    await message.delete()


# ===== /ban =========================================================
@dp.message(Command("ban"))
async def cmd_ban(message: types.Message):
    """
    /ban  ‚Äì reply-–±–∞–Ω –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    /ban <id> ‚Äì –±–∞–Ω –ø–æ ID
    """
    if not is_admin(message.from_user.id):
        return

    target_id: int | None = None

    # 1) reply-–±–∞–Ω
    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)

    # 2) /ban <id>
    parts = message.text.split()
    if len(parts) == 2 and parts[1].isdigit():
        target_id = int(parts[1])

    if not target_id:
        await message.answer(
            "–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å ID: /ban <id>")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç (–±—ã–ª–æ 60)
    deleted_posts = await delete_user_posts(target_id, 5)

    state['users_data']['banned'].add(target_id)
    state['users_data']['active'].discard(target_id)

    await message.answer(
        f"‚úÖ –•—É–µ—Å–æ—Å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{target_id}</code> –∑–∞–±–∞–Ω–µ–Ω\n"
        f"–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {deleted_posts}",
        parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    await send_moderation_notice(target_id, "ban", None, deleted_posts)

    # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å
    try:
        await bot.send_message(
            target_id,
            f"–ü–∏–¥–æ—Ä–∞—Å –µ–±–∞–Ω—ã–π, —Ç—ã –Ω–∞—Å —Ç–∞–∫ –∑–∞–µ–±–∞–ª, —á—Ç–æ —Ç–µ–±—è –±–ª–æ–∫–Ω—É–ª–∏ –Ω–∞—Ö—É–π.\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {deleted_posts}\n"
            "–ü–∏–∑–¥—É–π –æ—Ç—Å—é–¥–∞."
        )
    except:
        pass

    await message.delete()

# ========== –ö–û–ú–ê–ù–î–ê /MUTE ==========
@dp.message(Command("mute"))
async def cmd_mute(message: Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        await message.delete()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = command.args
    if not args:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ + /mute [–≤—Ä–µ–º—è]\n"
            "–ò–ª–∏: /mute <user_id> [–≤—Ä–µ–º—è]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/mute 123456789 1h - –º—É—Ç –Ω–∞ 1 —á–∞—Å\n"
            "/mute 123456789 30m - –º—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç\n"
            "/mute 123456789 2d - –º—É—Ç –Ω–∞ 2 –¥–Ω—è"
        )
        await message.delete()
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = args.split()
    target_id = None
    duration_str = "24h"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ï—Å–ª–∏ —ç—Ç–æ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_key = (message.from_user.id, message.reply_to_message.message_id)
        post_num = message_to_post.get(reply_key)
        if post_num:
            target_id = messages_storage.get(post_num, {}).get('author_id')

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ID, –±–µ—Ä–µ–º –≤—Ä–µ–º—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if target_id and parts:
            duration_str = parts[0]
    else:
        # –ï—Å–ª–∏ –Ω–µ reply, —Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - ID, –≤—Ç–æ—Ä–æ–π - –≤—Ä–µ–º—è
        if len(parts) >= 1:
            try:
                target_id = int(parts[0])
                if len(parts) >= 2:
                    duration_str = parts[1]
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                await message.delete()
                return

    if not target_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.delete()
        return

    # –ü–∞—Ä—Å–∏–º duration_str –≤ timedelta
    try:
        duration_str = duration_str.lower().replace(" ", "")

        if duration_str.endswith("m"):  # –º–∏–Ω—É—Ç—ã
            mute_seconds = int(duration_str[:-1]) * 60
            duration_text = f"{int(duration_str[:-1])} –º–∏–Ω—É—Ç"
        elif duration_str.endswith("h"):  # —á–∞—Å—ã
            mute_seconds = int(duration_str[:-1]) * 3600
            duration_text = f"{int(duration_str[:-1])} —á–∞—Å–æ–≤"
        elif duration_str.endswith("d"):  # –¥–Ω–∏
            mute_seconds = int(duration_str[:-1]) * 86400
            duration_text = f"{int(duration_str[:-1])} –¥–Ω–µ–π"
        else:  # –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –º–∏–Ω—É—Ç—ã
            mute_seconds = int(duration_str) * 60
            duration_text = f"{int(duration_str)} –º–∏–Ω—É—Ç"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ (30 –¥–Ω–µ–π)
        mute_seconds = min(mute_seconds, 2592000)
        mute_duration = timedelta(seconds=mute_seconds)

    except (ValueError, AttributeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "30m - 30 –º–∏–Ω—É—Ç\n"
            "2h - 2 —á–∞—Å–∞\n"
            "1d - 1 –¥–µ–Ω—å"
        )
        await message.delete()
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    deleted_count = await delete_user_posts(target_id, 5)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç
    mutes[target_id] = datetime.now(UTC) + mute_duration

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"üîá –•—É–∏–ª–∞ {target_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_text}\n"
        f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_count}",
        parse_mode="HTML"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    header, post_num = format_header()
    header = header.replace("–ü–æ—Å—Ç", "### –ê–î–ú–ò–ù ###")
    mute_text = (
        f"üö® –ü–∏–¥–æ—Ä–∞—Å–∞ —Å–ø–∞–º–µ—Ä–∞ –∑–∞–º—É—Ç–∏–ª–æ –Ω–∞—Ö—É–π –Ω–∞ {duration_text}\n"
        f"–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_count}\n"
        f"–≠—Ç–æ—Ç –ø–∏–¥–æ—Ä –≤—Å–µ—Ö —É–∂–µ –¥–æ–µ–±–∞–ª, –ø—É—Å–∫–∞–π –ø–æ–ø—É—Å—Ç–∏—Ç—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—ë—Ç."
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[post_num] = {
        'author_id': 0,  # 0 = —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'timestamp': datetime.now(UTC),
        'content': {
            'type': 'text',
            'header': header,
            'text': mute_text
        }
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    await message_queue.put({
        "recipients": state["users_data"]["active"],
        "content": {
            "type": "text",
            "header": header,
            "text": mute_text,
            "is_system_message": True
        },
        "post_num": post_num
    })

    # –õ–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            target_id,
            f"üîá –ü–∏–¥–æ—Ä –µ–±–∞–Ω—ã–π —Ö–æ—Ä–æ—à —Å–ø–∞–º–∏—Ç—å —Ç—ã –º–µ–Ω—è —É–∂–µ –¥–æ–µ–±–∞–ª, –ø–æ—Å—Å–∞–ª —Ç–µ–±–µ –Ω–∞ —Ä—ã–ª–æ –µ–±–∞–Ω–æ–µ –ø–æ—Å–∏–¥–∏ –≤ –º—É—Ç–µ –µ—â–µ {duration_text}.\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_count}\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å. –°–æ—Å–∏—Ç–µ —Ö—É–π, –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—É—Ç–µ: {e}")

    await message.delete()


@dp.message(Command("wipe"))
async def cmd_wipe(message: types.Message):
    """
    –£–¥–∞–ª–∏—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
       reply + /wipe        ‚Äì –∞–≤—Ç–æ—Ä —Ä–µ–ø–ª–∞—è
       /wipe <id>           ‚Äì –ø–æ ID
    """
    global message_to_post  # –î–û–õ–ñ–ù–û –ë–´–¢–¨ –í –°–ê–ú–û–ú –ù–ê–ß–ê–õ–ï –§–£–ù–ö–¶–ò–ò!
    if not is_admin(message.from_user.id):
        return

    target_id = None
    if message.reply_to_message:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        reply_key = (message.from_user.id, message.reply_to_message.message_id)
        post_num = message_to_post.get(reply_key)
        if post_num:
            target_id = messages_storage.get(post_num, {}).get('author_id')
    else:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = int(parts[1])

    if not target_id:
        await message.answer("reply + /wipe  –∏–ª–∏  /wipe <id>")
        return

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    posts_to_delete = [
        pnum for pnum, info in messages_storage.items()
        if info.get("author_id") == target_id
    ]

    deleted = 0
    for pnum in posts_to_delete:
        # –£–¥–∞–ª—è–µ–º —É –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        for uid, mid in post_to_messages.get(pnum, {}).items():
            try:
                await bot.delete_message(uid, mid)
                deleted += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {mid} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

        # –£–¥–∞–ª—è–µ–º —É –∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ author_message_id)
        author_mid = messages_storage[pnum].get("author_message_id")
        if author_mid:
            try:
                await bot.delete_message(target_id, author_mid)
                deleted += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–≤—Ç–æ—Ä–∞ {target_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
        post_to_messages.pop(pnum, None)
        messages_storage.pop(pnum, None)

    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –≤ message_to_post
    message_to_post = {
        k: v for k, v in message_to_post.items() 
        if v not in posts_to_delete
    }

    await message.answer(
        f"üóë –£–¥–∞–ª–µ–Ω–æ {len(posts_to_delete)} –ø–æ—Å—Ç–æ–≤ ({deleted} —Å–æ–æ–±—â–µ–Ω–∏–π) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}"
    )


@dp.message(Command("unmute"))
async def cmd_unmute(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.delete()
        return
    target_id = None
    if message.reply_to_message:
        target_id = message.reply_to_message.from_user.id
    else:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = int(parts[1])
    if not target_id:
        await message.answer("–ù—É–∂–Ω–æ reply –∏–ª–∏ /unmute <id>")
        return
    mutes.pop(target_id, None)
    await message.answer(f"üîà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω")
    try:
        await bot.send_message(
            target_id, "–≠–π —Ö—É–π–ª–æ –µ–±–∞–Ω–æ–µ, —Ç–µ–±—è —Ä–∞–∑–º—É—Ç–∏–ª–∏, –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.")
    except:
        pass



@dp.message(Command("unban"))
async def cmd_unban(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.delete()
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        await message.delete()
        return

    try:
        user_id = int(args[1])
        state['users_data']['banned'].discard(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    await message.delete()


@dp.message(Command("del"))
async def cmd_del(message: types.Message):
    global message_to_post
    if not is_admin(message.from_user.id):
        return

    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
        return

    # 1. –ò—â–µ–º post_num –ø–æ message_id
    target_mid = message.reply_to_message.message_id
    post_num = None
    for (uid, mid), pnum in message_to_post.items():
        if mid == target_mid:
            post_num = pnum
            break

    if post_num is None:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑–µ")
        return

    # 2. –£–¥–∞–ª—è–µ–º —É –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    deleted = 0
    if post_num in post_to_messages:
        for uid, mid in post_to_messages[post_num].items():
            try:
                await bot.delete_message(uid, mid)
                deleted += 1
            except:
                pass

    # 3. –£–¥–∞–ª—è–µ–º —É –∞–≤—Ç–æ—Ä–∞
    author_mid = messages_storage.get(post_num, {}).get('author_message_id')
    author_id = messages_storage.get(post_num, {}).get('author_id')
    if author_mid and author_id:
        try:
            await bot.delete_message(author_id, author_mid)
            deleted += 1
        except:
            pass

    # 4. –ß–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä–∏
    post_to_messages.pop(post_num, None)
    messages_storage.pop(post_num, None)
    
    # 5. –ß–∏—Å—Ç–∏–º message_to_post
    message_to_post = {k: v for k, v in message_to_post.items() if v != post_num}

    await message.answer(f"–ü–æ—Å—Ç ‚Ññ{post_num} —É–¥–∞–ª—ë–Ω —É {deleted} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# ========== CALLBACK HANDLERS ==========

@dp.callback_query(F.data == "save")
async def admin_save(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    await save_state()
    await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

@dp.callback_query(F.data == "stats")
async def admin_stats(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    await callback.message.answer(
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(state['users_data']['active'])}\n"
        f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {len(state['users_data']['banned'])}\n"
        f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {state['post_counter']}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏: {len(messages_storage)}\n"
        f"–í –æ—á–µ—Ä–µ–¥–∏: {message_queue.qsize()}")
    await callback.answer()

@dp.callback_query(F.data == "spammers")
async def admin_spammers(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_users = sorted(state['message_counter'].items(),
                          key=lambda x: x[1],
                          reverse=True)[:10]

    text = "–¢–æ–ø 10 —Å–ø–∞–º–µ—Ä–æ–≤:\n\n"
    for user_id, count in sorted_users:
        text += f"ID {user_id}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await callback.message.answer(text)
    await callback.answer()


@dp.callback_query(F.data == "banned")
async def admin_banned(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    if not state['users_data']['banned']:
        await callback.answer("–ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    text = "–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id in state['users_data']['banned']:
        text += f"ID {user_id}\n"

    await callback.message.answer(text)
    await callback.answer()


async def memory_cleaner():
    """–†–∞–∑ –≤ —á–∞—Å —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏"""
    while True:
        await asyncio.sleep(3600)  # –∫–∞–∂–¥—ã–π —á–∞—Å

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –ø–æ—Å—Ç–æ–≤
        if len(messages_storage) > 0:
            recent_posts = set(sorted(messages_storage.keys())[-500:])

            # –ß–∏—Å—Ç–∏–º message_to_post
            to_delete = []
            for (uid, mid), post_num in message_to_post.items():
                if post_num not in recent_posts:
                    to_delete.append((uid, mid))

            for key in to_delete:
                del message_to_post[key]

            print(f"–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª–µ–Ω–æ {len(to_delete)} —Å—Ç–∞—Ä—ã—Ö —Å–≤—è–∑–µ–π")

# ========== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ==========
async def process_complete_media_group(media_group_id: str):
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏!
    if media_group_id in sent_media_groups:
        return
    if media_group_id not in current_media_groups:
        return
    group = current_media_groups[media_group_id]
    if not group['media']:
        del current_media_groups[media_group_id]
        return

    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é (—ç—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –¥—É–±–ª–∏ –Ω–µ —É—à–ª–∏!)
    sent_media_groups.add(media_group_id)
    post_num = group['post_num']
    user_id = group['author_id']
    content = {
        'type': 'media_group',
        'header': group['header'],
        'media': group['media'],
        'caption': group.get('caption'),
        'reply_to_post': group.get('reply_to_post')
    }
    messages_storage[post_num] = {
        'author_id': user_id,
        'timestamp': group['timestamp'],
        'content': content,
        'reply_to': group.get('reply_to_post')
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
    try:
        builder = MediaGroupBuilder()
        reply_to_message_id = None
        if group.get('reply_to_post'):
            reply_map = post_to_messages.get(group['reply_to_post'], {})
            reply_to_message_id = reply_map.get(user_id)
        for idx, media in enumerate(group['media']):
            if not media.get('file_id'):
                continue
            caption = None
            if idx == 0:
                caption = f"<i>{group['header']}</i>"
                if group.get('caption'):
                    caption += f"\n\n{escape_html(group['caption'])}"
            if media['type'] == 'photo':
                builder.add_photo(media=media['file_id'], caption=caption, parse_mode="HTML" if caption else None)
            elif media['type'] == 'video':
                builder.add_video(media=media['file_id'], caption=caption, parse_mode="HTML" if caption else None)
            elif media['type'] == 'document':
                builder.add_document(media=media['file_id'], caption=caption, parse_mode="HTML" if caption else None)
            elif media['type'] == 'audio':
                builder.add_audio(media=media['file_id'], caption=caption, parse_mode="HTML" if caption else None)
        if not builder.build():
            del current_media_groups[media_group_id]
            return
        sent_messages = await bot.send_media_group(
            chat_id=user_id,
            media=builder.build(),
            reply_to_message_id=reply_to_message_id
        )
        if sent_messages:
            messages_storage[post_num]['author_message_id'] = sent_messages[0].message_id
            if post_num not in post_to_messages:
                post_to_messages[post_num] = {}
            post_to_messages[post_num][user_id] = sent_messages[0].message_id
            for msg in sent_messages:
                message_to_post[(user_id, msg.message_id)] = post_num
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–∞ –∞–≤—Ç–æ—Ä—É: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
    recipients = state['users_data']['active'] - {user_id}
    if recipients:
        await message_queue.put({
            'recipients': recipients,
            'content': content,
            'post_num': post_num,
            'reply_info': post_to_messages.get(group['reply_to_post'], {}) if group.get('reply_to_post') else None
        })

    # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
    if media_group_id in current_media_groups:
        del current_media_groups[media_group_id]

@dp.message(F.audio)
async def handle_audio(message: Message):
    await handle_audio_message(message)

@dp.message(F.voice)
async def handle_voice(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    if user_id in state['users_data']['banned']:
        await message.delete()
        return

    if mutes.get(user_id) and mutes[user_id] > datetime.now(UTC):
        await message.delete()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header, current_post_num = format_header()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç?
    reply_to_post = None
    reply_info = {}

    if message.reply_to_message:
        reply_mid = message.reply_to_message.message_id
        reply_to_post = None
        for (uid, mid), pnum in message_to_post.items():
            if mid == reply_mid:
                reply_to_post = pnum
                break
        if reply_to_post and reply_to_post in post_to_messages:
            reply_info = post_to_messages[reply_to_post]
        else:
            reply_to_post = None

    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content = {
        'type': 'voice',
        'header': header,
        'file_id': message.voice.file_id,
        'reply_to_post': reply_to_post
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[current_post_num] = {
        'author_id': user_id,
        'timestamp': datetime.now(MSK),
        'content': content,
        'reply_to': reply_to_post
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞
    if not message.media_group_id:
        reply_to_message_id = reply_info.get(user_id) if reply_info else None

        sent_to_author = await bot.send_voice(
            user_id,
            message.voice.file_id,
            caption=f"<i>{header}</i>",
            reply_to_message_id=reply_to_message_id,
            parse_mode="HTML"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        if sent_to_author:
            messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
            if current_post_num not in post_to_messages:
                post_to_messages[current_post_num] = {}
            post_to_messages[current_post_num][user_id] = sent_to_author.message_id
            message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
    recipients = state['users_data']['active'] - {user_id}
    if recipients:
        await message_queue.put({
            'recipients': recipients,
            'content': content,
            'post_num': current_post_num,
            'reply_info': reply_info if reply_info else None,
            'user_id': user_id
        })

@dp.message(F.media_group_id)
async def handle_media_group_init(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –∏ –º—É—Ç
    if user_id in state['users_data']['banned']:
        await message.delete()
        return
    if mutes.get(user_id) and mutes[user_id] > datetime.now(UTC):
        await message.delete()
        return

    media_group_id = message.media_group_id
    if not media_group_id:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if media_group_id in sent_media_groups:
        await message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_to_message –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    reply_to_post = None
    if message.reply_to_message:
        reply_mid = message.reply_to_message.message_id
        for (uid, mid), pnum in message_to_post.items():
            if mid == reply_mid:
                reply_to_post = pnum
                break
        if reply_to_post and reply_to_post not in messages_storage:
            reply_to_post = None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if media_group_id not in current_media_groups:
        header, post_num = format_header()
        caption = message.caption or ""
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        if slavaukraine_mode and caption:
            caption = ukrainian_transform(caption)
        elif suka_blyat_mode and caption:
            caption = suka_blyatify_text(caption)
        elif anime_mode and caption:
            caption = anime_transform(caption)
        elif zaputin_mode and caption:
            caption = zaputin_transform(caption)

        current_media_groups[media_group_id] = {
            'post_num': post_num,
            'header': header,
            'author_id': user_id,
            'timestamp': datetime.now(MSK),
            'media': [],
            'caption': caption,
            'reply_to_post': reply_to_post,
            'processed_messages': set()
        }

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    group = current_media_groups[media_group_id]
    if message.message_id not in group['processed_messages']:
        media_data = {
            'type': message.content_type,
            'file_id': None,
            'message_id': message.message_id
        }
        if message.photo:
            media_data['file_id'] = message.photo[-1].file_id
        elif message.video:
            media_data['file_id'] = message.video.file_id
        elif message.document:
            media_data['file_id'] = message.document.file_id
        elif message.audio:
            media_data['file_id'] = message.audio.file_id
        if media_data['file_id']:
            group['media'].append(media_data)
            group['processed_messages'].add(message.message_id)

    await message.delete()

    # --- –ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã ---
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
    if media_group_id in media_group_timers:
        media_group_timers[media_group_id].cancel()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5 —Å–µ–∫—É–Ω–¥—ã) –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
    if media_group_id not in sent_media_groups:
        media_group_timers[media_group_id] = asyncio.create_task(
            complete_media_group_after_delay(media_group_id, delay=1.5)
        )

async def complete_media_group_after_delay(media_group_id, delay=1.5):
    try:
        await asyncio.sleep(delay)
        # –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∏ —É–∂–µ —ç—Ç—É –≥—Ä—É–ø–ø—É
        if media_group_id in sent_media_groups:
            return
        await process_complete_media_group(media_group_id)
    except asyncio.CancelledError:
        pass
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if media_group_id in media_group_timers:
            del media_group_timers[media_group_id]
            
@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ shadow-–º—É—Ç–∞ (–î–û–ë–ê–í–õ–ï–ù–û)
    if user_id in shadow_mutes and shadow_mutes[user_id] > datetime.now(UTC):
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except:
            pass

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π" –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º –Ω–æ–º–µ—Ä–æ–º
        header = f"–ü–æ—Å—Ç ‚Ññ{state['post_counter'] + 1}"
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É
        try:
            if message.text:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                text = message.text
                if suka_blyat_mode:
                    text = suka_blyatify_text(text)
                if slavaukraine_mode:
                    text = ukrainian_transform(text)
                if anime_mode:
                    text = anime_transform(text)
                if zaputin_mode:
                    text = zaputin_transform(text)
                    
                await bot.send_message(
                    user_id, 
                    f"<i>{header}</i>\n\n{escape_html(text)}", 
                    parse_mode="HTML"
                )
            
            elif message.photo:
                caption = message.caption or ""
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ –ø–æ–¥–ø–∏—Å–∏
                if suka_blyat_mode and caption:
                    caption = suka_blyatify_text(caption)
                if slavaukraine_mode and caption:
                    caption = ukrainian_transform(caption)
                if anime_mode and caption:
                    caption = anime_transform(caption)
                if zaputin_mode and caption:
                    caption = zaputin_transform(caption)
                    
                full_caption = f"<i>{header}</i>"
                if caption:
                    full_caption += f"\n\n{escape_html(caption)}"
                
                await bot.send_photo(
                    user_id,
                    message.photo[-1].file_id,
                    caption=full_caption,
                    parse_mode="HTML"
                )
            
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–∞–Ω—Ç–æ–º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        # –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return


    
    if not message.text and not message.caption and not message.content_type:
        await message.delete()
        return
        
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    if message.media_group_id:
        return
    try:
        until = mutes.get(user_id)
        if until and until > datetime.now(UTC):
            left = until - datetime.now(UTC)
            minutes = int(left.total_seconds() // 60)
            seconds = int(left.total_seconds() % 60)
            try:
                await message.delete()
                await bot.send_message(
                    user_id, 
                    f"üîá –≠–π –ø–∏–¥–æ—Ä, —Ç—ã –≤ –º—É—Ç–µ –µ—â—ë {minutes}–º {seconds}—Å\n–°–ø–∞–º–∏—à—å –¥–∞–ª—å—à–µ - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω",
                    parse_mode="HTML"
                )
            except:
                pass
            return
        elif until:  # —Å—Ä–æ–∫ –º—É—Ç–∞ –≤—ã—à–µ–ª
            mutes.pop(user_id, None)

        # 1. –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ active
        if user_id not in state['users_data']['active']:
            state['users_data']['active'].add(user_id)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}")

        # 2. –±–∞–Ω
        if user_id in state['users_data']['banned']:
            await message.delete()
            await message.answer("‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω", show_alert=True)
            return

        # 3. —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        get_user_msgs_deque(user_id).append(message)

        # 4. —Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º           
        spam_check = await check_spam(user_id, message)
        if not spam_check:
            await message.delete()
            msg_type = message.content_type
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∞–º
            if message.content_type in ['photo', 'video', 'document'] and message.caption:
                msg_type = 'text'

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
            await apply_penalty(user_id, msg_type)
            return

        # 5. –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
        recipients = state['users_data']['active'] - {user_id}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç?
        reply_to_post = None
        reply_info = {}

        if message.reply_to_message:
            reply_mid = message.reply_to_message.message_id
            reply_to_post = None
            for (uid, mid), pnum in message_to_post.items():
                if mid == reply_mid:
                    reply_to_post = pnum
                    break

            if reply_to_post and reply_to_post in post_to_messages:
                reply_info = post_to_messages[reply_to_post]
            else:
                reply_to_post = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –≤ post_to_messages

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header, current_post_num = format_header()

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
        if message.text:
            daily_log.write(
                f"[{datetime.now(timezone.utc).isoformat()}] {message.text}\n"
            )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = message.content_type

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except:
            pass

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = {
            'type': content_type,
            'header': header,  # –ó–¥–µ—Å—å header –±–µ–∑ —Ç–µ–≥–æ–≤
            'reply_to_post': reply_to_post
        }

        if content_type == 'text':
            if message.entities:
                text_content = message.html_text
            else:
                text_content = escape_html(message.text)
        
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∂–∏–º—ã)
            if suka_blyat_mode:
                text_content = suka_blyatify_text(text_content)
            if slavaukraine_mode:
                text_content = ukrainian_transform(text_content)
            if anime_mode:
                text_content = anime_transform(text_content)
            if zaputin_mode:
                text_content = zaputin_transform(text_content)
        
            if anime_mode and random.random() < 0.41:
                full_caption = f"<i>{header}</i>\n\n{text_content}"
                if len(full_caption) <= 1024:
                    anime_img_url = await get_random_anime_image()
                    if anime_img_url:
                        content['type'] = 'photo'
                        content['caption'] = text_content
                        content['image_url'] = anime_img_url
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
                        content['type'] = 'text'
                        content['text'] = text_content
                else:
                    content['type'] = 'text'
                    content['text'] = text_content
            else:
                content['type'] = 'text'
                content['text'] = text_content

        elif content_type == 'photo':
            content['file_id'] = message.photo[-1].file_id
            caption = message.caption

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ –ø–æ–¥–ø–∏—Å–∏
            if caption:
                if suka_blyat_mode:
                    caption = suka_blyatify_text(caption)
                if slavaukraine_mode:
                    caption = ukrainian_transform(caption)
                if anime_mode:
                    caption = anime_transform(caption)
                if zaputin_mode:
                    caption = zaputin_transform(caption)   
                
            content['caption'] = caption

        elif content_type == 'video':
            content['file_id'] = message.video.file_id
            caption = message.caption

            if caption:
                if suka_blyat_mode:
                    caption = suka_blyatify_text(caption)
                if slavaukraine_mode:
                    caption = ukrainian_transform(caption)
                if anime_mode:
                    caption = anime_transform(caption)
                if zaputin_mode:
                    caption = zaputin_transform(caption)   

            content['caption'] = caption

        elif content_type == 'animation':
            content['file_id'] = message.animation.file_id
            caption = message.caption

            if caption:
                if suka_blyat_mode:
                    caption = suka_blyatify_text(caption)
                if slavaukraine_mode:
                    caption = ukrainian_transform(caption)
                if anime_mode:
                    caption = anime_transform(caption)
                if zaputin_mode:
                    caption = zaputin_transform(caption)                       

            content['caption'] = caption

        elif content_type == 'document':
            content['file_id'] = message.document.file_id
            caption = message.caption

            if caption:
                if suka_blyat_mode:
                    caption = suka_blyatify_text(caption)
                if slavaukraine_mode:
                    caption = ukrainian_transform(caption)
                if anime_mode:
                    caption = anime_transform(caption)
                if zaputin_mode:
                    caption = zaputin_transform(caption)   
            
            content['caption'] = caption

        elif content_type == 'sticker':
            content['file_id'] = message.sticker.file_id 

        elif content_type == 'audio':
            content['file_id'] = message.audio.file_id
            caption = message.caption

            if caption:
                if suka_blyat_mode:
                    caption = suka_blyatify_text(caption)
                if slavaukraine_mode:
                    caption = ukrainian_transform(caption)
                if anime_mode:
                    caption = anime_transform(caption)
                if zaputin_mode:
                    caption = zaputin_transform(caption)                 
            
            content['caption'] = caption

        elif content_type == 'video_note':
            content['file_id'] = message.video_note.file_id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        messages_storage[current_post_num] = {
            'author_id': user_id,
            'timestamp': datetime.now(UTC),
            'content': content,
            'reply_to': reply_to_post,
            'author_message_id': None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
        reply_to_message_id = reply_info.get(user_id) if reply_info else None
        sent_to_author = None

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∞ (–±–µ–∑ (You))
        header_text = f"<i>{header}</i>"
        reply_text = ""
        if reply_to_post:
            reply_text = f">>{reply_to_post}\n"

        try:
            if content_type == 'text':
                full_text = f"{header_text}\n\n{reply_text}{content['text']}" if reply_text else f"{header_text}\n\n{content['text']}"
                sent_to_author = await bot.send_message(
                    user_id,
                    full_text,
                    reply_to_message_id=reply_to_message_id,
                    parse_mode="HTML"
                )
            elif content_type in ['photo', 'video', 'animation', 'document', 'audio']:
                caption = header_text
                if content.get('caption'):
                    caption += f"\n\n{escape_html(content['caption'])}"
                if reply_to_post:
                    caption = f"{header_text}\n\n{reply_text}{escape_html(content['caption']) if content.get('caption') else ''}"

                if content_type == 'photo':
                    sent_to_author = await bot.send_photo(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
                elif content_type == 'video':
                    sent_to_author = await bot.send_video(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
                elif content_type == 'animation':
                    sent_to_author = await bot.send_animation(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
                elif content_type == 'document':
                    sent_to_author = await bot.send_document(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
                elif content_type == 'audio':
                    sent_to_author = await bot.send_audio(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
            elif content_type == 'sticker':
                sent_to_author = await bot.send_sticker(
                    user_id,
                    content['file_id'],
                    reply_to_message_id=reply_to_message_id
                )
            elif content_type == 'video_note':
                sent_to_author = await bot.send_video_note(
                    user_id,
                    content['file_id'],
                    reply_to_message_id=reply_to_message_id
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            if sent_to_author:
                messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
                if current_post_num not in post_to_messages:
                    post_to_messages[current_post_num] = {}
                post_to_messages[current_post_num][user_id] = sent_to_author.message_id
                message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∏—Å–∫–ª—é—á–∞—è –∞–≤—Ç–æ—Ä–∞)
            if recipients:
                await message_queue.put({
                    'recipients': recipients,
                    'content': content,
                    'post_num': current_post_num,
                    'reply_info': reply_info if reply_info else None
                })

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            if current_post_num in messages_storage:
                del messages_storage[current_post_num]

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message: {e}")

async def start_background_tasks():
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –û–î–ò–ù —Ä–∞–∑ –∑–∞ –≤–µ—Å—å runtime"""
    global message_queue
    message_queue = asyncio.Queue(maxsize=9000)

    tasks = [
        asyncio.create_task(auto_backup()),
        asyncio.create_task(message_broadcaster()),
        asyncio.create_task(conan_roaster(
            state,
            messages_storage,
            post_to_messages,
            message_to_post,
            message_queue,
            format_header
        )),
        asyncio.create_task(motivation_broadcaster()),
        asyncio.create_task(auto_memory_cleaner()),
        asyncio.create_task(cleanup_old_messages()),
        asyncio.create_task(help_broadcaster(state, message_queue, format_header)),
    ]
    print(f"‚úì Background tasks started: {len(tasks)}")
    return tasks 

async def supervisor():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    for board, token in BOT_TOKENS.items():
        if token is None:
            print(f"‚õî –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å–∫–∏ {board} –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway.")
            sys.exit(1)  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    lock_file = "bot.lock"
    if os.path.exists(lock_file):
        print("‚õî Bot already running! Exiting...")
        sys.exit(1)
    
    with open(lock_file, "w") as f:
        f.write(str(os.getpid()))
    
    try:
        global is_shutting_down, healthcheck_site, bots, dispatchers, bot_to_board
        loop = asyncio.get_running_loop()

        restore_backup_on_start()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤...")
        bots = {board: Bot(token=BOT_TOKENS[board]) for board in BOARDS}
        dispatchers = {board: Dispatcher() for board in BOARDS}
        bot_to_board = {bots[board]: board for board in BOARDS}
        print("‚úÖ –ë–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:", list(bots.keys()))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for board in BOARDS:
            dp = dispatchers[board]
            dp.message.register(cmd_start, Command("start"))
            dp.message.register(cmd_help, Command("help"))
            dp.message.register(cmd_stats, Command("stats"))
            dp.message.register(cmd_face, Command("face"))
            dp.message.register(cmd_roll, Command("roll"))
            dp.message.register(cmd_invite, Command("invite"))
            dp.message.register(cmd_deanon, Command("deanon"))
            dp.message.register(cmd_zaputin, Command("zaputin"))
            dp.message.register(cmd_slavaukraine, Command("slavaukraine"))
            dp.message.register(cmd_suka_blyat, Command("suka_blyat"))
            dp.message.register(cmd_anime, Command("anime"))
            dp.message.register(cmd_admin, Command("admin"))
            dp.message.register(cmd_id, Command("id"))
            dp.message.register(cmd_ban, Command("ban"))
            dp.message.register(cmd_mute, Command("mute"))
            dp.message.register(cmd_wipe, Command("wipe"))
            dp.message.register(cmd_unmute, Command("unmute"))
            dp.message.register(cmd_unban, Command("unban"))
            dp.message.register(cmd_del, Command("del"))
            dp.message.register(handle_message)
            dp.callback_query.register(admin_save, F.data == "save")
            dp.callback_query.register(admin_stats, F.data == "stats")
            dp.callback_query.register(admin_spammers, F.data == "spammers")
            dp.callback_query.register(admin_banned, F.data == "banned")

        load_state()
        healthcheck_site = None  # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º healthcheck, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        tasks = await start_background_tasks()
        print("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        print("‚úÖ –ó–∞–ø—É—Å–∫ polling...")
        await asyncio.gather(
            *[dispatchers[board].start_polling(bots[board], skip_updates=True) for board in BOARDS]
        )

    except Exception as e:
        print(f"üî• Critical error: {e}")
    finally:
        if not is_shutting_down:
            await graceful_shutdown()
        if os.path.exists(lock_file):
            os.remove(lock_file)

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(supervisor())
