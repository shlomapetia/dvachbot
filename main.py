from __future__ import annotations
import asyncio
import gc
import io
import json
import logging
import time
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
import re 
import glob
import random
import secrets
import pickle
import gzip
from aiogram import types
import weakref
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor
from typing import Tuple
import aiohttp
from aiohttp import web
import shutil
from aiogram.types import Message
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.exceptions import TelegramRetryAfter
from asyncio import Semaphore
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramForbiddenError,
    TelegramNetworkError,
    TelegramConflictError,
)
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
import subprocess
import signal
from datetime import datetime, timedelta, timezone, UTC
from japanese_translator import anime_transform, get_random_anime_image
from ukrainian_mode import ukrainian_transform, UKRAINIAN_PHRASES
import deanonymizer 
from conan import conan_roaster, conan_phrase
from zaputin_mode import zaputin_transform, PATRIOTIC_PHRASES 
from deanonymizer import DEANON_SURNAMES, DEANON_CITIES, DEANON_PROFESSIONS, DEANON_FETISHES, DEANON_DETAILS, generate_deanon_info
from help_text import HELP_TEXT
from ghost_machine import ghost_poster

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å–æ–∫ ==========
# –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
BOARD_CONFIG = {
    'b': {
        "name": "/b/",
        "description": "–ë–†–ï–î - –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Å–∫–∞",
        "username": "@dvach_chatbot",
        "token": os.getenv("BOT_TOKEN"),  # –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        "admins": {int(x) for x in os.getenv("ADMINS", "").split(",") if x}
    },
    'po': {
        "name": "/po/",
        "description": "–ü–û–õ–ò–¢–ê–ß - (—Å—Ä–∞—á–∏, –ø–æ–ª–∏—Ç–∏–∫–∞)",
        "username": "@dvach_po_chatbot",
        "token": os.getenv("PO_BOT_TOKEN"),
        "admins": {int(x) for x in os.getenv("PO_ADMINS", "").split(",") if x}
    },
    'a': {
        "name": "/a/",
        "description": "–ê–ù–ò–ú–ï - (–º–∞–Ω–≥–∞, –Ø–ø–æ–Ω–∏—è, —Ö–µ–Ω—Ç–∞–π)",
        "username": "@dvach_a_chatbot",
        "token": os.getenv("A_BOT_TOKEN"),
        "admins": {int(x) for x in os.getenv("A_ADMINS", "").split(",") if x}
    },
    'sex': {
        "name": "/sex/",
        "description": "–°–ï–ö–°–ê–ß - (–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–µ–∫—Å, —Ç—è–Ω, –µ–æ—Ç, –±–ª–µ–∫–ø–∏–ª–ª)",
        "username": "@dvach_sex_chatbot",
        "token": os.getenv("SEX_BOT_TOKEN"),
        "admins": {int(x) for x in os.getenv("SEX_ADMINS", "").split(",") if x}
    },
    'vg': {
        "name": "/vg/",
        "description": "–í–ò–î–ï–û–ò–ì–†–´ - (–ü–ö, –∏–≥—Ä—ã, —Ö–æ–±–±–∏)",
        "username": "@dvach_vg_chatbot",
        "token": os.getenv("VG_BOT_TOKEN"),
        "admins": {int(x) for x in os.getenv("VG_ADMINS", "").split(",") if x}
    }
}

# –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –¥–æ—Å–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
BOARDS = list(BOARD_CONFIG.keys())

# –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏
message_queues = {board: asyncio.Queue(maxsize=9000) for board in BOARDS}

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
is_shutting_down = False
git_executor = ThreadPoolExecutor(max_workers=1)
send_executor = ThreadPoolExecutor(max_workers=100)
save_executor = ThreadPoolExecutor(max_workers=os.cpu_count() or 1) # Executor –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
git_semaphore = asyncio.Semaphore(1)
post_counter_lock = asyncio.Lock()


# –í–í–û–î–ò–ú –ù–û–í–£–Æ –°–¢–†–£–ö–¢–£–†–£ –î–õ–Ø –î–ê–ù–ù–´–• –ö–ê–ñ–î–û–ô –î–û–°–ö–ò
board_data = defaultdict(lambda: {
    # --- –†–µ–∂–∏–º—ã ---
    'anime_mode': False,
    'zaputin_mode': False,
    'slavaukraine_mode': False,
    'suka_blyat_mode': False,
    'last_suka_blyat': None,
    'suka_blyat_counter': 0,
    'last_mode_activation': None,
    # --- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    'last_texts': defaultdict(lambda: deque(maxlen=5)),
    'last_stickers': defaultdict(lambda: deque(maxlen=5)),
    'last_animations': defaultdict(lambda: deque(maxlen=5)),
    'spam_violations': defaultdict(dict),
    'spam_tracker': defaultdict(list),
    # --- –ú—É—Ç—ã –∏ –±–∞–Ω—ã ---
    'mutes': {},
    'shadow_mutes': {},
    # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ---
    'users': {
        'active': set(),
        'banned': set()
    },
    'message_counter': defaultdict(int),
    # --- –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º–∞) ---
    'last_user_msgs': {},
})

# ========== –û–ë–©–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ==========
MODE_COOLDOWN = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_ACTIVE_USERS_IN_MEMORY = 5000 # –õ–∏–º–∏—Ç –Ω–∞ —é–∑–µ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è get_user_msgs_deque

# --- –û–ë–©–ï–ï –•–†–ê–ù–ò–õ–ò–©–ï –ü–û–°–¢–û–í (—Å–∫–≤–æ–∑–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è) ---
state = {
    'post_counter': 0,
    # 'message_counter', 'users_data' –∏ 'settings' —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ board_data
    # –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è/—Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ.
    # –ù–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –æ—Å—Ç–∞–≤–∏–º post_counter –∑–¥–µ—Å—å.
}
messages_storage = {}
post_to_messages = {}
message_to_post = {}
last_messages = deque(maxlen=500) # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â–∏–º
last_activity_time = datetime.now()
daily_log = io.StringIO()
sent_media_groups = deque(maxlen=1000)
current_media_groups = {}
media_group_timers = {}

# –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ aiogram
os.environ["AIORGRAM_DISABLE_SIGNAL_HANDLERS"] = "1"


SPAM_RULES = {
    'text': {
        'max_repeats': 5,  # –ú–∞–∫—Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
        'min_length': 2,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        'window_sec': 15,  # –û–∫–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)
        'max_per_window': 7,  # –ú–∞–∫—Å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∫–Ω–µ
        'penalty': [60, 300, 600]  # –®–∫–∞–ª–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π: [1 –º–∏–Ω, 5–º–∏–Ω, 10 –º–∏–Ω]
    },
    'sticker': {
        'max_per_window': 6,  # 6 —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ 18 —Å–µ–∫
        'window_sec': 18,
        'penalty': [60, 600, 900]  # 1–º–∏–Ω, 10–º–∏–Ω, 15 –º–∏–Ω
    },
    'animation': {  # –ì–∏—Ñ–∫–∏
        'max_per_window': 5,  # 5 –≥–∏—Ñ–∫–∏ –∑–∞ 30 —Å–µ–∫
        'window_sec': 20,
        'penalty': [60, 600, 900]  # 1–º–∏–Ω, 10–º–∏–Ω, 15 –º–∏–Ω
    }
}


# –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞—Ö: media_group_id -> –¥–∞–Ω–Ω—ã–µ
current_media_groups = {}
media_group_timers = {}

def suka_blyatify_text(text: str, board_id: str) -> str:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫ —Ç–µ–∫—Å—Ç—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ "—Å—É–∫–∞ –±–ª—è—Ç—å".
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏.
    """
    if not text:
        return text

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏
    b_data = board_data[board_id]
    words = text.split()

    for i in range(len(words)):
        if random.random() < 0.3:
            words[i] = random.choice(MAT_WORDS)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á–µ—Ç—á–∏–∫, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –¥–æ—Å–∫–µ
    b_data['suka_blyat_counter'] += 1
    if b_data['suka_blyat_counter'] % 3 == 0:
        words.append("... –°–£–ö–ê –ë–õ–Ø–¢–¨!")
    
    return ' '.join(words)

def restore_backup_on_start():
    """–ó–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã *_state.json –∏ *_reply_cache.json –∏–∑ backup-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    repo_url = "https://github.com/shlomapetia/dvachbot-backup.git"
    backup_dir = "/tmp/backup"
    try:
        if os.path.exists(backup_dir):
            shutil.rmtree(backup_dir)
        subprocess.run(["git", "clone", repo_url, backup_dir], check=True)

        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        backup_files = glob.glob(os.path.join(backup_dir, "*_state.json"))
        backup_files += glob.glob(os.path.join(backup_dir, "*_reply_cache.json"))

        if not backup_files:
            print("–§–∞–π–ª—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ backup-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for src_path in backup_files:
            fname = os.path.basename(src_path)
            dst_path = os.path.join(os.getcwd(), fname)
            shutil.copy2(src_path, dst_path)
            print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {fname} –∏–∑ backup-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ backup: {e}")


async def healthcheck(request):
    print("üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ healthcheck")
    return web.Response(text="Bot is alive")


async def start_healthcheck():
    port = int(os.environ.get('PORT', 8080))
    app = web.Application()
    app.router.add_get("/", healthcheck)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    try:
        print(f"üü¢ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å healthcheck —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        await site.start()  # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        print(f"üü¢ Healthcheck-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ healthcheck —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        raise


GITHUB_REPO = "https://github.com/shlomapetia/dvachbot-backup.git"
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å –≤ Railway!

async def git_commit_and_push():
    """–ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞ –≤ GitHub"""
    global is_shutting_down

    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ shutdown
    if git_executor._shutdown and not is_shutting_down:
        print("‚ö†Ô∏è Git executor –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø")
        return False

    async with git_semaphore:
        try:
            token = os.getenv("GITHUB_TOKEN")
            if not token:
                print("‚ùå –ù–µ—Ç GITHUB_TOKEN")
                return False

            loop = asyncio.get_running_loop()
            return await loop.run_in_executor(
                git_executor, 
                sync_git_operations, 
                token
            )
        except Exception as e:
            print(f"‚õî –û—à–∏–±–∫–∞ –≤ git_commit_and_push: {str(e)}")
            return False


def sync_git_operations(token: str) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ Git-–æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞ —Å –∂–µ—Å—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    GIT_TIMEOUT = 20  # –°–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—É—é —Å–µ—Ç–µ–≤—É—é git-–æ–ø–µ—Ä–∞—Ü–∏—é
    try:
        work_dir = "/tmp/git_backup"
        os.makedirs(work_dir, exist_ok=True)
        repo_url = f"https://{token}@github.com/shlomapetia/dvachbot-backup.git"

        # --- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
        if not os.path.exists(os.path.join(work_dir, ".git")):
            clone_cmd = ["git", "clone", "--depth=1", repo_url, work_dir]
            print(f"Git: –í—ã–ø–æ–ª–Ω—è—é: {' '.join(clone_cmd)}")
            result = subprocess.run(clone_cmd, capture_output=True, text=True, timeout=GIT_TIMEOUT)
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–¥ {result.returncode}):\n--- stderr ---\n{result.stderr}\n--- stdout ---\n{result.stdout}")
                return False
            print("‚úÖ Git: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω.")
        else:
            pull_cmd = ["git", "-C", work_dir, "pull"]
            print(f"Git: –í—ã–ø–æ–ª–Ω—è—é: {' '.join(pull_cmd)}")
            result = subprocess.run(pull_cmd, capture_output=True, text=True, timeout=GIT_TIMEOUT)
            if result.returncode != 0:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–¥ {result.returncode}):\n--- stderr ---\n{result.stderr}\n--- stdout ---\n{result.stdout}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ —ç—Ç–æ –ø–ª–æ—Ö–æ–π –∑–Ω–∞–∫

        # --- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ---
        files_to_copy = glob.glob(os.path.join(os.getcwd(), "*_state.json"))
        files_to_copy += glob.glob(os.path.join(os.getcwd(), "*_reply_cache.json"))
        
        if not files_to_copy:
            print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞, –ø—Ä–æ–ø—É—Å–∫.")
            return True # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã

        for src_path in files_to_copy:
            shutil.copy2(src_path, work_dir)

        # --- –õ–æ–∫–∞–ª—å–Ω—ã–µ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±—ã—Å—Ç—Ä—ã–µ, –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç) ---
        subprocess.run(["git", "-C", work_dir, "config", "user.name", "Backup Bot"], check=True, timeout=5)
        subprocess.run(["git", "-C", work_dir, "config", "user.email", "backup@dvachbot.com"], check=True, timeout=5)
        subprocess.run(["git", "-C", work_dir, "add", "."], check=True, timeout=5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∫–æ–º–º–∏—Ç–∏—Ç—å
        status_result = subprocess.run(["git", "-C", work_dir, "status", "--porcelain"], capture_output=True, text=True, timeout=5)
        if not status_result.stdout:
            print("‚úÖ Git: –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞.")
            return True

        commit_msg = f"Backup: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}"
        subprocess.run(["git", "-C", work_dir, "commit", "-m", commit_msg], check=True, timeout=5)

        # --- Push - —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ---
        push_cmd = ["git", "-C", work_dir, "push", "origin", "main"]
        print(f"Git: –í—ã–ø–æ–ª–Ω—è—é: {' '.join(push_cmd)}")
        result = subprocess.run(push_cmd, capture_output=True, text=True, timeout=GIT_TIMEOUT)

        if result.returncode == 0:
            print(f"‚úÖ –ë–µ–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub.\n--- stdout ---\n{result.stdout}")
            return True
        else:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê PUSH (–∫–æ–¥ {result.returncode}):\n--- stderr ---\n{result.stderr}\n--- stdout ---\n{result.stdout}")
            return False

    except subprocess.TimeoutExpired as e:
        print(f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ git! –ö–æ–º–∞–Ω–¥–∞ '{' '.join(e.cmd)}' –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {e.timeout} —Å–µ–∫—É–Ω–¥.")
        print(f"--- stderr ---\n{e.stderr or '(–ø—É—Å—Ç–æ)'}\n--- stdout ---\n{e.stdout or '(–ø—É—Å—Ç–æ)'}")
        return False
    except Exception as e:
        print(f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ sync_git_operations: {e}")
        return False
        
dp = Dispatcher()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING,  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    format="%(message)s",  # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–∞—Ç
    datefmt="%H:%M:%S"  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ
)
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è aiohttp (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä)
aiohttp_log = logging.getLogger('aiohttp')
aiohttp_log.setLevel(logging.CRITICAL)  # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è aiogram (–±–æ—Ç)
aiogram_log = logging.getLogger('aiogram')
aiogram_log.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è


def clean_html_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    if not text:
        return text
    return re.sub(r'<[^>]+>', '', text)

def add_you_to_my_posts(text: str, user_id: int) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç (You) –∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –ø–æ—Å—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –∂–µ –ø–æ—Å—Ç"""
    if not text:
        return text

    pattern = r">>(\d+)"
    matches = re.findall(pattern, text)

    for post_str in matches:
        try:
            post_num = int(post_str)
            post_data = messages_storage.get(post_num, {})
            original_author = post_data.get("author_id")

            if original_author == user_id:
                # –î–æ–±–∞–≤–ª—è–µ–º "(You)", –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                target = f">>{post_num}"
                replacement = f">>{post_num} (You)"

                if target in text and replacement not in text:
                    text = text.replace(target, replacement)
        except (ValueError, KeyError):
            continue

    return text


async def auto_backup():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –í–°–ï–• –¥–æ—Å–æ–∫ –∏ –±—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 1 —á"""
    while True:
        try:
            await asyncio.sleep(900)  # 15 –º

            if is_shutting_down:
                break
            
            # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –∏ –¥–µ–ª–∞–µ—Ç –±—ç–∫–∞–ø
            await save_all_boards_and_backup()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_backup: {e}")
            await asyncio.sleep(60)
            
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
gc.set_threshold(
    700, 10, 10)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –ø–∞–º—è—Ç–∏/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏


def get_user_msgs_deque(user_id: int, board_id: str):
    """–ü–æ–ª—É—á–∞–µ–º deque –¥–ª—è —é–∑–µ—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–µ, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏"""
    last_user_msgs_for_board = board_data[board_id]['last_user_msgs']
    
    if user_id not in last_user_msgs_for_board:
        if len(last_user_msgs_for_board) >= MAX_ACTIVE_USERS_IN_MEMORY:
            oldest_user = next(iter(last_user_msgs_for_board))
            del last_user_msgs_for_board[oldest_user]

        last_user_msgs_for_board[user_id] = deque(maxlen=10)

    return last_user_msgs_for_board[user_id]

# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMINS = {int(x) for x in os.getenv("ADMINS", "").split(",") if x}
SPAM_LIMIT = 14
SPAM_WINDOW = 15
STATE_FILE = 'state.json'
SAVE_INTERVAL = 900  # —Å–µ–∫—É–Ω–¥
STICKER_WINDOW = 10  # —Å–µ–∫—É–Ω–¥
STICKER_LIMIT = 7
REST_SECONDS = 30  # –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
REPLY_CACHE = 500  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –¥–µ—Ä–∂–∞—Ç—å
REPLY_FILE = "reply_cache.json"  # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è reply
# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
MAX_MESSAGES_IN_MEMORY = 600  # —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 600 –ø–æ—Å—Ç–æ–≤


WEEKDAYS = [
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", 
    "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
]

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
MOTIVATIONAL_MESSAGES = [
    "–ß–µ–º –±–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤, —Ç–µ–º —ç–ø–∏—á–Ω–µ–µ —Ç—Ä–µ–¥—ã",
    "–û–¥–∏–Ω –∞–Ω–æ–Ω - –Ω–µ –∞–Ω–æ–Ω. –ó–æ–≤–∏ –±—Ä–∞—Ç–∏—à–µ–∫",
    "–ë–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤ - –±–æ–ª—å—à–µ —Ä–æ—Ñ–ª–æ–≤",
    "–¢–≤–æ–π –¥—Ä—É–≥ –≤—Å—ë –µ—â—ë —Å–∏–¥–∏—Ç –≤ —Ç–µ–ª–µ–≥–µ –∫–∞–∫ –Ω–æ—Ä–º–∏—Å? –ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ",
    "–ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –∞–Ω–æ–Ω = -1 –Ω–æ—Ä–º–∏—Å –≤ –º–∏—Ä–µ",
    "–°–∏–¥–∏—à—å —Ç—É—Ç –æ–¥–∏–Ω? –ó–∞–µ–±–∞–ª, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π, –Ω–µ –±—É–¥—å –∞—É—Ç–∏—Å—Ç–æ–º",
    "–ë–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤ - –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ —Ç—Ä–µ–¥ —É–º—Ä—ë—Ç",
    "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ –¥–≤–æ–π–Ω—É—é –¥–æ–∑—É –ª—É–ª–∑–æ–≤",
    "–¢–≤–æ–∏ –∫–µ–Ω—Ç—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –≤ –≤–∫? –ü–æ—Ä–∞ –∏—Ö —Å–ø–∞—Å–∞—Ç—å",
    "–ê–Ω–æ–Ω–∏–º—É—Å—ã –Ω–µ —Ä–∞–∑–º–Ω–æ–∂–∞—é—Ç—Å—è –ø–æ—á–∫–æ–≤–∞–Ω–∏–µ–º. –ó–æ–≤–∏ –Ω–æ–≤—ã—Ö",
    "–°–∫—É—á–Ω–æ? –ü–æ–∑–æ–≤–∏ –∞–Ω–æ–Ω–æ–≤, –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–µ–µ",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —á–∞—Ç = –º—ë—Ä—Ç–≤—ã–π —á–∞—Ç. –î–µ–π—Å—Ç–≤—É–π",
    "–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å. –≠—Ç–æ –∏ –º—É–∂—Å–∫–æ–π —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π —Ñ–ª–∏—Ä—Ç.",
    "–ê–±—É —Å–æ—Å–µ—Ç —Ö—É–π. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π",
    "–¢–≥–∞—á - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —á–∞—Ç. –≠—Ç–æ –∞–Ω–æ–Ω—ã",
    "–í–æ–∑—Ä–æ–∂–¥–∞–µ–º —Å–æ—Å–∞—á. –ê–Ω–æ–Ω—ã, –∑–æ–≤–∏—Ç–µ –¥—Ä—É–∑–µ–π",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞",
    "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω. –¢—ã –Ω–µ –æ–¥–∏–Ω. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π",
    "–î–∞ —Ç—ã –∑–∞–µ–±–∞–ª, –ø—Ä–∏–≥–ª–∞—à–∞–π –∞–Ω–æ–Ω–æ–≤",
    "–ü–æ—Ä–∞ –±—ã –ø—Ä–æ–ø–∏–∞—Ä–∏—Ç—å —Ç–≥–∞—á. –≠–π —É—ë–±–æ–∫, —Ä–∞–∑–æ—à–ª–∏ –≤ —Å–≤–æ–∏ –∫–æ–Ω—Ñ—ã",
]

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
INVITE_TEXTS = [
    "–ê–Ω–æ–Ω, –∑–∞–ª–µ—Ç–∞–π –≤ –¢–≥–∞—á @dvach_chatbot\n–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ",
    "–ï—Å—Ç—å —Ç–µ–ª–µ–≥–∞? –ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? \n@dvach_chatbot - –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
    "–£—Å—Ç–∞–ª –æ—Ç —Ü–µ–Ω–∑—É—Ä—ã? –•–æ—á–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏?\n –í–µ–ª–∫–∞–º –≤ –¢–≥–∞—á - @dvach_chatbot - –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ",
    "@dvach_chatbot - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    "–¢–≥–∞—á: @dvach_chatbot\n–ü–∏—à–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–°–∫—É—á–∞–µ—à—å –ø–æ –¥–≤–∞—á—É? –û–Ω —Ç—É—Ç:  –¢–≥–∞—á @dvach_chatbot\n–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞",
    "–ó–∞–ª–µ—Ç–∞–π –≤ @dvach_chatbot\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≥–¥–µ –º–æ–∂–Ω–æ –≤—Å—ë",
    "@dvach_chatbot - –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —É—Å—Ç–∞–ª –æ—Ç –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤\n100% –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å",
    "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ: @dvach_chatbot\n–ü–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–¢–≥–∞—á –≤ —Ç–µ–ª–µ–≥–µ: @dvach_chatbot\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    "@dvach_chatbot - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ü–∏—à–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–°–∞–ø —Ç–≥–∞—á: @dvach_chatbot\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞. @dvach_chatbot",
    "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω. –¢—ã –Ω–µ –æ–¥–∏–Ω. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π. @dvach_chatbot",
    "–¢–≥–∞—á - –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ @dvach_chatbot",
]

# –î–ª—è /suka_blyat
MAT_WORDS = ["—Å—É–∫–∞", "–±–ª—è–¥—å", "–ø–∏–∑–¥–µ—Ü", "–µ–±–∞—Ç—å", "–Ω–∞—Ö", "–ø–∏–∑–¥–∞", "—Ö—É–π–Ω—è", "–µ–±–∞–ª", "–±–ª—è—Ç—å", "–æ—Ç—ä–µ–±–∏—Å—å", "–µ–±–∞–Ω—ã–π", "–µ–±–ª–∞–Ω", "–•–£–ô", "–ü–ò–ó–î–ê", "—Ö—É–π–ª–æ", "–¥–æ–ª–±–∞—ë–±", "–ø–∏–¥–æ—Ä–∞—Å"]

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ú–°–ö
MSK = timezone(timedelta(hours=3))

# ‚îÄ‚îÄ‚îÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–π error-handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@dp.errors()
async def global_error_handler(event: types.ErrorEvent) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è aiogram (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–æ—Å–æ–∫)."""
    exception = event.exception
    update = event.update

    if exception is None:
        if update:
            update_info = f"Update {update.update_id}"
            if update.message:
                update_info += f" from user {update.message.from_user.id}"
            print(f"‚ö†Ô∏è Event without exception: {update_info}")
        else:
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –±–µ–∑ update")
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ TelegramForbiddenError (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
    if isinstance(exception, TelegramForbiddenError):
        user_id = None
        telegram_object = None

        if update and update.message:
            user_id = update.message.from_user.id
            telegram_object = update.message
        elif update and update.callback_query:
            user_id = update.callback_query.from_user.id
            telegram_object = update.callback_query

        if user_id and telegram_object:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–≥–æ –∏–º–µ–Ω–Ω–æ –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
            board_id = get_board_id(telegram_object)
            if board_id:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–µ
                board_data[board_id]['users']['active'].discard(user_id)
                print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö.")
        return True

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {type(exception).__name__}"
    if str(exception):
        error_msg += f": {exception}"
    print(error_msg)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if isinstance(exception, (TelegramNetworkError, TelegramConflictError, aiohttp.ClientError)):
        print(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {exception}")
        await asyncio.sleep(10)
        return False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ KeyError (–ø—Ä–æ–±–ª–µ–º—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º)
    elif isinstance(exception, KeyError):
        print(f"üîë KeyError: {exception}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return True

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    else:
        print(f"‚õî –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
        if update:
            try:
                print(f"Update: {update.model_dump_json(exclude_none=True, indent=2)}")
            except Exception as json_e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å update: {json_e}")
        await asyncio.sleep(10)
        return False
        
def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã"""
    if not text:
        return text
    return text.replace('&', '&amp;').replace('<', '&lt;').replace(
        '>', '&gt;').replace('"', '&quot;')


def is_admin(uid: int, board_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–û–ô –¥–æ—Å–∫–µ."""
    if not board_id:
        return False
    return uid in BOARD_CONFIG.get(board_id, {}).get('admins', set())
    
def _sync_save_board_state(board_id: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state.json."""
    state_file = f"{board_id}_state.json"
    b_data = board_data[board_id]
    
    try:
        post_counter_to_save = state['post_counter'] if board_id == 'b' else None
        
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Å—Ç–æ–≤ ---
        # –¢–µ–ø–µ—Ä—å –º—ã –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã, –∞ –±–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏,
        # –∫–æ—Ç–æ—Ä–æ–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –≤ format_header.
        board_post_count = b_data.get('board_post_count', 0)
        
        data_to_save = {
            'users_data': {
                'active': list(b_data['users']['active']),
                'banned': list(b_data['users']['banned']),
            },
            'message_counter': dict(b_data['message_counter']),
            'board_post_count': board_post_count, # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
        }
        if post_counter_to_save is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º 'post_counter' –¥–ª—è 'b' –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            data_to_save['post_counter'] = post_counter_to_save

        with open(state_file, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚õî [{board_id}] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state: {e}")
        return False

async def save_board_state(board_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state.json."""
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(
        save_executor,
        _sync_save_board_state,
        board_id
    )

async def save_all_boards_and_backup():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –í–°–ï–• –¥–æ—Å–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –¥–µ–ª–∞–µ—Ç –æ–¥–∏–Ω –æ–±—â–∏–π –±—ç–∫–∞–ø –≤ Git."""
    print("üíæ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –±—ç–∫–∞–ø–∞...")

    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    save_tasks = []
    for board_id in BOARDS:
        save_tasks.append(save_board_state(board_id))
        save_tasks.append(save_reply_cache(board_id))
    
    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await asyncio.gather(*save_tasks)
    
    print("üíæ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø—É—à–∏–º –≤ GitHub...")
    success = await git_commit_and_push()
    if success:
        print("‚úÖ –ë—ç–∫–∞–ø –≤—Å–µ—Ö –¥–æ—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub.")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø –≤ GitHub.")
    return success

def _sync_save_reply_cache(board_id: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    reply_file = f"{board_id}_reply_cache.json"
    try:
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –¢–û–õ–¨–ö–û —ç—Ç–æ–π –¥–æ—Å–∫–µ
        board_post_keys = {
            p_num for p_num, data in messages_storage.items() 
            if data.get("board_id") == board_id
        }
        
        # 2. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        recent_board_posts = sorted(list(board_post_keys))[-REPLY_CACHE:]
        recent_posts_set = set(recent_board_posts)

        if not recent_posts_set:
            if os.path.exists(reply_file):
                os.remove(reply_file)
            return True

        # 3. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        new_data = {
            "post_to_messages": {
                str(p_num): data
                for p_num, data in post_to_messages.items()
                if p_num in recent_posts_set
            },
            "message_to_post": {
                f"{uid}_{mid}": p_num
                for (uid, mid), p_num in message_to_post.items()
                if p_num in recent_posts_set
            },
            "messages_storage_meta": {
                str(p_num): {
                    "author_id": messages_storage[p_num].get("author_id", ""),
                    "timestamp": messages_storage[p_num].get("timestamp", datetime.now(UTC)).isoformat(),
                    "author_message_id": messages_storage[p_num].get("author_message_id"),
                    "board_id": board_id
                }
                for p_num in recent_board_posts
                if p_num in messages_storage
            }
        }

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è I/O)
        with open(reply_file, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, ensure_ascii=False, indent=2)

        return True

    except Exception as e:
        print(f"‚õî [{board_id}] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è reply_cache: {str(e)[:200]}")
        return False

async def save_reply_cache(board_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–æ–≤."""
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(
        save_executor, 
        _sync_save_reply_cache, 
        board_id
    )

def load_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –í–°–ï–• –¥–æ—Å–æ–∫ –≤ board_data."""
    global state # –¢–æ–ª—å–∫–æ –¥–ª—è post_counter

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ 'b'
    # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∫–≤–æ–∑–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
    state_file_b = 'b_state.json'
    if os.path.exists(state_file_b):
        try:
            with open(state_file_b, 'r', encoding='utf-8') as f:
                data = json.load(f)
                state['post_counter'] = data.get('post_counter', 0)
                print(f"–û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: {state['post_counter']}")
        except (json.JSONDecodeError, OSError):
             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –∏–∑ {state_file_b}.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏
    for board_id in BOARDS:
        state_file = f"{board_id}_state.json"
        if not os.path.exists(state_file):
            print(f"–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ—Å–∫–∏ '{board_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫.")
            continue

        try:
            with open(state_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ board_data[board_id]
            b_data = board_data[board_id]
            b_data['users']['active'] = set(data.get('users_data', {}).get('active', []))
            b_data['users']['banned'] = set(data.get('users_data', {}).get('banned', []))
            b_data['message_counter'].update(data.get('message_counter', {}))
            
            # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
            loaded_post_count = data.get('board_post_count', 0)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 'b', —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç.
            # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–µ—Ä—é –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
            if board_id == 'b' and loaded_post_count == 0:
                b_data['board_post_count'] = 37004
            else:
                b_data['board_post_count'] = loaded_post_count

            print(f"[{board_id}] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: "
                  f"–∞–∫—Ç–∏–≤–Ω—ã—Ö = {len(b_data['users']['active'])}, "
                  f"–∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö = {len(b_data['users']['banned'])}, "
                  f"–ø–æ—Å—Ç–æ–≤ = {b_data['board_post_count']}") # <-- –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –¥–æ—Å–∫–∏
            load_reply_cache(board_id)

        except (json.JSONDecodeError, OSError) as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ—Å–∫–∏ '{board_id}': {e}")
            
def load_archived_post(post_num):
    """–ò—â–µ–º –ø–æ—Å—Ç –≤ –∞—Ä—Ö–∏–≤–∞—Ö"""
    for archive_file in glob.glob("archive_*.pkl.gz"):
        with gzip.open(archive_file, "rb") as f:
            data = pickle.load(f)
            if post_num in data:
                return data[post_num]
    return None

def load_reply_cache(board_id: str):
    """–ß–∏—Ç–∞–µ–º reply_cache –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞—Ä–∏."""
    global message_to_post, post_to_messages, messages_storage
    
    reply_file = f"{board_id}_reply_cache.json"
    if not os.path.exists(reply_file) or os.path.getsize(reply_file) == 0:
        return

    try:
        with open(reply_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, OSError) as e:
        print(f"–§–∞–π–ª {reply_file} –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ({e}), –∏–≥–Ω–æ—Ä–∏—Ä—É—é")
        return

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞—Ä–∏, –æ–Ω–∏ –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏ —Å–æ –≤—Å–µ—Ö –¥–æ—Å–æ–∫
    for key, post_num in data.get("message_to_post", {}).items():
        uid, mid = map(int, key.split("_"))
        message_to_post[(uid, mid)] = post_num

    for p_str, mapping in data.get("post_to_messages", {}).items():
        post_to_messages[int(p_str)] = {
            int(uid): mid
            for uid, mid in mapping.items()
        }

    for p_str, meta in data.get("messages_storage_meta", {}).items():
        p = int(p_str)
        if 'timestamp' in meta:
            dt = datetime.fromisoformat(meta['timestamp'])
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=UTC)
            messages_storage[p] = {
                "author_id": meta["author_id"],
                "timestamp": dt,
                "author_message_id": meta.get("author_msg"),
                "board_id": board_id # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —Å –∫–∞–∫–æ–π –¥–æ—Å–∫–∏ –ø—Ä–∏—à–µ–ª –ø–æ—Å—Ç
            }
            
    print(f"[{board_id}] reply-cache –∑–∞–≥—Ä—É–∂–µ–Ω: {len(data.get('post_to_messages', {}))} –ø–æ—Å—Ç–æ–≤")


async def graceful_shutdown(bots: list[Bot]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –í–°–ï–• –¥–æ—Å–æ–∫ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π."""
    global is_shutting_down
    if is_shutting_down:
        return

    is_shutting_down = True
    print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª shutdown, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

    # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    try:
        await dp.stop_polling()
        print("‚è∏ Polling –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling: {e}")

    # 2. –ñ–¥–∞—Ç—å –ø–æ–∫–∞ –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø—É—Å—Ç–µ—é—Ç (–º–∞–∫—Å 10 —Å–µ–∫)
    print("–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π...")
    all_queues_empty = False
    for _ in range(10):
        if all(q.empty() for q in message_queues.values()):
            all_queues_empty = True
            break
        await asyncio.sleep(1)
    
    if all_queues_empty:
        print("‚úÖ –í—Å–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
    else:
        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è.")

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—É—à–∏–º –¥–∞–Ω–Ω—ã–µ. –°–ê–ú–´–ô –í–ê–ñ–ù–´–ô –≠–¢–ê–ü.
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –±—ç–∫–∞–ø, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –¥–æ SIGKILL –æ—Ç —Ö–æ—Å—Ç–∏–Ω–≥–∞.
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    print("üíæ –ü–æ–ø—ã—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –±—ç–∫–∞–ø–∞ –≤ GitHub (—Ç–∞–π–º–∞—É—Ç 50 —Å–µ–∫—É–Ω–¥)...")
    try:
        await asyncio.wait_for(save_all_boards_and_backup(), timeout=50.0)
        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ç–∞–π–º–∞—É—Ç–∞.")
    except asyncio.TimeoutError:
        print("‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø –Ω–µ —É—Å–ø–µ–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –∑–∞ 50 —Å–µ–∫—É–Ω–¥ –∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω!")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    except Exception as e:
        print(f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: {e}")


    # 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫–∞–ø–∞
    print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    try:
        if 'healthcheck_site' in globals() and globals()['healthcheck_site']:
            await globals()['healthcheck_site'].stop()
            print("üõë Healthcheck server stopped")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–ª–æ–≤ –ø–æ—Ç–æ–∫–æ–≤, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∏—Ö.
        # –ï—Å–ª–∏ –±—ç–∫–∞–ø –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É, –ø–æ—Ç–æ–∫ git –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è.
        # wait=True –∑–¥–µ—Å—å –ø—Ä–∏–≤–µ–ª –±—ã –∫ –∑–∞–≤–∏—Å–∞–Ω–∏—é.
        git_executor.shutdown(wait=False, cancel_futures=True)
        send_executor.shutdown(wait=False, cancel_futures=True)
        print("üõë Executors shutdown initiated.")

        if hasattr(dp, 'storage') and dp.storage:
            await dp.storage.close()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        for bot_instance in bots:
            if bot_instance.session:
                await bot_instance.session.close()
        print("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç—ã.")

    except Exception as e:
        print(f"Error during final shutdown procedures: {e}")

    # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()
    
    await asyncio.gather(*tasks, return_exceptions=True)
    print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
    
async def auto_memory_cleaner():
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç."""
    while True:
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

        # 1. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ (–û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê)
        if len(messages_storage) > MAX_MESSAGES_IN_MEMORY:
            to_delete_count = len(messages_storage) - MAX_MESSAGES_IN_MEMORY
            oldest_post_keys = sorted(messages_storage.keys())[:to_delete_count]
            posts_to_delete_set = set(oldest_post_keys)

            for post_num in oldest_post_keys:
                messages_storage.pop(post_num, None)
                post_to_messages.pop(post_num, None)

            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ---
            # –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è, –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ —É–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏.
            # –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –ø–æ –ø–∞–º—è—Ç–∏ –∏ CPU –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö —Å–ª–æ–≤–∞—Ä—è.
            keys_to_delete_from_m2p = [
                key for key, post_num in message_to_post.items()
                if post_num in posts_to_delete_set
            ]
            for key in keys_to_delete_from_m2p:
                message_to_post.pop(key, None)
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª–µ–Ω–æ {len(oldest_post_keys)} —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤.")

        # 2. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ö–ê–ñ–î–û–ô –î–û–°–ö–ò
        now_utc = datetime.now(UTC)
        for board_id in BOARDS:
            b_data = board_data[board_id]

            # 2.1. –ß–∏—Å—Ç–∏–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ø 100
            if len(b_data['message_counter']) > 100:
                top_users = sorted(b_data['message_counter'].items(),
                                   key=lambda x: x[1],
                                   reverse=True)[:100]
                b_data['message_counter'] = defaultdict(int, top_users)
                print(f"üßπ [{board_id}] –û—á–∏—Å—Ç–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")


            # 2.2. –ß–∏—Å—Ç–∏–º spam_tracker –¥–æ—Å–∫–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            spam_tracker_board = b_data['spam_tracker']
            for user_id in list(spam_tracker_board.keys()):
                # –û–∫–Ω–æ –¥–ª—è —Å–ø–∞–º-—Ç—Ä–µ–∫–µ—Ä–∞ –±–µ—Ä–µ–º –∏–∑ –æ–±—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                window_sec = SPAM_RULES.get('text', {}).get('window_sec', 15)
                window_start = now_utc - timedelta(seconds=window_sec)
                
                spam_tracker_board[user_id] = [
                    t for t in spam_tracker_board[user_id]
                    if t > window_start
                ]
                if not spam_tracker_board[user_id]:
                    del spam_tracker_board[user_id]
            
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            # 2.3. –ß–∏—Å—Ç–∏–º spam_violations –æ—Ç –¥–∞–≤–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            inactive_threshold = now_utc - timedelta(hours=24) # –ü–æ—Ä–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - 24 —á–∞—Å–∞
            spam_violations_board = b_data['spam_violations']
            
            # –°–æ–±–∏—Ä–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
            users_to_purge = [
                user_id for user_id, data in spam_violations_board.items()
                if data.get('last_reset', now_utc) < inactive_threshold
            ]
            
            if users_to_purge:
                for user_id in users_to_purge:
                    spam_violations_board.pop(user_id, None)
                print(f"üßπ [{board_id}] –û—á–∏—Å—Ç–∫–∞ spam_violations: —É–¥–∞–ª–µ–Ω–æ {len(users_to_purge)} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        # 3. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–û–ë–©–ê–Ø)
        gc.collect()

async def board_statistics_broadcaster():
    """–†–∞–∑ –≤ —á–∞—Å —Å–æ–±–∏—Ä–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É."""
    await asyncio.sleep(300)  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 5 –º–∏–Ω—É—Ç

    while True:
        try:
            await asyncio.sleep(3600)  # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å

            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            # 1. –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ—Å—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            now = datetime.now(UTC)
            hour_ago = now - timedelta(hours=1)
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            posts_per_hour = defaultdict(int)

            for post_data in messages_storage.values():
                b_id = post_data.get('board_id')
                if b_id and post_data.get('timestamp', now) > hour_ago:
                    posts_per_hour[b_id] += 1
            
            # 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            stats_lines = []
            for b_id, config in BOARD_CONFIG.items():
                # –ë–µ—Ä–µ–º –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø–æ—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
                hour_stat = posts_per_hour[b_id]
                # –ë–µ—Ä–µ–º –û–ë–©–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ—Å–∫–∏
                total_stat = board_data[b_id].get('board_post_count', 0)
                
                stats_lines.append(
                    f"<b>{config['name']}</b> - {hour_stat} –ø—Å—Ç/—á–∞—Å, –≤—Å–µ–≥–æ: {total_stat}"
                )
            full_stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–æ–∫:\n" + "\n".join(stats_lines)
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            # 3. –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥—è–º –≤—Å–µ—Ö –¥–æ—Å–æ–∫
            header = "### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ###"
            for board_id in BOARDS:
                b_data = board_data[board_id]
                recipients = b_data['users']['active'] - b_data['users']['banned']

                if not recipients:
                    continue

                _, post_num = await format_header(board_id)
                content = {
                    "type": "text",
                    "header": header,
                    "text": full_stats_text,
                    "is_system_message": True
                }
                
                # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
                # –í–∞–∂–Ω–æ: —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ
                messages_storage[post_num] = {
                    'author_id': 0,
                    'timestamp': now,
                    'content': content,
                    'board_id': board_id
                }
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                
                # –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
                await message_queues[board_id].put({
                    "recipients": recipients,
                    "content": content,
                    "post_num": post_num,
                    "board_id": board_id
                })
                
                print(f"‚úÖ [{board_id}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–æ–∫ #{post_num} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ board_statistics_broadcaster: {e}")
            await asyncio.sleep(120)
    
async def setup_pinned_messages(bots: dict[str, Bot]):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞."""
    
    board_links = "\n".join(
        f"<b>{config['name']}</b> {config['description']} - {config['username']}"
        for config in BOARD_CONFIG.values()
    )

    help_with_boards = (
        f"{HELP_TEXT}\n\n"
        f"üåê <b>–í—Å–µ –¥–æ—Å–∫–∏:</b>\n{board_links}"
    )
    
    for board_id, bot_instance in bots.items():
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –¥–æ—Å–∫–∏
        b_data = board_data[board_id]
        # –ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫–µ,
        # –ø–æ—ç—Ç–æ–º—É –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ –∫–∞–∂–¥–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
        
        # –í–º–µ—Å—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ "–∑–∞–∫—Ä–µ–ø–∞", –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–º —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
        # –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ /start
        b_data['start_message_text'] = help_with_boards
        
        print(f"üìå [{board_id}] –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏ –∑–∞–∫—Ä–µ–ø–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.")

async def check_spam(user_id: int, msg: Message, board_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∞–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º –∏ —Å–±—Ä–æ—Å–æ–º —É—Ä–æ–≤–Ω—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ—Å–æ–∫)"""
    b_data = board_data[board_id]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if msg.content_type == 'text':
        msg_type = 'text'
        content = msg.text
    elif msg.content_type == 'sticker':
        msg_type = 'sticker'
        content = None
    elif msg.content_type == 'animation':
        msg_type = 'animation'
        content = None
    elif msg.content_type in ['photo', 'video', 'document'] and msg.caption:
        msg_type = 'text'
        content = msg.caption
    else:
        return True

    rules = SPAM_RULES.get(msg_type)
    if not rules:
        return True

    now = datetime.now(UTC)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ—Å–∫–∏
    if user_id not in b_data['spam_violations'] or not b_data['spam_violations'][user_id]:
        b_data['spam_violations'][user_id] = {
            'level': 0,
            'last_reset': now,
            'last_contents': deque(maxlen=4)
        }
    # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
    if (now - b_data['spam_violations'][user_id]['last_reset']) > timedelta(hours=1):
        b_data['spam_violations'][user_id] = {
            'level': 0,
            'last_reset': now,
            'last_contents': deque(maxlen=4)
        }
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–µ–∫—Å—Ç–æ–≤/–ø–æ–¥–ø–∏—Å–µ–π
    if msg_type == 'text' and content:
        b_data['spam_violations'][user_id]['last_contents'].append(content)
        # 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
        if len(b_data['spam_violations'][user_id]['last_contents']) >= 4:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ ---
            last_three = list(b_data['spam_violations'][user_id]['last_contents'])[-4:]
            if len(set(last_three)) == 1:
                b_data['spam_violations'][user_id]['level'] = min(
                    b_data['spam_violations'][user_id]['level'] + 1,
                    len(rules['penalty']) - 1)
                return False
        # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤
        if len(b_data['spam_violations'][user_id]['last_contents']) == 4:
            unique = set(b_data['spam_violations'][user_id]['last_contents'])
            if len(unique) == 2:
                contents = list(b_data['spam_violations'][user_id]['last_contents'])
                p1 = [contents[0], contents[1]] * 2
                p2 = [contents[1], contents[0]] * 2
                if contents == p1 or contents == p2:
                    b_data['spam_violations'][user_id]['level'] = min(
                        b_data['spam_violations'][user_id]['level'] + 1,
                        len(rules['penalty']) - 1)
                    return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤
    elif msg_type == 'sticker':
        last_items = b_data['last_stickers'][user_id]
        last_items.append(msg.sticker.file_id)
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        # 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
        if len(last_items) >= 4:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
            last_three = list(last_items)[-4:]
            if len(set(last_three)) == 1:
                b_data['spam_violations'][user_id]['level'] = min(
                    b_data['spam_violations'][user_id]['level'] + 1,
                    len(rules['penalty']) - 1)
                return False
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä –≥–∏—Ñ–æ–∫
    elif msg_type == 'animation':
        last_items = b_data['last_animations'][user_id]
        last_items.append(msg.animation.file_id)
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        # 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
        if len(last_items) >= 3:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
            last_three = list(last_items)[-3:]
            if len(set(last_three)) == 1:
                b_data['spam_violations'][user_id]['level'] = min(
                    b_data['spam_violations'][user_id]['level'] + 1,
                    len(rules['penalty']) - 1)
                return False
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    window_start = now - timedelta(seconds=rules['window_sec'])
    b_data['spam_tracker'][user_id] = [t for t in b_data['spam_tracker'][user_id] if t > window_start]
    b_data['spam_tracker'][user_id].append(now)
    if len(b_data['spam_tracker'][user_id]) >= rules['max_per_window']:
        b_data['spam_violations'][user_id]['level'] = min(
            b_data['spam_violations'][user_id]['level'] + 1,
            len(rules['penalty']) - 1)
        return False
    return True

async def apply_penalty(bot_instance: Bot, user_id: int, msg_type: str, board_id: str):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º—É—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é –Ω–∞—Ä—É—à–µ–Ω–∏—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ—Å–æ–∫)"""
    b_data = board_data[board_id]
    rules = SPAM_RULES.get(msg_type, {})
    if not rules:
        return
        
    level = b_data['spam_violations'].get(user_id, {}).get('level', 0)
    level = min(level, len(rules.get('penalty', [])) - 1)
    mute_seconds = rules['penalty'][level] if rules.get('penalty') else 30
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ—Å–∫–∏
    b_data['mutes'][user_id] = datetime.now(UTC) + timedelta(seconds=mute_seconds)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è
    violation_type = {
        'text': "—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∞–º",
        'sticker': "—Å–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏",
        'animation': "—Å–ø–∞–º –≥–∏—Ñ–∫–∞–º–∏"
    }.get(msg_type, "—Å–ø–∞–º")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        if mute_seconds < 60:
            time_str = f"{mute_seconds} —Å–µ–∫"
        elif mute_seconds < 3600:
            time_str = f"{mute_seconds // 60} –º–∏–Ω"
        else:
            time_str = f"{mute_seconds // 3600} —á–∞—Å"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        await bot_instance.send_message(
            user_id,
            f"üö´ –≠–π –ø–∏–¥–æ—Ä —Ç—ã –≤ –º—É—Ç–µ –Ω–∞ {time_str} –∑–∞ {violation_type} –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}\n"
            f"–°–ø–∞–º–∏—à—å –¥–∞–ª—å—à–µ - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω",
            parse_mode="HTML")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º bot_instance –≤ send_moderation_notice (–ø–æ—Ç—Ä–µ–±—É–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–∞ —Å–ª–µ–¥. —à–∞–≥–∞—Ö)
        await send_moderation_notice(user_id, "mute", board_id, duration=time_str)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—É—Ç–µ: {e}")

async def format_header(board_id: str) -> Tuple[str, int]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å—Ç–æ–≤."""
    async with post_counter_lock:
        state['post_counter'] += 1
        post_num = state['post_counter']
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏
        # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫–∞ –≤ –ø–∞–º—è—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        board_data[board_id].setdefault('board_post_count', 0)
        board_data[board_id]['board_post_count'] += 1
    
    b_data = board_data[board_id]

    # –†–µ–∂–∏–º /slavaukraine
    if b_data['slavaukraine_mode']:
        return f"üíôüíõ –üi—Å—Ç ‚Ññ{post_num}", post_num

    # –†–µ–∂–∏–º /zaputin
    if b_data['zaputin_mode']:
        return f"üá∑üá∫ –ü–æ—Å—Ç ‚Ññ{post_num}", post_num

    # –†–µ–∂–∏–º /anime
    if b_data['anime_mode']:
        return f"üå∏ ÊäïÁ®ø {post_num} Áï™", post_num

    # –†–µ–∂–∏–º /suka_blyat
    if b_data['suka_blyat_mode']:
        return f"üí¢ –ü–æ—Å—Ç ‚Ññ{post_num}", post_num

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    rand = random.random()
    if rand < 0.003:
        circle = "üî¥ "
    elif rand < 0.006:
        circle = "üü¢ "
    else:
        circle = ""

    prefix = ""
    rand_prefix = random.random()
    if rand_prefix < 0.005:  # 0.5%
        prefix = "### –ê–î–ú–ò–ù ### "
    elif rand_prefix < 0.008:  # 0.3%
        prefix = "–ê–±—É - "
    elif rand_prefix < 0.01:   # 0.2%
        prefix = "–ü–∏–¥–æ—Ä - "
    elif rand_prefix < 0.012:  # 0.2%
        prefix = "### –î–ñ–£–õ–£–ü ### "
    elif rand_prefix < 0.014:   # 0.2%
        prefix = "### –•—É–µ—Å–æ—Å ### "
    elif rand_prefix < 0.016:   # 0.2%
        prefix = "–ü—ã–Ω—è - "
    elif rand_prefix < 0.018:   # 0.2%
        prefix = "–ù–∞—Ä–∏–º–∞–Ω –ù–∞–º–∞–∑–æ–≤ - "
    elif rand_prefix < 0.021:
        prefix = "–ò–ú–ü–ï–†–ê–¢–û–† –ö–û–ù–ê–ù - "
    elif rand_prefix < 0.023:
        prefix = "–ê–Ω—Ç–æ–Ω –ë–∞–±–∫–∏–Ω - "
    elif rand_prefix < 0.025:
        prefix = "### –ù–ê–†–ò–ú–ê–ù –ù–ê–ú–ê–ó–û–í ### "
    elif rand_prefix < 0.027:
        prefix = "### –ü–£–¢–ò–ù ### "
    elif rand_prefix < 0.028:
        prefix = "–ì–µ–π - "
    elif rand_prefix < 0.030:
        prefix = "–ê–Ω–∞—Ä—Ö–∏—Å—Ç - "
    elif rand_prefix < 0.033:
        prefix = "### –ò–º–±–µ—Ü–∏–ª ### "
    elif rand_prefix < 0.035:
        prefix = "### –ß–ú–û ### "
    elif rand_prefix < 0.037:
        prefix = "### –û–ù–ê–ù–ò–°–¢ ### "
    elif rand_prefix < 0.040:
        prefix = "### –ß–ï–ß–ï–ù–ï–¶ ### "
    elif rand_prefix < 0.042:
        prefix = "–ê–ê–ê–ê–ê–ê–ê–ê - "
    elif rand_prefix < 0.044:
        prefix = "### –ê–Ω–∏–º–µ –¥–µ–≤–æ—á–∫–∞ ### "

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_text = f"{circle}{prefix}–ü–æ—Å—Ç ‚Ññ{post_num}"
    return header_text, post_num

async def delete_user_posts(bot_instance: Bot, user_id: int, time_period_minutes: int, board_id: str) -> int:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ö–û–ù–ö–†–ï–¢–ù–û–ô –¥–æ—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –Ω—É–∂–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞."""
    try:
        time_threshold = datetime.now(UTC) - timedelta(minutes=time_period_minutes)
        posts_to_delete = []
        deleted_messages = 0

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –ø–æ .items(), –∏–∑–±–µ–≥–∞—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–ø–∏–∏ —Å–ª–æ–≤–∞—Ä—è –≤ –ø–∞–º—è—Ç–∏.
        for post_num, post_data in messages_storage.items():
            post_time = post_data.get('timestamp')
            if not post_time:
                continue

            if (post_data.get('author_id') == user_id and
                post_data.get('board_id') == board_id and
                post_time >= time_threshold):
                posts_to_delete.append(post_num)
        
        if not posts_to_delete:
            return 0

        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        messages_to_delete = []
        for post_num in posts_to_delete:
            if post_num in post_to_messages:
                for uid, mid in post_to_messages[post_num].items():
                    messages_to_delete.append((uid, mid))

        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for (uid, mid) in messages_to_delete:
            try:
                await bot_instance.delete_message(uid, mid)
                deleted_messages += 1
            except (TelegramBadRequest, TelegramForbiddenError):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                continue
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {mid} —É {uid}: {e}")

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â ---
        # 1. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ message_to_post, –∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ (uid, mid).
        #    –≠—Ç–æ –Ω–∞–º–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, —á–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
        for uid, mid in messages_to_delete:
            message_to_post.pop((uid, mid), None)
            
        # 2. –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –∏–∑ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â.
        posts_to_delete_set = set(posts_to_delete)
        for post_num in posts_to_delete_set:
            post_to_messages.pop(post_num, None)
            messages_storage.pop(post_num, None)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        return deleted_messages
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_user_posts: {e}")
        return 0
        
async def delete_single_post(post_num: int, bot_instance: Bot) -> int:
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç (–∏ –≤—Å–µ –µ–≥–æ –∫–æ–ø–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)."""
    if post_num not in post_to_messages:
        return 0

    deleted_count = 0
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, messages_to_delete - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (uid, mid)
    messages_to_delete = list(post_to_messages.get(post_num, {}).items())

    for uid, mid in messages_to_delete:
        try:
            await bot_instance.delete_message(uid, mid)
            deleted_count += 1
        except (TelegramBadRequest, TelegramForbiddenError):
            continue  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {mid} —É {uid}: {e}")

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ message_to_post ---
    # –û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
    messages_storage.pop(post_num, None)
    post_to_messages.pop(post_num, None)

    # –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞ `message_to_post`, –º—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º
    # —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Å–ø–∏—Å–æ–∫ `messages_to_delete` –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    # –ö–ª—é—á –¥–ª—è `message_to_post` - —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ (uid, mid).
    for uid, mid in messages_to_delete:
        message_to_post.pop((uid, mid), None)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    return deleted_count
    
async def send_moderation_notice(user_id: int, action: str, board_id: str, duration: str = None, deleted_posts: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –≤ —á–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏."""
    b_data = board_data[board_id]
    if not b_data['users']['active']:
        return

    _, post_num = await format_header(board_id)
    header = "### –ê–¥–º–∏–Ω ###"

    if action == "ban":
        text = (f"üö® –•—É–µ—Å–æ—Å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º. –ü–æ–º—è–Ω–µ–º.")
    elif action == "mute":
        text = (f"üîá –ü–∏–¥–æ—Ä–∞—Å–∞ –∑–∞–º—É—Ç–∏–ª–∏ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ")
    else:
        return

    content = {
        'type': 'text',
        'header': header,
        'text': text,
        'is_system_message': True
    }

    messages_storage[post_num] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data["users"]["active"],
        "content": content,
        "post_num": post_num,
        "board_id": board_id
    })

async def _apply_mode_transformations(content: dict, board_id: str) -> dict:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ (–∞–Ω–∏–º–µ, –∏ —Ç.–¥.)
    –∫ –ø–æ–ª—è–º 'text' –∏ 'caption' –≤ —Å–ª–æ–≤–∞—Ä–µ content.
    """
    b_data = board_data[board_id]
    modified_content = content.copy()

    # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –∫ 'text' ---
    if 'text' in modified_content and modified_content['text']:
        text = modified_content['text']
        if b_data['anime_mode']:
            text = anime_transform(text)
        elif b_data['slavaukraine_mode']:
            text = ukrainian_transform(text)
        elif b_data['zaputin_mode']:
            text = zaputin_transform(text)
        elif b_data['suka_blyat_mode']:
            words = text.split()
            for i in range(len(words)):
                if random.random() < 0.3: words[i] = random.choice(MAT_WORDS)
            text = ' '.join(words)
            # –°—á–µ—Ç—á–∏–∫ –∏ –¥–æ–±–∞–≤–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è suka_blyat –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ send_message_to_users,
            # —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.
        modified_content['text'] = text

    # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –∫ 'caption' ---
    if 'caption' in modified_content and modified_content['caption']:
        caption = modified_content['caption']
        if b_data['anime_mode']:
            caption = anime_transform(caption)
        elif b_data['slavaukraine_mode']:
            caption = ukrainian_transform(caption)
        elif b_data['zaputin_mode']:
            caption = zaputin_transform(caption)
        elif b_data['suka_blyat_mode']:
            words = caption.split()
            for i in range(len(words)):
                if random.random() < 0.3: words[i] = random.choice(MAT_WORDS)
            caption = ' '.join(words)
        modified_content['caption'] = caption

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ ---
    # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ send_message_to_users, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç
    # –∫–æ –≤—Å–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–µ.
    # –ù–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞/–ø–æ–¥–ø–∏—Å–∏ —Å–¥–µ–ª–∞–Ω—ã –∑–¥–µ—Å—å.

    return modified_content

async def send_message_to_users(
    bot_instance: Bot,
    recipients: set[int],
    content: dict,
    reply_info: dict | None = None,
) -> list:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤—ã–∑–æ–≤–æ–º)."""
    if not recipients or not content or 'type' not in content:
        return []

    board_id = next((b_id for b_id, config in BOARD_CONFIG.items() if config['token'] == bot_instance.token), None)
    if not board_id:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å–∫—É –¥–ª—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º ...{bot_instance.token[-6:]}")
        return []

    b_data = board_data[board_id]
    modified_content = content.copy()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ (—ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è)
    if b_data['suka_blyat_mode']:
        b_data['suka_blyat_counter'] += 1
        if b_data['suka_blyat_counter'] % 3 == 0:
            if 'text' in modified_content and modified_content['text']: modified_content['text'] += " ... –°–£–ö–ê –ë–õ–Ø–¢–¨!"
            elif 'caption' in modified_content and modified_content['caption']: modified_content['caption'] += " ... –°–£–ö–ê –ë–õ–Ø–¢–¨!"
    if b_data['slavaukraine_mode'] and random.random() < 0.3:
        phrase = "\n\n" + random.choice(UKRAINIAN_PHRASES)
        if 'text' in modified_content and modified_content['text']: modified_content['text'] += phrase
        elif 'caption' in modified_content and modified_content['caption']: modified_content['caption'] += phrase
    elif b_data['zaputin_mode'] and random.random() < 0.3:
        phrase = "\n\n" + random.choice(PATRIOTIC_PHRASES)
        if 'text' in modified_content and modified_content['text']: modified_content['text'] += phrase
        elif 'caption' in modified_content and modified_content['caption']: modified_content['caption'] += phrase

    blocked_users = set()
    active_recipients = {uid for uid in recipients if uid not in b_data['users']['banned']}
    if not active_recipients:
        return []

    async def really_send(uid: int, reply_to: int | None):
        try:
            ct_raw = modified_content["type"]
            ct = ct_raw.value if hasattr(ct_raw, 'value') else ct_raw
            
            header_text = modified_content['header']
            head = f"<i>{header_text}</i>"

            reply_to_post = modified_content.get('reply_to_post')
            original_author = messages_storage.get(reply_to_post, {}).get('author_id') if reply_to_post else None

            if uid == original_author:
                head = head.replace("–ü–æ—Å—Ç", "üî¥ –ü–æ—Å—Ç")

            reply_text = f">>{reply_to_post} (You)\n" if uid == original_author else (f">>{reply_to_post}\n" if reply_to_post else "")
            main_text_raw = modified_content.get('text') or modified_content.get('caption') or ''
            main_text = add_you_to_my_posts(main_text_raw, uid)
            
            if ct == "media_group":
                if not modified_content.get('media'): return None
                builder = MediaGroupBuilder()
                full_text_for_group = f"{head}\n\n{reply_text}{main_text}" if (reply_text or main_text) else head
                for idx, media in enumerate(modified_content['media']):
                    caption = full_text_for_group if idx == 0 else None
                    builder.add(type=media['type'], media=media['file_id'], caption=caption, parse_mode="HTML" if caption else None)
                return await bot_instance.send_media_group(chat_id=uid, media=builder.build(), reply_to_message_id=reply_to)
            
            method_name = f"send_{ct}"
            if ct == 'text':
                method_name = 'send_message'

            send_method = getattr(bot_instance, method_name)
            kwargs = {'reply_to_message_id': reply_to}
            
            full_text = f"{head}\n\n{reply_text}{main_text}" if (reply_text or main_text) else head

            if ct == 'text':
                kwargs.update(text=full_text, parse_mode="HTML")
            elif ct in ['photo', 'video', 'animation', 'document', 'audio']:
                if len(full_text) > 1024: full_text = full_text[:1021] + "..."
                kwargs.update(caption=full_text, parse_mode="HTML")
                file_source = modified_content.get('image_url') or modified_content.get("file_id")
                kwargs[ct] = file_source
            elif ct == 'voice':
                kwargs.update(caption=head, parse_mode="HTML")
                kwargs[ct] = modified_content["file_id"]
            elif ct in ['sticker', 'video_note']:
                kwargs[ct] = modified_content["file_id"]
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {ct}")
                return None
                
            return await send_method(uid, **kwargs)

        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after + 1)
            return await really_send(uid, reply_to)
        except TelegramForbiddenError:
            blocked_users.add(uid)
            return None
        except TelegramBadRequest as e:
            if "VOICE_MESSAGES_FORBIDDEN" in e.message and modified_content.get("type") == "voice":
                print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–µ—Ç–∏–ª –≥–æ–ª–æ—Å–æ–≤—ã–µ. –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –∞—É–¥–∏–æ...")
                try:
                    return await bot_instance.send_audio(
                        chat_id=uid,
                        audio=modified_content["file_id"],
                        caption=f"<i>{modified_content['header']}</i>",
                        parse_mode="HTML",
                        reply_to_message_id=reply_to
                    )
                except Exception as audio_e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ –¥–ª—è {uid}: {audio_e}")
                    return None
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            elif "VIDEO_MESSAGES_FORBIDDEN" in e.message and modified_content.get("type") == "video_note":
                print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–µ—Ç–∏–ª –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –≤–∏–¥–µ–æ...")
                try:
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –Ω–æ —É–∂–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
                    return await bot_instance.send_video(
                        chat_id=uid,
                        video=modified_content["file_id"],
                        caption=f"<i>{modified_content['header']}</i>", # "–ö—Ä—É–∂–∫–∏" –Ω–µ –∏–º–µ—é—Ç –ø–æ–¥–ø–∏—Å–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        parse_mode="HTML",
                        reply_to_message_id=reply_to
                    )
                except Exception as video_e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ –¥–ª—è {uid}: {video_e}")
                    return None
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (BadRequest) {uid} –±–æ—Ç–æ–º {bot_instance.id}: {e}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid} –±–æ—Ç–æ–º {bot_instance.id}: {e}")
            return None

    semaphore = asyncio.Semaphore(100)
    async def send_with_semaphore(uid):
        async with semaphore:
            reply_to = reply_info.get(uid) if reply_info else None
            return await really_send(uid, reply_to)

    tasks = [send_with_semaphore(uid) for uid in active_recipients]
    results = await asyncio.gather(*tasks)

    if content.get('post_num'):
        post_num = content['post_num']
        for uid, msg in zip(active_recipients, results):
            if not msg: continue
            messages_to_save = msg if isinstance(msg, list) else [msg]
            for m in messages_to_save:
                post_to_messages.setdefault(post_num, {})[uid] = m.message_id
                message_to_post[(uid, m.message_id)] = post_num

    if blocked_users:
        for uid in blocked_users:
            if uid in b_data['users']['active']:
                b_data['users']['active'].discard(uid)
                print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")

    return list(zip(active_recipients, results))
    
async def message_broadcaster(bots: dict[str, Bot]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏."""
    tasks = [
        asyncio.create_task(message_worker(f"Worker-{board_id}", board_id, bot_instance))
        for board_id, bot_instance in bots.items()
    ]
    await asyncio.gather(*tasks)

async def message_worker(worker_name: str, board_id: str, bot_instance: Bot):
    """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏."""
    queue = message_queues[board_id]
    b_data = board_data[board_id]
    
    while True:
        try:
            msg_data = await queue.get()
            if not msg_data:
                await asyncio.sleep(0.05)
                continue

            if not await validate_message_format(msg_data):
                continue

            recipients = msg_data['recipients']
            content = msg_data['content']
            post_num = msg_data['post_num']  # –ò–∑–≤–ª–µ–∫–∞–µ–º post_num
            reply_info = msg_data.get('reply_info', {})
            active_recipients = {uid for uid in recipients if uid not in b_data['users']['banned']}

            if not active_recipients:
                continue
            
            # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
            # –î–æ–±–∞–≤–ª—è–µ–º post_num –≤ —Å–ª–æ–≤–∞—Ä—å content –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            content['post_num'] = post_num

            await send_message_to_users(
                bot_instance,
                active_recipients,
                content,
                reply_info
            )
        except Exception as e:
            print(f"{worker_name} | ‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:200]}")
            await asyncio.sleep(1)
            
async def validate_message_format(msg_data: dict) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not isinstance(msg_data, dict):
        return False

    required = ['recipients', 'content', 'post_num']
    if any(key not in msg_data for key in required):
        return False

    if not isinstance(msg_data['recipients'], (set, list)):
        return False

    if not isinstance(msg_data['content'], dict):
        return False

    if (msg_data['content'].get('type') == 'media_group' and 
        not isinstance(msg_data['content'].get('media'), list)):
        return False

    return True

async def process_successful_messages(post_num: int, results: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)"""
    post_to_messages.setdefault(post_num, {})

    for uid, msg in results:
        if not msg:
            continue

        if isinstance(msg, list):  # –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞
            post_to_messages[post_num][uid] = msg[0].message_id
            for m in msg:
                message_to_post[(uid, m.message_id)] = post_num
        else:  # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            post_to_messages[post_num][uid] = msg.message_id
            message_to_post[(uid, msg.message_id)] = post_num

async def fetch_dvach_thread(board: str, only_new: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–¥ —Å –¥–≤–∞—á–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    f'https://2ch.hk/{board}/catalog.json') as response:
                if response.status != 200:
                    return None

                data = await response.json()

                if not data or 'threads' not in data:
                    return None

                threads = data['threads']
                if not threads:
                    return None

                if only_new and board == 'news':
                    threads.sort(key=lambda x: x.get('timestamp', 0),
                                 reverse=True)
                    threads = threads[:10]

                thread = random.choice(threads)
                thread_num = thread.get('num')

                if not thread_num:
                    return None

                async with session.get(
                        f'https://2ch.hk/{board}/res/{thread_num}.json'
                ) as thread_response:
                    if thread_response.status != 200:
                        return None

                    thread_data = await thread_response.json()

                    if not thread_data or 'threads' not in thread_data:
                        return None

                    posts = thread_data['threads'][0]['posts']
                    if not posts:
                        return None

                    op_post = posts[0]
                    text = op_post.get('comment', '')
                    text = re.sub(r'<[^>]+>', '', text)
                    text = text.replace('&gt;', '>')
                    text = text.replace('&lt;', '<')
                    text = text.replace('&amp;', '&')
                    text = text.replace('&quot;', '"')
                    text = text.replace('&#47;', '/')
                    text = text.replace('<br>', '\n')

                    if len(text) > 500:
                        text = text[:500] + '...'

                    link = f"https://2ch.hk/{board}/res/{thread_num}.html"

                    if board == 'news' or random.random() > 0.5:
                        result = f"–¢—Ä–µ–¥ —Å /{board}/:\n\n"
                        result += f"{text}\n\n"
                        result += link
                    else:
                        comment = random.choice(THREAD_COMMENTS)
                        result = f"{link}\n\n{comment}"
                        if text and random.random() > 0.3:
                            result = f"{text}\n\n{link}\n\n{comment}"

                    return result

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ —Å /{board}/: {e}")
        return None

async def dvach_thread_poster():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (—Ä–∞–∑ –≤ 2-5 —á–∞—Å–æ–≤) –ø–æ—Å—Ç–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–¥ —Å 2ch
    –Ω–∞ –°–õ–£–ß–ê–ô–ù–£–Æ –∏–∑ –Ω–∞—à–∏—Ö –¥–æ—Å–æ–∫.
    """
    await asyncio.sleep(300) # 5 –º–∏–Ω—É—Ç –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # –î–æ—Å–∫–∏ 2ch, —Å –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å —Ç—Ä–µ–¥—ã
    SOURCE_BOARDS = ['b', 'po', 'a', 'sex', 'vg', 'news']

    while True:
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 2 –¥–æ 5 —á–∞—Å–æ–≤
            delay = random.randint(7200, 18000)
            await asyncio.sleep(delay)

            # 1. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å–∫—É –ò–°–¢–û–ß–ù–ò–ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            source_board = random.choice(SOURCE_BOARDS)
            
            # 2. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å–∫—É –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –∏–∑ –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤
            destination_board_id = random.choice(BOARDS)
            
            b_data = board_data[destination_board_id]
            recipients = b_data['users']['active'] - b_data['users']['banned']

            if not recipients:
                print(f"‚ÑπÔ∏è [{destination_board_id}] –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Å—Ç–∏–Ω–≥–∞ —Ç—Ä–µ–¥–∞ —Å 2ch, –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")
                continue

            # 3. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–¥
            thread_text = await fetch_dvach_thread(source_board)
            if not thread_text:
                continue
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            header, post_num = await format_header(destination_board_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header_with_source = f"{header} (/{source_board}/)"

            content = {
                'type': 'text',
                'header': header_with_source,
                'text': thread_text, # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            }

            messages_storage[post_num] = {
                'author_id': 0, # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                'timestamp': datetime.now(UTC),
                'content': content,
                'board_id': destination_board_id
            }

            await message_queues[destination_board_id].put({
                'recipients': recipients,
                'content': content,
                'post_num': post_num,
                'board_id': destination_board_id
            })

            print(f"‚úÖ –¢—Ä–µ–¥ —Å /{source_board}/ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–æ—Å–∫–∏ /{destination_board_id}/")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ dvach_thread_poster: {e}")
            await asyncio.sleep(300) # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def motivation_broadcaster():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è."""
    await asyncio.sleep(15)  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    async def board_motivation_worker(board_id: str):
        """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏."""
        while True:
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 2 –¥–æ 4 —á–∞—Å–æ–≤
                delay = random.randint(7200, 14400)
                await asyncio.sleep(delay)
                
                b_data = board_data[board_id]
                recipients = b_data['users']['active'] - b_data['users']['banned']

                if not recipients:
                    # print(f"‚ÑπÔ∏è [{board_id}] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    continue

                motivation = random.choice(MOTIVATIONAL_MESSAGES)
                invite_text = random.choice(INVITE_TEXTS)

                now = datetime.now(MSK)
                date_str = now.strftime("%d/%m/%y")
                weekday = WEEKDAYS[now.weekday()]
                time_str = now.strftime("%H:%M:%S")
                
                header = f"<i>### –ê–î–ú–ò–ù ### {date_str} ({weekday}) {time_str}</i>"
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é format_header –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞
                _, post_num = await format_header(board_id)

                message_text = (
                    f"üí≠ {motivation}\n\n"
                    f"–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω—á–∏–∫–∞–º:\n"
                    f"<code>{escape_html(invite_text)}</code>"
                )

                content = {
                    'type': 'text',
                    'header': header,
                    'text': message_text,
                    'is_system_message': True # –§–ª–∞–≥ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏
                await message_queues[board_id].put({
                    'recipients': recipients,
                    'content': content,
                    'post_num': post_num,
                    'reply_info': None,
                    'board_id': board_id
                })

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                messages_storage[post_num] = {
                    'author_id': 0,
                    'timestamp': datetime.now(UTC),
                    'content': content,
                    'board_id': board_id
                }

                print(f"‚úÖ [{board_id}] –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{post_num} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")

            except Exception as e:
                print(f"‚ùå [{board_id}] –û—à–∏–±–∫–∞ –≤ motivation_broadcaster: {e}")
                await asyncio.sleep(120)  # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –≤–æ—Ä–∫–µ—Ä—É –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É
    tasks = [asyncio.create_task(board_motivation_worker(bid)) for bid in BOARDS]
    await asyncio.gather(*tasks)
    
async def check_cooldown(message: Message, board_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏"""
    b_data = board_data[board_id]
    last_activation = b_data.get('last_mode_activation')

    if last_activation is None:
        return True

    elapsed = (datetime.now(UTC) - last_activation).total_seconds()
    if elapsed < MODE_COOLDOWN:
        time_left = MODE_COOLDOWN - elapsed
        minutes = int(time_left // 60)
        seconds = int(time_left % 60)

        try:
            await message.answer(
                f"‚è≥ –≠–π –ø–∏–¥–æ—Ä, –Ω–µ —Å–ø–µ—à–∏! –†–µ–∂–∏–º—ã –Ω–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å.\n"
                f"–ñ–¥–∏ –µ—â–µ: {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥\n\n"
                f"–ê –ø–æ–∫–∞ –ø–æ—Å–∏–¥–∏ –≤ —É–≥–ª—É –∏ –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞: {e}")

        await message.delete()
        return False

    return True

def get_board_id(telegram_object: types.Message | types.CallbackQuery) -> str | None:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID –¥–æ—Å–∫–∏ ('b', 'po', etc.) –ø–æ –æ–±—ä–µ–∫—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫–∞.
    –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏.
    """
    bot_token = telegram_object.bot.token
    for board_id, config in BOARD_CONFIG.items():
        if config['token'] == bot_token:
            return board_id
    
    # –≠—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    print(f"‚ö†Ô∏è CRITICAL: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å board_id –¥–ª—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–º—Å—è –Ω–∞ ...{bot_token[-6:]}")
    return None

# ========== –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    board_id = get_board_id(message)
    if not board_id: return
    
    b_data = board_data[board_id]

    if user_id not in b_data['users']['active']:
        b_data['users']['active'].add(user_id)
        print(f"‚úÖ [{board_id}] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ /start: ID {user_id}")
    
    start_text = b_data.get('start_message_text', "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–ì–ê–ß!")
    
    await message.answer(start_text, parse_mode="HTML", disable_web_page_preview=True)
    await message.delete()

    

AHE_EYES = ['üòµ', 'ü§§', 'üò´', 'üò©', 'üò≥', 'üòñ', 'ü•µ']
AHE_TONGUE = ['üëÖ', 'üí¶', 'üòõ', 'ü§™', 'üòù']
AHE_EXTRA = ['üíï', 'üíó', '‚ú®', 'ü•¥', '']


@dp.message(Command("face"))
async def cmd_face(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return

    face = (secrets.choice(AHE_EYES) + secrets.choice(AHE_TONGUE) +
            secrets.choice(AHE_EXTRA))

    header, pnum = await format_header(board_id)
    content = {"type": "text", "header": header, "text": face}
    
    messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}
    
    await message_queues[board_id].put({
        "recipients": board_data[board_id]['users']['active'],
        "content": content,
        "post_num": pnum,
        "board_id": board_id
    })
    await message.delete()


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å–∫–∏
    start_text = board_data[board_id].get('start_message_text', "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–º–æ—â–∏.")
    await message.answer(start_text, parse_mode="HTML", disable_web_page_preview=True)
    await message.delete()


@dp.message(Command("roll"))
async def cmd_roll(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return
    
    result = random.randint(1, 100)

    header, pnum = await format_header(board_id)
    content = {"type": "text", "header": header, "text": f"üé≤ –ù–∞—Ä–æ–ª–ª–∏–ª: {result}"}

    messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}

    await message_queues[board_id].put({
        "recipients": board_data[board_id]['users']['active'],
        "content": content,
        "post_num": pnum,
        "board_id": board_id
    })
    await message.delete()

@dp.message(Command("slavaukraine"))
async def cmd_slavaukraine(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return

    b_data = board_data[board_id]

    if not await check_cooldown(message, board_id):
        return

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö –Ω–∞ –≠–¢–û–ô –¥–æ—Å–∫–µ
    b_data['slavaukraine_mode'] = True
    b_data['last_mode_activation'] = datetime.now(UTC)
    b_data['zaputin_mode'] = False
    b_data['suka_blyat_mode'] = False
    b_data['anime_mode'] = False

    _, pnum = await format_header(board_id)
    header = "### –ê–¥–º–∏–Ω ###"

    activation_text = (
        "–£–í–ê–ì–ê! –ê–ö–¢–ò–í–û–í–ê–ù–û –£–ö–†–ê–á–ù–°–¨–ö–ò–ô –†–ï–ñ–ò–ú!\n\n"
        "üíôüíõ –°–õ–ê–í–ê –£–ö–†–ê–á–ù–Ü! üíõüíô\n"
        "–ì–ï–†–û–Ø–ú –°–õ–ê–í–ê!\n\n"
        "–•—Ç–æ –Ω–µ —Å–∫–∞–∂–µ '–ü—É—Ç—ñ–Ω —Ö—É–π–ª–æ' - —Ç–æ–π –º–æ—Å–∫–∞–ª—å —ñ –ø—ñ–¥–∞—Ä!"
    )

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    content = {
        "type": "text",
        "header": header,
        "text": activation_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    asyncio.create_task(disable_slavaukraine_mode(310, board_id))
    await message.delete()


async def disable_slavaukraine_mode(delay: int, board_id: str):
    await asyncio.sleep(delay)
    
    b_data = board_data[board_id]
    b_data['slavaukraine_mode'] = False

    _, pnum = await format_header(board_id)
    header = "### –ê–¥–º–∏–Ω ###"

    end_text = (
        "üíÄ –í–∏–∑–≥ —Ö–æ—Ö–ª–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω!\n\n"
        "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ç—Ä—ë–ø—É."
    )
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    content = {
        "type": "text",
        "header": header,
        "text": end_text
    }
    
    messages_storage[pnum] = {
        'author_id': 0, # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }
    
    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é–±—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–µ."""
    board_id = get_board_id(message)
    if not board_id: return

    if not is_admin(message.from_user.id, board_id):
        await message.delete()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–∏
    b_data = board_data[board_id]

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –≠–¢–û–ô –¥–æ—Å–∫–∏
    b_data['zaputin_mode'] = False
    b_data['suka_blyat_mode'] = False
    b_data['slavaukraine_mode'] = False
    b_data['anime_mode'] = False
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
    b_data['last_mode_activation'] = None

    await message.answer(f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    await message.delete()

@dp.message(Command("invite"))
async def cmd_invite(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return

    board_username = BOARD_CONFIG[board_id]['username']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    invite_texts_specific = [
        f"–ê–Ω–æ–Ω, –∑–∞–ª–µ—Ç–∞–π –≤ –¢–≥–∞—á {board_username}\n–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ",
        f"–ï—Å—Ç—å —Ç–µ–ª–µ–≥–∞? –ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? \n{board_username} - –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
        f"–£—Å—Ç–∞–ª –æ—Ç —Ü–µ–Ω–∑—É—Ä—ã? –•–æ—á–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏?\n –í–µ–ª–∫–∞–º –≤ –¢–≥–∞—á - {board_username} - –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ",
        f"{board_username} - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    ]
    invite_text = random.choice(invite_texts_specific)

    await message.answer(
        f"üì® <b>–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–Ω–æ–Ω–æ–≤ –Ω–∞ —ç—Ç—É –¥–æ—Å–∫—É:</b>\n\n"
        f"<code>{escape_html(invite_text)}</code>\n\n"
        f"<i>–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å</i>",
        parse_mode="HTML")
    await message.delete() # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É /invite


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return
    
    b_data = board_data[board_id]
    total_users_on_board = len(b_data['users']['active'])
    
    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–º–µ–Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–∞ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø ---
    total_posts_on_board = b_data.get('board_post_count', 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å–∫–∏ 'b'
    total_users_b = len(board_data['b']['users']['active'])

    stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏ {BOARD_CONFIG[board_id]['name']}:\n\n"
                  f"üë• –ê–Ω–æ–Ω–∏–º–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ: {total_users_on_board}\n"
                  f"üë• –í—Å–µ–≥–æ –∞–Ω–æ–Ω–æ–≤ –≤ –¢–≥–∞—á–µ: {total_users_b}\n"
                  f"üì® –ü–æ—Å—Ç–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ: {total_posts_on_board}\n"
                  f"üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–≥–∞—á–µ: {state['post_counter']}")

    header, pnum = await format_header(board_id)
    content = {'type': 'text', 'header': header, 'text': stats_text}
    
    messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}

    await message_queues[board_id].put({
        'recipients': b_data['users']['active'],
        'content': content,
        'post_num': pnum,
        'board_id': board_id
    })
    await message.delete()

@dp.message(Command("anime"))
async def cmd_anime(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return

    b_data = board_data[board_id]

    if not await check_cooldown(message, board_id):
        return

    b_data['anime_mode'] = True
    b_data['zaputin_mode'] = False
    b_data['slavaukraine_mode'] = False
    b_data['suka_blyat_mode'] = False
    b_data['last_mode_activation'] = datetime.now(UTC)

    header = "### ÁÆ°ÁêÜËÄÖ ###"
    _, pnum = await format_header(board_id)

    activation_text = (
        "„Å´„ÇÉ„ÅÇÔΩûÔºÅ„Ç¢„Éã„É°„É¢„Éº„Éâ„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà„Åï„Çå„Åæ„Åó„ÅüÔºÅ\n\n"
        "^_^"
    )

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    content = {
        "type": "text",
        "header": header,
        "text": activation_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    asyncio.create_task(disable_anime_mode(330, board_id))
    await message.delete()


async def disable_anime_mode(delay: int, board_id: str):
    await asyncio.sleep(delay)
    
    b_data = board_data[board_id]
    b_data['anime_mode'] = False

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    end_text = (
        "„Ç¢„Éã„É°„É¢„Éº„Éâ„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n\n"
        "ÈÄöÂ∏∏„ÅÆ„ÉÅ„É£„ÉÉ„Éà„Å´Êàª„Çä„Åæ„ÅôÔºÅ"
    )

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    content = {
        "type": "text",
        "header": header,
        "text": end_text
    }

    messages_storage[pnum] = {
        'author_id': 0, # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
@dp.message(Command("deanon"))
async def cmd_deanon(message: Message):
    board_id = get_board_id(message)
    if not board_id: return
    
    if not message.reply_to_message:
        await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∞!")
        await message.delete()
        return

    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    target_mid = message.reply_to_message.message_id
    user_id = message.from_user.id
    target_post = message_to_post.get((user_id, target_mid))

    if not target_post or target_post not in messages_storage:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —á—É–∂—É—é –∫–æ–ø–∏—é –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        await message.delete()
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    original_author_id = messages_storage[target_post].get('author_id')

    # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–µ–∞–Ω–æ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É –∫–æ—Ç–æ—Ä—ã—Ö –∞–≤—Ç–æ—Ä 0)
    if original_author_id == 0:
        await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –¥–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        await message.delete()
        return
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    name, surname, city, profession, fetish, detail = generate_deanon_info()
    ip = f"{random.randint(10,250)}.{random.randint(0,255)}.{random.randint(0,255)}.{random.randint(0,255)}"
    age = random.randint(18, 45)
    
    deanon_text = (f"\n–≠—Ç–æ–≥–æ –∞–Ω–æ–Ω–∞ –∑–æ–≤—É—Ç: {name} {surname}\n"
                   f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                   f"–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {city}\n"
                   f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                   f"–§–µ—Ç–∏—à: {fetish}\n"
                   f"IP-–∞–¥—Ä–µ—Å: {ip}\n"
                   f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º: {detail}")

    header = "### –î–ï–ê–ù–û–ù ###"
    _, pnum = await format_header(board_id)
    content = {"type": "text", "header": header, "text": deanon_text, "reply_to_post": target_post}

    messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}

    # –î–µ–∞–Ω–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Ç—É –∂–µ –¥–æ—Å–∫—É, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
    await message_queues[board_id].put({
        "recipients": board_data[board_id]['users']['active'],
        "content": content,
        "post_num": pnum,
        "reply_info": post_to_messages.get(target_post, {}),
        "board_id": board_id
    })
    await message.delete()
    
@dp.message(Command("zaputin"))
async def cmd_zaputin(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return

    b_data = board_data[board_id]

    if not await check_cooldown(message, board_id):
        return

    b_data['zaputin_mode'] = True
    b_data['suka_blyat_mode'] = False
    b_data['slavaukraine_mode'] = False
    b_data['anime_mode'] = False
    b_data['last_mode_activation'] = datetime.now(UTC)

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    activation_text = (
        "üá∑üá∫ –°–õ–ê–í–ê –†–û–°–°–ò–ò! –ü–£–¢–ò–ù - –ù–ê–® –ü–†–ï–ó–ò–î–ï–ù–¢! üá∑üá∫\n\n"
        "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∫—Ä–µ–º–ª–µ–±–æ—Ç–æ–≤! –í—Å–µ –Ω–µ—Å–æ–≥–ª–∞—Å–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ä–∞–≤–Ω–µ–Ω—ã –∫ –ø–∏–¥–æ—Ä–∞—Å–∞–º –∏ —É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç–∞–º!"
    )

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    content = {
        "type": "text",
        "header": header,
        "text": activation_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    asyncio.create_task(disable_zaputin_mode(309, board_id))
    await message.delete()


async def disable_zaputin_mode(delay: int, board_id: str):
    await asyncio.sleep(delay)
    b_data = board_data[board_id]
    b_data['zaputin_mode'] = False

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    end_text = "üíÄ –ë—É–Ω—Ç –∫—Ä–µ–º–ª–µ–±–æ—Ç–æ–≤ –æ–∫–æ–Ω—á–∏–ª—Å—è. –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ, –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã."

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    content = {
        "type": "text",
        "header": header,
        "text": end_text
    }

    messages_storage[pnum] = {
        'author_id': 0, # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---```

@dp.message(Command("suka_blyat"))
async def cmd_suka_blyat(message: types.Message):
    board_id = get_board_id(message)
    if not board_id: return

    b_data = board_data[board_id]

    if not await check_cooldown(message, board_id):
        return

    b_data['suka_blyat_mode'] = True
    b_data['zaputin_mode'] = False
    b_data['slavaukraine_mode'] = False
    b_data['anime_mode'] = False
    b_data['last_mode_activation'] = datetime.now(UTC)

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    activation_text = (
        "üí¢üí¢üí¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –°–£–ö–ê –ë–õ–Ø–¢–¨! üí¢üí¢üí¢\n\n"
        "–í—Å–µ—Ö –Ω–∞—Ö—É–π —Ä–∞–∑—ä–µ–±–∞–ª–æ!"
    )

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    content = {
        "type": "text",
        "header": header,
        "text": activation_text
    }
    
    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    asyncio.create_task(disable_suka_blyat_mode(303, board_id))
    await message.delete()


async def disable_suka_blyat_mode(delay: int, board_id: str):
    await asyncio.sleep(delay)
    b_data = board_data[board_id]
    b_data['suka_blyat_mode'] = False

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    end_text = "üíÄ –°–£–ö–ê –ë–õ–Ø–¢–¨ –ö–û–ù–ß–ò–õ–û–°–¨. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –ø–æ–º–æ–ª—á–∞—Ç—å."

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    content = {
        "type": "text",
        "header": header,
        "text": end_text
    }

    messages_storage[pnum] = {
        'author_id': 0, # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
# ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        await message.delete()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏", callback_data=f"stats_{board_id}")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞ –¥–æ—Å–∫–µ", callback_data=f"banned_{board_id}")],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–°–ï", callback_data="save_all")],
    ])
    await message.answer(f"–ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å–∫–∏ {BOARD_CONFIG[board_id]['name']}:", reply_markup=keyboard)
    await message.delete()

@dp.callback_query(F.data == "save_all")
async def admin_save_all(callback: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω–æ–º –•–û–¢–Ø –ë–´ –û–î–ù–û–ô –¥–æ—Å–∫–∏
    is_any_admin = any(is_admin(callback.from_user.id, b_id) for b_id in BOARDS)
    if not is_any_admin:
        await callback.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", show_alert=True)
        return

    await callback.answer("–ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
    await save_all_boards_and_backup()
    await callback.message.edit_text("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GitHub.")

@dp.callback_query(F.data.startswith("stats_"))
async def admin_stats_board(callback: types.CallbackQuery):
    board_id = callback.data.split("_")[1]
    if not is_admin(callback.from_user.id, board_id):
        await callback.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", show_alert=True)
        return

    b_data = board_data[board_id]
    stats_text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏ {BOARD_CONFIG[board_id]['name']}:\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(b_data['users']['active'])}\n"
        f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {len(b_data['users']['banned'])}\n"
        f"–í –æ—á–µ—Ä–µ–¥–∏: {message_queues[board_id].qsize()}"
    )
    await callback.message.edit_text(stats_text)
    await callback.answer()


@dp.callback_query(F.data.startswith("banned_"))
async def admin_banned_board(callback: types.CallbackQuery):
    board_id = callback.data.split("_")[1]
    if not is_admin(callback.from_user.id, board_id):
        await callback.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", show_alert=True)
        return

    banned_users = board_data[board_id]['users']['banned']
    if not banned_users:
        await callback.message.edit_text(f"–ù–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']} –Ω–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.")
        await callback.answer()
        return

    text = f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}:\n\n"
    text += "\n".join([f"ID <code>{uid}</code>" for uid in banned_users])
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====================================
def get_author_id_by_reply(msg: types.Message) -> int | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç ID –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –µ–≥–æ –∫–æ–ø–∏—é.
    –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á—É, –∞ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä.
    """
    if not msg.reply_to_message:
        return None

    # –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ - —ç—Ç–æ ID —Ç–æ–≥–æ, –ö–¢–û –æ—Ç–≤–µ—Ç–∏–ª (–∞–¥–º–∏–Ω), 
    # –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –ù–ê –ö–û–¢–û–†–û–ï –æ–Ω –æ—Ç–≤–µ—Ç–∏–ª.
    admin_id = msg.from_user.id
    reply_mid = msg.reply_to_message.message_id
    lookup_key = (admin_id, reply_mid)

    # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞ –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É
    post_num = message_to_post.get(lookup_key)

    if post_num and post_num in messages_storage:
        return messages_storage[post_num].get("author_id")

    return None

@dp.message(Command("id"))
async def cmd_get_id(message: types.Message):
    """ /id ‚Äî –≤—ã–≤–µ—Å—Ç–∏ ID –∏ –∏–Ω—Ñ—É –∞–≤—Ç–æ—Ä–∞ —Ä–µ–ø–ª–∞–π-–ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–≤–æ—é, –µ—Å–ª–∏ –±–µ–∑ reply """
    board_id = get_board_id(message)
    if not board_id: return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–µ
    if not is_admin(message.from_user.id, board_id):
        await message.delete()
        return

    target_id = message.from_user.id
    info_header = "üÜî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n\n"
    
    if message.reply_to_message:
        replied_author_id = get_author_id_by_reply(message)
        
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        if replied_author_id == 0:
            await message.answer("‚ÑπÔ∏è –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–≤—Ç–æ—Ä: –±–æ—Ç).")
            await message.delete()
            return
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        if replied_author_id:
            target_id = replied_author_id
            info_header = "üÜî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
        # –ï—Å–ª–∏ replied_author_id is None, target_id –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–∞–≤–Ω—ã–º ID –∞–¥–º–∏–Ω–∞,
        # –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç –µ–≥–æ –∏–Ω—Ñ—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —á—É–∂—É—é –∫–æ–ø–∏—é).

    try:
        user_chat_info = await message.bot.get_chat(target_id)
        
        info = info_header
        info += f"ID: <code>{target_id}</code>\n"
        if user_chat_info.first_name:
            info += f"–ò–º—è: {escape_html(user_chat_info.first_name)}\n"
        if user_chat_info.last_name:
            info += f"–§–∞–º–∏–ª–∏—è: {escape_html(user_chat_info.last_name)}\n"
        if user_chat_info.username:
            info += f"Username: @{user_chat_info.username}\n"

        b_data = board_data[board_id]
        if target_id in b_data['users']['banned']:
            info += f"\n‚õîÔ∏è –°—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}: –ó–ê–ë–ê–ù–ï–ù"
        elif target_id in b_data['users']['active']:
            info += f"\n‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}: –ê–∫—Ç–∏–≤–µ–Ω"
        else:
            info += f"\n‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
        await message.answer(info, parse_mode="HTML")

    except Exception:
        await message.answer(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{target_id}</code>", parse_mode="HTML")
    
    await message.delete()

@dp.message(Command("ban"))
async def cmd_ban(message: types.Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        return

    target_id: int | None = None
    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)

    parts = message.text.split()
    if len(parts) == 2 and parts[1].isdigit():
        target_id = int(parts[1])

    if not target_id:
        await message.answer("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å ID: /ban <id>")
        return

    deleted_posts = await delete_user_posts(message.bot, target_id, 5, board_id)

    b_data = board_data[board_id]
    b_data['users']['banned'].add(target_id)
    b_data['users']['active'].discard(target_id)

    await message.answer(
        f"‚úÖ –•—É–µ—Å–æ—Å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{target_id}</code> –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}\n"
        f"–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_posts}",
        parse_mode="HTML")

    await send_moderation_notice(target_id, "ban", board_id, deleted_posts=deleted_posts)

    try:
        await message.bot.send_message(
            target_id,
            f"–ü–∏–¥–æ—Ä–∞—Å –µ–±–∞–Ω—ã–π, —Ç—ã –Ω–∞—Å —Ç–∞–∫ –∑–∞–µ–±–∞–ª, —á—Ç–æ —Ç–µ–±—è –±–ª–æ–∫–Ω—É–ª–∏ –Ω–∞—Ö—É–π –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}.\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_posts}\n"
            "–ü–∏–∑–¥—É–π –æ—Ç—Å—é–¥–∞."
        )
    except:
        pass
    await message.delete()

@dp.message(Command("mute"))
async def cmd_mute(message: Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        await message.delete()
        return

    command_args = message.text.split()[1:]
    if not command_args and not message.reply_to_message:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute <user_id> [–≤—Ä–µ–º—è] –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await message.delete()
        return

    target_id = None
    duration_str = "24h"

    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)
        if command_args:
            duration_str = command_args[0]
    elif command_args:
        try:
            target_id = int(command_args[0])
            if len(command_args) > 1:
                duration_str = command_args[1]
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.delete()
            return
            
    if not target_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.delete()
        return

    try:
        duration_str = duration_str.lower().replace(" ", "")
        if duration_str.endswith("m"): mute_seconds, duration_text = int(duration_str[:-1]) * 60, f"{int(duration_str[:-1])} –º–∏–Ω—É—Ç"
        elif duration_str.endswith("h"): mute_seconds, duration_text = int(duration_str[:-1]) * 3600, f"{int(duration_str[:-1])} —á–∞—Å–æ–≤"
        elif duration_str.endswith("d"): mute_seconds, duration_text = int(duration_str[:-1]) * 86400, f"{int(duration_str[:-1])} –¥–Ω–µ–π"
        else: mute_seconds, duration_text = int(duration_str) * 60, f"{int(duration_str)} –º–∏–Ω—É—Ç"
        mute_seconds = min(mute_seconds, 2592000)
    except (ValueError, AttributeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ü—Ä–∏–º–µ—Ä—ã: 30m, 2h, 1d)")
        await message.delete()
        return

    deleted_count = await delete_user_posts(message.bot, target_id, 5, board_id)
    
    b_data = board_data[board_id]
    b_data['mutes'][target_id] = datetime.now(UTC) + timedelta(seconds=mute_seconds)

    await message.answer(
        f"üîá –•—É–∏–ª–∞ {target_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_text} –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}\n"
        f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_count}",
        parse_mode="HTML"
    )

    await send_moderation_notice(target_id, "mute", board_id, duration=duration_text, deleted_posts=deleted_count)

    try:
        await message.bot.send_message(
            target_id,
            f"üîá –ü–∏–¥–æ—Ä –µ–±–∞–Ω—ã–π, —Ç–µ–±—è –∑–∞–º—É—Ç–∏–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']} –Ω–∞ {duration_text}.\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_count}",
            parse_mode="HTML"
        )
    except:
        pass
    await message.delete()

@dp.message(Command("wipe"))
async def cmd_wipe(message: types.Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        return

    target_id = None
    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)
    else:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = int(parts[1])

    if not target_id:
        await message.answer("reply + /wipe –∏–ª–∏ /wipe <id>")
        return

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏) —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–∏
    deleted_messages = await delete_user_posts(message.bot, target_id, 999999, board_id)

    await message.answer(
        f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å –¥–æ—Å–∫–∏ {BOARD_CONFIG[board_id]['name']}."
    )
    await message.delete()

@dp.message(Command("unmute"))
async def cmd_unmute(message: types.Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        return

    target_id = None
    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)
    else:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = int(parts[1])

    if not target_id:
        await message.answer("–ù—É–∂–Ω–æ reply –∏–ª–∏ /unmute <id>")
        return

    b_data = board_data[board_id]
    if b_data['mutes'].pop(target_id, None):
        await message.answer(f"üîà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}.")
        try:
            await message.bot.send_message(target_id, f"–¢–µ–±—è —Ä–∞–∑–º—É—Ç–∏–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}.")
        except:
            pass
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –±—ã–ª –≤ –º—É—Ç–µ –Ω–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ.")
    await message.delete()


@dp.message(Command("unban"))
async def cmd_unban(message: types.Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return

    try:
        user_id = int(args[1])
        b_data = board_data[board_id]
        if b_data['users']['banned'].discard(user_id):
             await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await message.delete()


@dp.message(Command("del"))
async def cmd_del(message: types.Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        return

    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
        return

    target_mid = message.reply_to_message.message_id
    lookup_key = (message.from_user.id, target_mid)
    post_num = message_to_post.get(lookup_key)

    if post_num is None:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —á—É–∂—É—é –∫–æ–ø–∏—é).")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é, —Ç–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    deleted_count = await delete_single_post(post_num, message.bot)

    await message.answer(f"–ü–æ—Å—Ç ‚Ññ{post_num} –∏ –≤—Å–µ –µ–≥–æ –∫–æ–ø–∏–∏ ({deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π) —É–¥–∞–ª–µ–Ω—ã.")
    await message.delete()


@dp.message(Command("shadowmute"))
async def cmd_shadowmute(message: Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        await message.delete()
        return

    args = message.text.split()[1:]
    target_id = None
    duration_str = "24h"

    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)
        if args:
            duration_str = args[0]
    elif args:
        try:
            target_id = int(args[0])
            if len(args) > 1:
                duration_str = args[1]
        except ValueError:
            pass

    if not target_id:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /shadowmute <user_id> [–≤—Ä–µ–º—è] –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        duration_str = duration_str.lower().replace(" ", "")
        if duration_str.endswith("m"): total_seconds, time_str = int(duration_str[:-1]) * 60, f"{int(duration_str[:-1])} –º–∏–Ω"
        elif duration_str.endswith("h"): total_seconds, time_str = int(duration_str[:-1]) * 3600, f"{int(duration_str[:-1])} —á–∞—Å"
        elif duration_str.endswith("d"): total_seconds, time_str = int(duration_str[:-1]) * 86400, f"{int(duration_str[:-1])} –¥–Ω–µ–π"
        else: total_seconds, time_str = int(duration_str) * 60, f"{int(duration_str)} –º–∏–Ω"
        
        total_seconds = min(total_seconds, 2592000)
        b_data = board_data[board_id]
        b_data['shadow_mutes'][target_id] = datetime.now(UTC) + timedelta(seconds=total_seconds)

        await message.answer(f"üëª –¢–∏—Ö–æ –∑–∞–º—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞ {time_str} –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 30m, 2h, 1d")
    await message.delete()


@dp.message(Command("unshadowmute"))
async def cmd_unshadowmute(message: Message):
    board_id = get_board_id(message)
    if not is_admin(message.from_user.id, board_id):
        return

    target_id = None
    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)
    else:
        parts = message.text.split()
        if len(parts) >= 2 and parts[1].isdigit():
            target_id = int(parts[1])

    if not target_id:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unshadowmute <user_id> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    b_data = board_data[board_id]
    if b_data['shadow_mutes'].pop(target_id, None):
        await message.answer(f"üëª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–∏—Ö–æ —Ä–∞–∑–º—É—á–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}.")
    else:
        await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –≤ shadow-–º—É—Ç–µ –Ω–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ.")
    await message.delete()

# ========== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ==========

@dp.message(F.audio)
async def handle_audio(message: Message):
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    board_id = get_board_id(message)
    if not board_id: return
    
    b_data = board_data[board_id]

    if user_id in b_data['users']['banned']:
        await message.delete()
        return

    if b_data['mutes'].get(user_id) and b_data['mutes'][user_id] > datetime.now(UTC):
        await message.delete()
        return

    header, current_post_num = await format_header(board_id)
    reply_to_post, reply_info = None, {}

    if message.reply_to_message:
        reply_mid = message.reply_to_message.message_id
        lookup_key = (user_id, reply_mid)
        reply_to_post = message_to_post.get(lookup_key)
        
        if reply_to_post and reply_to_post in post_to_messages:
            reply_info = post_to_messages[reply_to_post]

    try:
        await message.delete()
    except TelegramBadRequest:
        pass # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    
    content = {
        'type': 'audio', 'header': header, 'file_id': message.audio.file_id,
        'caption': message.caption or "", 'reply_to_post': reply_to_post
    }

    content = await _apply_mode_transformations(content, board_id)

    messages_storage[current_post_num] = {
        'author_id': user_id, 'timestamp': datetime.now(UTC), 'content': content,
        'reply_to': reply_to_post, 'board_id': board_id
    }

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    try:
        reply_to_message_id = reply_info.get(user_id)
        
        caption_text = f"<i>{header}</i>"
        if content['caption']: 
            caption_text += f"\n\n{content['caption']}"

        sent_to_author = await message.bot.send_audio(
            user_id, message.audio.file_id, caption=caption_text,
            reply_to_message_id=reply_to_message_id, parse_mode="HTML"
        )

        if sent_to_author:
            messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
            post_to_messages.setdefault(current_post_num, {})[user_id] = sent_to_author.message_id
            message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

    except TelegramForbiddenError:
        b_data['users']['active'].discard(user_id)
        print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–∏–∑ handle_audio).")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ-–ø–æ—Å—Ç–∞ #{current_post_num} –∞–≤—Ç–æ—Ä—É {user_id}: {e}")

    recipients = b_data['users']['active'] - {user_id}
    if recipients and user_id in b_data['users']['active']:
        try:
            await message_queues[board_id].put({
                'recipients': recipients, 'content': content, 'post_num': current_post_num,
                'reply_info': reply_info, 'board_id': board_id
            })
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ-–ø–æ—Å—Ç–∞. –ü–æ—Å—Ç #{current_post_num} —É–¥–∞–ª–µ–Ω. –û—à–∏–±–∫–∞: {e}")
            messages_storage.pop(current_post_num, None)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---


@dp.message(F.voice)
async def handle_voice(message: Message):
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    board_id = get_board_id(message)
    if not board_id: return
        
    b_data = board_data[board_id]

    if user_id in b_data['users']['banned']:
        await message.delete()
        return

    if b_data['mutes'].get(user_id) and b_data['mutes'][user_id] > datetime.now(UTC):
        await message.delete()
        return

    header, current_post_num = await format_header(board_id)
    reply_to_post, reply_info = None, {}

    if message.reply_to_message:
        reply_mid = message.reply_to_message.message_id
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç, –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç
        lookup_key = (user_id, reply_mid)
        reply_to_post = message_to_post.get(lookup_key)
        
        if reply_to_post and reply_to_post in post_to_messages:
            reply_info = post_to_messages[reply_to_post]

    try:
        await message.delete()
    except TelegramBadRequest:
        pass # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    content = {
        'type': 'voice', 'header': header, 'file_id': message.voice.file_id,
        'reply_to_post': reply_to_post
    }

    messages_storage[current_post_num] = {
        'author_id': user_id, 'timestamp': datetime.now(UTC), 'content': content,
        'reply_to': reply_to_post, 'board_id': board_id
    }

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    try:
        reply_to_message_id = reply_info.get(user_id)
        sent_to_author = await message.bot.send_voice(
            user_id, message.voice.file_id, caption=f"<i>{header}</i>",
            reply_to_message_id=reply_to_message_id, parse_mode="HTML"
        )

        if sent_to_author:
            messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
            post_to_messages.setdefault(current_post_num, {})[user_id] = sent_to_author.message_id
            message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

    except TelegramForbiddenError:
        b_data['users']['active'].discard(user_id)
        print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–∏–∑ handle_voice).")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ #{current_post_num} –∞–≤—Ç–æ—Ä—É {user_id}: {e}")

    recipients = b_data['users']['active'] - {user_id}
    if recipients and user_id in b_data['users']['active']:
        try:
            await message_queues[board_id].put({
                'recipients': recipients, 'content': content, 'post_num': current_post_num,
                'reply_info': reply_info, 'board_id': board_id
            })
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞. –ü–æ—Å—Ç #{current_post_num} —É–¥–∞–ª–µ–Ω. –û—à–∏–±–∫–∞: {e}")
            messages_storage.pop(current_post_num, None)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
@dp.message(F.media_group_id)
async def handle_media_group_init(message: Message):
    media_group_id = message.media_group_id
    # –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –¥–ª—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    if not media_group_id or media_group_id in sent_media_groups:
        # –ù–ï –£–î–ê–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï, –ß–¢–û–ë–´ –ò–ó–ë–ï–ñ–ê–¢–¨ FLOOD-–û–®–ò–ë–û–ö
        return

    user_id = message.from_user.id
    board_id = get_board_id(message)
    if not board_id: return

    b_data = board_data[board_id]

    # –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö
    if user_id in b_data['users']['banned'] or \
       (b_data['mutes'].get(user_id) and b_data['mutes'][user_id] > datetime.now(UTC)):
        # –ù–ï –£–î–ê–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
        return
    
    group = current_media_groups.get(media_group_id)
    is_leader = False

    # setdefault —è–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π. –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –µ–µ –≤—ã–∑–æ–≤–µ—Ç, —Å–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å—å
    # –∏ —Å–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç.
    if group is None:
        group = current_media_groups.setdefault(media_group_id, {'is_initializing': True})
        if group.get('is_initializing'):
            is_leader = True
    
    # –¢–æ–ª—å–∫–æ "–ª–∏–¥–µ—Ä" –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –±–ª–æ–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
    if is_leader:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±—â–∏–µ –ª–∏–º–∏—Ç—ã —á–∞—Å—Ç–æ—Ç—ã, –∞ –Ω–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≥–∏—Ñ–æ–∫.
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã.
        fake_text_message = types.Message(
            message_id=message.message_id,
            date=message.date,
            chat=message.chat,
            from_user=message.from_user,
            content_type='text',
            text=f"media_group_{media_group_id}" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–æ–∂–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤
        )
        
        spam_check_passed = await check_spam(user_id, fake_text_message, board_id)
        
        if not spam_check_passed:
            current_media_groups.pop(media_group_id, None) 
            # –ù–ï –£–î–ê–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
            await apply_penalty(message.bot, user_id, 'text', board_id)
            return
        
        reply_to_post = None
        if message.reply_to_message:
            lookup_key = (user_id, message.reply_to_message.message_id)
            reply_to_post = message_to_post.get(lookup_key)

        header, post_num = await format_header(board_id)
        caption = message.caption or ""
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è ID –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        group.update({
            'board_id': board_id, 'post_num': post_num, 'header': header, 'author_id': user_id,
            'timestamp': datetime.now(UTC), 'media': [], 'caption': caption,
            'reply_to_post': reply_to_post, 'processed_messages': set(),
            'source_message_ids': set() # <--- –ù–û–í–û–ï –ü–û–õ–ï
        })
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑—Ä–µ—à–∞—è –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
        group.pop('is_initializing', None)
    else:
        # "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏" –∂–¥—É—Ç, –ø–æ–∫–∞ "–ª–∏–¥–µ—Ä" –∑–∞–∫–æ–Ω—á–∏—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        while group is not None and group.get('is_initializing'):
            await asyncio.sleep(0.05)
            group = current_media_groups.get(media_group_id)
        
        # –ï—Å–ª–∏ –ª–∏–¥–µ—Ä –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–∏–∑-–∑–∞ —Å–ø–∞–º–∞), –≤—ã—Ö–æ–¥–∏–º
        if media_group_id not in current_media_groups:
            return

    # –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ü–û–°–õ–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if not group:
        return
        
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –°–æ–±–∏—Ä–∞–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    group.get('source_message_ids', set()).add(message.message_id)
        
    if message.message_id not in group['processed_messages']:
        media_data = {'type': message.content_type, 'file_id': None}
        if message.photo: media_data['file_id'] = message.photo[-1].file_id
        elif message.video: media_data['file_id'] = message.video.file_id
        elif message.document: media_data['file_id'] = message.document.file_id
        elif message.audio: media_data['file_id'] = message.audio.file_id
        
        if media_data['file_id']:
            group['media'].append(media_data)
            group['processed_messages'].add(message.message_id)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–±—Ä–∞–Ω–æ. –£–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if media_group_id in media_group_timers:
        media_group_timers[media_group_id].cancel()
    
    media_group_timers[media_group_id] = asyncio.create_task(
        complete_media_group_after_delay(media_group_id, message.bot, delay=1.5)
    )
    
async def complete_media_group_after_delay(media_group_id: str, bot_instance: Bot, delay: float = 1.5):
    try:
        await asyncio.sleep(delay)

        # –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è. –ï—Å–ª–∏ –µ–µ —Ç–∞–º —É–∂–µ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º.
        group = current_media_groups.pop(media_group_id, None)
        if not group or media_group_id in sent_media_groups:
            return

        # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω–∏–º.
        media_group_timers.pop(media_group_id, None)

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ---
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ ID –∞–≤—Ç–æ—Ä–∞ (–∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è chat_id)
        source_message_ids = group.get('source_message_ids')
        author_id = group.get('author_id')

        if source_message_ids and author_id:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.
                # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ flood-–ª–∏–º–∏—Ç–æ–≤ Telegram.
                await bot_instance.delete_messages(
                    chat_id=author_id,
                    message_ids=list(source_message_ids)
                )
            except TelegramBadRequest as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ.
                print(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è media group {media_group_id}: {e}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –¥–ª—è media group {media_group_id}: {e}")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
        await process_complete_media_group(media_group_id, group, bot_instance)

    except asyncio.CancelledError:
        # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω (–ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É) - —ç—Ç–æ –Ω–æ—Ä–º–∞.
        pass
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ complete_media_group_after_delay –¥–ª—è {media_group_id}: {e}")
        # –ü–æ–¥—á–∏—â–∞–µ–º –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
        current_media_groups.pop(media_group_id, None)
        media_group_timers.pop(media_group_id, None)

async def process_complete_media_group(media_group_id: str, group: dict, bot_instance: Bot):
    if not group or not group.get('media'):
        return

    # –ü–æ–º–µ—á–∞–µ–º ID –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    sent_media_groups.append(media_group_id)

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: "–ù–∞—Ä–µ–∑–∫–∞" –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
    all_media = group.get('media', [])
    CHUNK_SIZE = 10  # –õ–∏–º–∏—Ç API Telegram
    media_chunks = [all_media[i:i + CHUNK_SIZE] for i in range(0, len(all_media), CHUNK_SIZE)]

    for i, chunk in enumerate(media_chunks):
        if not chunk: continue

        user_id = group['author_id']
        board_id = group['board_id']
        b_data = board_data[board_id]
        
        # –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç, –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        if i == 0:
            post_num = group['post_num']
            header = group['header']
            caption = group.get('caption')
            reply_to_post = group.get('reply_to_post')
        else:
            header, post_num = await format_header(board_id)
            caption = None
            reply_to_post = None

        content = {
            'type': 'media_group', 'header': header, 'media': chunk,
            'caption': caption, 'reply_to_post': reply_to_post
        }

        content = await _apply_mode_transformations(content, board_id)

        messages_storage[post_num] = {
            'author_id': user_id, 'timestamp': group['timestamp'], 'content': content,
            'reply_to': reply_to_post, 'board_id': board_id
        }

        reply_info = {}
        try:
            builder = MediaGroupBuilder()
            reply_to_message_id = None
            if reply_to_post:
                reply_info = post_to_messages.get(reply_to_post, {})
                reply_to_message_id = reply_info.get(user_id)
            
            header_html = f"<i>{header}</i>"
            
            full_caption = header_html
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —á–∞–Ω–∫—É
            if i == 0 and content.get('caption'):
                full_caption += f"\n\n{content['caption']}"

            for idx, media in enumerate(chunk):
                caption_for_media = full_caption if idx == 0 else None
                builder.add(type=media['type'], media=media['file_id'], caption=caption_for_media, parse_mode="HTML" if caption_for_media else None)
            
            if builder.build():
                sent_messages = await bot_instance.send_media_group(
                    chat_id=user_id, media=builder.build(), reply_to_message_id=reply_to_message_id
                )
                if sent_messages:
                    messages_storage[post_num]['author_message_id'] = sent_messages[0].message_id
                    post_to_messages.setdefault(post_num, {})[user_id] = sent_messages[0].message_id
                    for msg in sent_messages: message_to_post[(user_id, msg.message_id)] = post_num
        
        except TelegramForbiddenError:
            b_data['users']['active'].discard(user_id)
            print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ (media_group).")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–∞ #{post_num} –∞–≤—Ç–æ—Ä—É {user_id}: {e}")
        
        recipients = b_data['users']['active'] - {user_id}
        if recipients and user_id in b_data['users']['active']:
            try:
                await message_queues[board_id].put({
                    'recipients': recipients, 'content': content, 'post_num': post_num,
                    'reply_info': reply_info, 'board_id': board_id
                })
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã #{post_num}: {e}")
                messages_storage.pop(post_num, None)
        
        if len(media_chunks) > 1:
            await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–µ–π –∞–ª—å–±–æ–º–∞
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
def apply_greentext_formatting(text: str) -> str:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 'Greentext' –∫ —Å—Ç—Ä–æ–∫–∞–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å '>'.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å —É–∂–µ HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    if not text:
        return text

    processed_lines = []
    lines = text.split('\n')
    for line in lines:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ (–±–µ–∑ –≤–µ–¥—É—â–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤) —Å HTML-—Å—É—â–Ω–æ—Å—Ç–∏ '>'
        if line.lstrip().startswith('>'):
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–µ–≥ <code> –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ –∑–µ–ª–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            processed_lines.append(f"<code>{line}</code>")
        else:
            processed_lines.append(line)
            
    return '\n'.join(processed_lines)


@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    
    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å–∫—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    board_id = get_board_id(message)
    if not board_id:
        return # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    
    # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–∏
    b_data = board_data[board_id]

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ shadow-–º—É—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–µ.
    is_shadow_muted = (user_id in b_data['shadow_mutes'] and 
                       b_data['shadow_mutes'][user_id] > datetime.now(UTC))

    if is_shadow_muted:
        try:
            await message.delete()
        except TelegramBadRequest:
            pass # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    
    if not message.text and not message.caption and not message.content_type:
        if not is_shadow_muted:
            try:
                await message.delete()
            except TelegramBadRequest:
                pass # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
        
    if message.media_group_id:
        return
        
    try:
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –º—É—Ç–∞
        until = b_data['mutes'].get(user_id)
        if until and until > datetime.now(UTC):
            left = until - datetime.now(UTC)
            minutes = int(left.total_seconds() // 60)
            seconds = int(left.total_seconds() % 60)
            try:
                await message.delete()
                await message.bot.send_message(
                    user_id, 
                    f"üîá –≠–π –ø–∏–¥–æ—Ä, —Ç—ã –≤ –º—É—Ç–µ –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']} –µ—â—ë {minutes}–º {seconds}—Å\n–°–ø–∞–º–∏—à—å –¥–∞–ª—å—à–µ - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω",
                    parse_mode="HTML"
                )
            except: pass
            return
        elif until:
            b_data['mutes'].pop(user_id, None)

        # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in b_data['users']['active']:
            b_data['users']['active'].add(user_id)
            print(f"‚úÖ [{board_id}] –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}")

        if user_id in b_data['users']['banned']:
            if not is_shadow_muted:
                try:
                    await message.delete()
                except TelegramBadRequest:
                    pass # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

        # 6. –°–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫–∞
        spam_check = await check_spam(user_id, message, board_id)
        if not spam_check:
            if not is_shadow_muted:
                try:
                    await message.delete()
                except TelegramBadRequest:
                    pass # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            msg_type = message.content_type
            if message.content_type in ['photo', 'video', 'document'] and message.caption:
                msg_type = 'text'
            await apply_penalty(message.bot, user_id, msg_type, board_id)
            return
        
        # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–≤–µ—Ç–µ
        recipients = b_data['users']['active'] - {user_id}
        reply_to_post, reply_info = None, {}
        if message.reply_to_message:
            lookup_key = (user_id, message.reply_to_message.message_id)
            reply_to_post = message_to_post.get(lookup_key)
            if reply_to_post and reply_to_post in post_to_messages:
                reply_info = post_to_messages[reply_to_post]
            else:
                reply_to_post = None

        # 8. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        header, current_post_num = await format_header(board_id)
        if not is_shadow_muted:
            try:
                await message.delete()
            except TelegramBadRequest:
                pass # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

        # 9. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –°–´–†–û–ì–û —Å–ª–æ–≤–∞—Ä—è `content`
        content = {'type': message.content_type, 'header': header, 'reply_to_post': reply_to_post}
        
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        if message.content_type == 'text':
            text_content = message.html_text if message.entities else escape_html(message.text)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º Greentext —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            text_content = apply_greentext_formatting(text_content)

            if b_data['anime_mode'] and random.random() < 0.41:
                anime_img_url = await get_random_anime_image()
                if anime_img_url:
                    content.update({'type': 'photo', 'caption': text_content, 'image_url': anime_img_url})
                else: 
                    content.update({'text': text_content})
            else: 
                content.update({'text': text_content})
                
        elif message.content_type in ['photo', 'video', 'animation', 'document', 'audio']:
            file_id = getattr(message, message.content_type, [])
            if isinstance(file_id, list): file_id = file_id[-1]
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º Greentext –∫ –ø–æ–¥–ø–∏—Å–∏
            caption_content = escape_html(message.caption or "")
            caption_content = apply_greentext_formatting(caption_content)
            
            content.update({'file_id': file_id.file_id, 'caption': caption_content})
            
        elif message.content_type in ['sticker', 'voice', 'video_note']:
            file_id = getattr(message, message.content_type)
            content['file_id'] = file_id.file_id

        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Ä—É –∏ –î–û –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        content = await _apply_mode_transformations(content, board_id)

        # 10. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        messages_storage[current_post_num] = {
            'author_id': user_id, 'timestamp': datetime.now(UTC), 'content': content,
            'reply_to': reply_to_post, 'author_message_id': None, 'board_id': board_id
        }

        # 11. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É (—É–∂–µ —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º)
        reply_to_message_id = reply_info.get(user_id)
        sent_to_author = None
        header_text = f"<i>{header}</i>"
        reply_text = f">>{reply_to_post}\n" if reply_to_post else ""

        try:
            if content.get('type') == 'text':
                full_text = f"{header_text}\n\n{reply_text}{content['text']}"
                sent_to_author = await message.bot.send_message(user_id, full_text, reply_to_message_id=reply_to_message_id, parse_mode="HTML")
            
            elif content.get('type') in ['photo', 'video', 'animation', 'document', 'audio']:
                caption_for_author = header_text
                final_caption = content.get('caption', '')
                if reply_text or final_caption:
                    caption_for_author += f"\n\n{reply_text}{final_caption}"
                
                media_to_send = content.get('image_url') or content.get('file_id')
                
                if content['type'] == 'photo':
                    sent_to_author = await message.bot.send_photo(user_id, media_to_send, caption=caption_for_author, reply_to_message_id=reply_to_message_id, parse_mode="HTML")
                elif content['type'] == 'video':
                    sent_to_author = await message.bot.send_video(user_id, content['file_id'], caption=caption_for_author, reply_to_message_id=reply_to_message_id, parse_mode="HTML")
                elif content['type'] == 'animation':
                    sent_to_author = await message.bot.send_animation(user_id, content['file_id'], caption=caption_for_author, reply_to_message_id=reply_to_message_id, parse_mode="HTML")
                elif content['type'] == 'document':
                    sent_to_author = await message.bot.send_document(user_id, content['file_id'], caption=caption_for_author, reply_to_message_id=reply_to_message_id, parse_mode="HTML")
                elif content['type'] == 'audio':
                    sent_to_author = await message.bot.send_audio(user_id, content['file_id'], caption=caption_for_author, reply_to_message_id=reply_to_message_id, parse_mode="HTML")

            elif content['type'] == 'sticker':
                sent_to_author = await message.bot.send_sticker(user_id, content['file_id'], reply_to_message_id=reply_to_message_id)
            elif content['type'] == 'voice':
                 sent_to_author = await message.bot.send_voice(user_id, content['file_id'], caption=f"<i>{header}</i>\n\n{reply_text}", reply_to_message_id=reply_to_message_id, parse_mode="HTML")
            elif content['type'] == 'video_note':
                sent_to_author = await message.bot.send_video_note(user_id, content['file_id'], reply_to_message_id=reply_to_message_id)

            if sent_to_author:
                messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
                post_to_messages.setdefault(current_post_num, {})[user_id] = sent_to_author.message_id
                message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

            if not is_shadow_muted and recipients:
                await message_queues[board_id].put({
                    'recipients': recipients, 'content': content, 'post_num': current_post_num,
                    'reply_info': reply_info if reply_info else None, 'board_id': board_id
                })

        except TelegramForbiddenError:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            b_data['users']['active'].discard(user_id)
            print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–∏–∑ handle_message).")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            messages_storage.pop(current_post_num, None)

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message: {e}")
        
async def start_background_tasks(bots: dict[str, Bot]):
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –û–î–ò–ù —Ä–∞–∑ –∑–∞ –≤–µ—Å—å runtime"""
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Ü–∏–∫–ª–∞ ---
    from help_broadcaster import help_broadcaster
    
    tasks = [
        asyncio.create_task(auto_backup()),
        asyncio.create_task(message_broadcaster(bots)),
        asyncio.create_task(conan_roaster(
            state, messages_storage, post_to_messages, message_to_post,
            message_queues, format_header, board_data
        )),
        asyncio.create_task(motivation_broadcaster()),
        asyncio.create_task(auto_memory_cleaner()),
        asyncio.create_task(help_broadcaster()),
        asyncio.create_task(board_statistics_broadcaster()),
        asyncio.create_task(ghost_poster( # <--- –û–ë–ù–û–í–ò–¢–ï –≠–¢–û–¢ –ë–õ–û–ö
            last_messages,
            message_queues,
            messages_storage,
            post_to_messages, # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ê–†–ì–£–ú–ï–ù–¢
            format_header,
            board_data,
            BOARDS
        )),
        # asyncio.create_task(dvach_thread_poster()), –ü–û–ö–ê –ù–ï –ù–ê–î–û
    ]
    print(f"‚úì Background tasks started: {len(tasks)}")
    return tasks


async def supervisor():
    lock_file = "bot.lock"
    if os.path.exists(lock_file):
        print("‚õî Bot already running! Exiting...")
        sys.exit(1)
    
    with open(lock_file, "w") as f:
        f.write(str(os.getpid()))
    
    try:
        global is_shutting_down
        loop = asyncio.get_running_loop()

        restore_backup_on_start()
        load_state()

        bots = {}
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bot ---
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–∏–Ω —Ä–∞–∑
        default_properties = DefaultBotProperties(parse_mode="HTML")
        
        for board_id, config in BOARD_CONFIG.items():
            token = config.get("token")
            if token:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å default=...
                bots[board_id] = Bot(token=token, default=default_properties)
            else:
                print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å–∫–∏ '{board_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫.")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        if not bots:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(bots)} –±–æ—Ç–æ–≤: {list(bots.keys())}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è `bots` –∏ –ø–µ—Ä–µ–¥–∞—é—Ç –µ–≥–æ –≤ `graceful_shutdown`
        bots_list = list(bots.values())
        if hasattr(signal, 'SIGTERM'):
            loop.add_signal_handler(signal.SIGTERM, lambda: asyncio.create_task(graceful_shutdown(bots_list)))
        if hasattr(signal, 'SIGINT'):
            loop.add_signal_handler(signal.SIGINT, lambda: asyncio.create_task(graceful_shutdown(bots_list)))
        
        await setup_pinned_messages(bots)
        healthcheck_site = await start_healthcheck()
        background_tasks = await start_background_tasks(bots)

        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        await dp.start_polling(*bots.values(), skip_updates=True)

    except Exception as e:
        print(f"üî• Critical error in supervisor: {e}")
    finally:
        if not is_shutting_down:
             await graceful_shutdown(list(bots.values()))
        if os.path.exists(lock_file):
            os.remove(lock_file)
            
if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(supervisor())
