from __future__ import annotations
import asyncio
import gc
import glob
import gzip
import json
import logging
import os
import pickle
import random
import re
import secrets
import shutil
import signal
import subprocess
import sys
import time
from asyncio import Semaphore
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta, timezone, UTC
from typing import Tuple
from dotenv import load_dotenv


import aiohttp
from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramConflictError,
    TelegramForbiddenError,
    TelegramNetworkError,
    TelegramRetryAfter,
)
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
time.sleep(3)

import deanonymizer
from deanonymizer import (
    DEANON_CITIES,
    DEANON_DETAILS,
    DEANON_FETISHES,
    DEANON_PROFESSIONS,
    DEANON_SURNAMES,
    generate_deanon_info,
)
from help_text import HELP_TEXT_COMMANDS, HELP_TEXT_EN_COMMANDS, generate_boards_list, THREAD_PROMO_TEXT_RU, THREAD_PROMO_TEXT_EN
from japanese_translator import anime_transform, get_random_anime_image, get_monogatari_image, get_nsfw_anime_image
from summarize import summarize_text_with_hf
from thread_texts import thread_messages
from ukrainian_mode import UKRAINIAN_PHRASES, ukrainian_transform
from zaputin_mode import PATRIOTIC_PHRASES, zaputin_transform
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from typing import Callable, Dict, Any, Awaitable, Optional

class BoardMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è `board_id` –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –µ–≥–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    –≠—Ç–æ –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑—ã–≤–∞—Ç—å get_board_id() –≤ –∫–∞–∂–¥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ.
    """
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # get_board_id() –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Å Message, —Ç–∞–∫ –∏ —Å CallbackQuery,
        # –ø–æ—ç—Ç–æ–º—É –º—ã –º–æ–∂–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'event' –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
        board_id = get_board_id(event)
        
        # –î–æ–±–∞–≤–ª—è–µ–º board_id –≤ —Å–ª–æ–≤–∞—Ä—å 'data', —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω
        # –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.
        data['board_id'] = board_id
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ü–µ–ø–æ—á–∫–µ.
        return await handler(event, data)

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å–æ–∫ ==========

BOARD_CONFIG = {
    'b': {
        "name": "/b/",
        "description": "–ë–†–ï–î - –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Å–∫–∞",
        "description_en": "RANDOM -",
        "username": "@dvach_chatbot",
        "token": os.getenv("BOT_TOKEN"),
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        "admins": {int(y) for x in os.getenv("ADMINS", "").split(",") if (y := x.strip()).isdigit()}
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    },
    'po': {
        "name": "/po/",
        "description": "–ü–û–õ–ò–¢–ê–ß - (—Å—Ä–∞—á–∏, –ø–æ–ª–∏—Ç–∏–∫–∞)",
        "description_en": "POLITICS  -",
        "username": "@dvach_po_chatbot",
        "token": os.getenv("PO_BOT_TOKEN"),
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        "admins": {int(y) for x in os.getenv("PO_ADMINS", "").split(",") if (y := x.strip()).isdigit()}
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    },
    'a': {
        "name": "/a/",
        "description": "–ê–ù–ò–ú–ï - (–º–∞–Ω–≥–∞, –Ø–ø–æ–Ω–∏—è, —Ö–µ–Ω—Ç–∞–π)",
        "description_en": "ANIME (üáØüáµ, hentai, manga)",
        "username": "@dvach_a_chatbot",
        "token": os.getenv("A_BOT_TOKEN"),
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        "admins": {int(y) for x in os.getenv("A_ADMINS", "").split(",") if (y := x.strip()).isdigit()}
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    },
    'sex': {
        "name": "/sex/",
        "description": "–°–ï–ö–°–ê–ß - (–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–µ–∫—Å, —Ç—è–Ω, –µ–æ—Ç, –±–ª–µ–∫–ø–∏–ª–ª)",
        "description_en": "SEX (relationships, sex, blackpill)",
        "username": "@dvach_sex_chatbot",
        "token": os.getenv("SEX_BOT_TOKEN"),
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        "admins": {int(y) for x in os.getenv("SEX_ADMINS", "").split(",") if (y := x.strip()).isdigit()}
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    },
    'vg': {
        "name": "/vg/",
        "description": "–í–ò–î–ï–û–ò–ì–†–´ - (–ü–ö, –∏–≥—Ä—ã, —Ö–æ–±–±–∏)",
        "description_en": "VIDEO GAMES (üéÆ, hobbies)",
        "username": "@dvach_vg_chatbot",
        "token": os.getenv("VG_BOT_TOKEN"),
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        "admins": {int(y) for x in os.getenv("VG_ADMINS", "").split(",") if (y := x.strip()).isdigit()}
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    },
    'int': {
        "name": "/int/",
        "description": "INTERNATIONAL (üá¨üáßüá∫üá∏üá®üá≥üáÆüá≥üá™üá∫)",
        "description_en": "INTERNATIONAL (üá¨üáßüá∫üá∏üá®üá≥üáÆüá≥üá™üá∫)",
        "username": "@tgchan_chatbot",
        "token": os.getenv("INT_BOT_TOKEN"),
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        "admins": {int(y) for x in os.getenv("INT_ADMINS", "").split(",") if (y := x.strip()).isdigit()}
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    },
    'thread': {
        "name": "/thread/",
        "description": "–¢–†–ï–î–´ - –¥–æ—Å–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–æ–≤",
        "description_en": "THREADS - board for creating threads",
        "username": "@thread_chatbot", 
        "token": os.getenv("THREAD_BOT_TOKEN"),
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        "admins": {int(y) for x in os.getenv("THREAD_ADMINS", "").split(",") if (y := x.strip()).isdigit()}
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    },
    'test': {
        "name": "/test/",
        "description": "Testground",
        "description_en": "Testground",
        "username": "@tgchan_testbot", 
        "token": os.getenv("TEST_BOT_TOKEN"),
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        "admins": {int(y) for x in os.getenv("TEST_ADMINS", "").split(",") if (y := x.strip()).isdigit()}
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    }
}


# ========== –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –¢–†–ï–î–û–í ==========
THREAD_BOARDS = {'thread', 'test'} # –î–æ—Å–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–¥–æ–≤
DATA_DIR = "data"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞—Ä—Ö–∏–≤–æ–≤ —Ç—Ä–µ–¥–æ–≤)
os.makedirs(DATA_DIR, exist_ok=True) # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
# --- –ù–û–í–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê: ID –ö–ê–ù–ê–õ–ê –î–õ–Ø –†–ï–ê–õ-–¢–ê–ô–ú –ê–†–•–ò–í–ê ---
REALTIME_ARCHIVE_CHANNEL_ID = -1003026863876

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
THREAD_NOTIFY_THRESHOLD = 30 # –ü–æ—Ä–æ–≥ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
last_checked_post_counter_for_notify = 0 # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
THREAD_BUMP_LIMIT_WARNING_THRESHOLD = 40 # –ó–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –¥–æ –ª–∏–º–∏—Ç–∞ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç—Ä–µ–¥–æ–≤ ---
MAX_ACTIVE_THREADS = 100 # –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ
MAX_POSTS_PER_THREAD = 300 # –ú–∞–∫—Å. –ø–æ—Å—Ç–æ–≤ –≤ —Ç—Ä–µ–¥–µ –¥–æ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—É–ª–¥–∞—É–Ω–æ–≤ ---
THREAD_CREATE_COOLDOWN_USER = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
THREAD_HISTORY_COOLDOWN = 300 # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
OP_COMMAND_COOLDOWN = 60 # 1 –º–∏–Ω—É—Ç–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –û–ü–∞ –≤ —Ç—Ä–µ–¥–µ
LOCATION_SWITCH_COOLDOWN = 5 # 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–º–µ–Ω—É –ª–æ–∫–∞—Ü–∏–∏ (–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥)
SUMMARIZE_COOLDOWN = 300 # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /summarize

class ThreadCreateStates(StatesGroup):
    waiting_for_op_post = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –û–ü-–ø–æ—Å—Ç–∞
    waiting_for_confirmation = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è


# –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –¥–æ—Å–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
BOARDS = list(BOARD_CONFIG.keys())

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤ ---
# ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø–æ—Å—Ç–∏—Ç—å—Å—è –∞—Ä—Ö–∏–≤—ã. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
ARCHIVE_CHANNEL_ID = int(os.getenv("ARCHIVE_CHANNEL_ID", -1002827087363))
# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã –≤ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
GITHUB_ARCHIVE_BASE_URL = "https://github.com/shlomapetia/dvachbot-backup/blob/main/archives"
# ID –±–æ—Ç–∞ –∏–∑ BOARD_CONFIG, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –∞—Ä—Ö–∏–≤–æ–≤
ARCHIVE_POSTING_BOT_ID = 'test' 

# –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏
message_queues = {board: asyncio.Queue(maxsize=9000) for board in BOARDS}

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
GLOBAL_BOTS = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–æ–≤
is_shutting_down = False
git_executor = ThreadPoolExecutor(max_workers=1)
save_executor = ThreadPoolExecutor(max_workers=os.cpu_count() or 1) # Executor –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
git_semaphore = asyncio.Semaphore(1)
post_counter_lock = asyncio.Lock()
storage_lock = asyncio.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ messages_storage, post_to_messages –∏ —Ç.–¥.


# –í–í–û–î–ò–ú –ù–û–í–£–Æ –°–¢–†–£–ö–¢–£–†–£ –î–õ–Ø –î–ê–ù–ù–´–• –ö–ê–ñ–î–û–ô –î–û–°–ö–ò
# –í–í–û–î–ò–ú –ù–û–í–£–Æ –°–¢–†–£–ö–¢–£–†–£ –î–õ–Ø –î–ê–ù–ù–´–• –ö–ê–ñ–î–û–ô –î–û–°–ö–ò
board_data = defaultdict(lambda: {
    # --- –†–µ–∂–∏–º—ã ---
    'anime_mode': False,
    'zaputin_mode': False,
    'slavaukraine_mode': False,
    'suka_blyat_mode': False,
    'last_suka_blyat': None,
    'suka_blyat_counter': 0,
    'last_mode_activation': None,
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    'last_deanon_time': 0, # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ /deanon
    'last_summarize_time': 0, # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ /summarize
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    # --- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    'last_texts': defaultdict(lambda: deque(maxlen=5)),
    'last_stickers': defaultdict(lambda: deque(maxlen=5)),
    'last_animations': defaultdict(lambda: deque(maxlen=5)),
    'spam_violations': defaultdict(dict),
    'spam_tracker': defaultdict(list),
    # --- –ú—É—Ç—ã –∏ –±–∞–Ω—ã ---
    'mutes': {},
    'shadow_mutes': {},
    # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ---
    'users': {
        'active': set(),
        'banned': set()
    },
    'message_counter': defaultdict(int),
    # --- –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º–∞) ---
    'last_user_msgs': {},
    # --- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ ---
    'last_activity': {},
    # --- –ù–û–í–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –¢–†–ï–î–û–í ---
    'threads_data': {},  # {thread_id: {'op_id', 'title', ...}}
    'user_state': {},    # {user_id: {'location', 'last_seen_main', ...}}
    'thread_locks': defaultdict(asyncio.Lock), # !!! –î–û–ë–ê–í–õ–ï–ù–û: –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Ç—Ä–µ–¥–æ–≤
})



# ========== Rate Limiter –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∞–∫—Ü–∏—è—Ö (–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ==========
AUTHOR_NOTIFY_LIMIT_PER_MINUTE = 4
author_reaction_notify_tracker = defaultdict(lambda: deque(maxlen=AUTHOR_NOTIFY_LIMIT_PER_MINUTE))
author_reaction_notify_lock = asyncio.Lock()
# ========== Debounce –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ ==========
pending_edit_tasks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {post_num: asyncio.Task}
pending_edit_lock = asyncio.Lock()

# ========== –û–ë–©–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ==========
MODE_COOLDOWN = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_ACTIVE_USERS_IN_MEMORY = 5000 # –õ–∏–º–∏—Ç –Ω–∞ —é–∑–µ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è get_user_msgs_deque

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è cooldown /fap, /gatari, /hent
ANIME_CMD_COOLDOWN = 10 # 10 —Å–µ–∫—É–Ω–¥
ANIME_CMD_COOLDOWN_PHRASES = [
    "–ù–Ø! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —Å—ç–º–ø–∞–π!",
    "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–µ—Ä–µ–∑–∞—Ä—è–∂–∞—é –≤–∞–π—Ñ—É-–ø—É—à–∫—É...",
    "–ö—É–ª–¥–∞—É–Ω, –±–∞–∫–∞! –ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ!",
    "–ü–æ–¥–æ–∂–¥–∏, —è –∏—â—É —Å–∞–º—É—é –ª—É—á—à—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ç–µ–±—è!",
    "–¢–µ—Ä–ø–µ–Ω–∏–µ, –∞–Ω–æ–Ω-—Ç—è–Ω! ( ¬¥ ‚ñΩ ` )Ôæâ"
]
anime_cmd_lock = asyncio.Lock()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "—Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö" –Ω–æ–º–µ—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤ ---
SPECIAL_NUMERALS_CONFIG = {
    # –£—Ä–æ–≤–µ–Ω—å: { 'label': '–ù–∞–∑–≤–∞–Ω–∏–µ', 'emojis': ('—ç–º–æ–¥–∑–∏', ...) }
    3: {'label': '–¢—Ä–∏–ø–ª', 'emojis': ('üé≤', '‚ú®', 'üéâ', 'üé∞')},
    4: {'label': '–ö–≤–∞–¥—Ä–∏–ø–ª', 'emojis': ('üéØ', 'üöÄ', 'üî•', 'üçÄ')},
    5: {'label': '–ü–µ–Ω—Ç–∏–ø–ª', 'emojis': ('üèÜ', '‚≠ê', 'ü•á', 'üí´')},
    6: {'label': '–°–µ–∫—Å—Ç–∏–ø–ª', 'emojis': ('üíé', 'üëë', ' JACKPOT ', 'ü§©')},
    7: {'label': '–°–µ–ø—Ç–∏–ø–ª', 'emojis': ('ü§Ø', 'üåå', 'üå†', 'ü™ê')},
    8: {'label': '–û–∫—Ç–∏–ø–ª', 'emojis': ('ü¶Ñ', 'üëΩ', 'üí†', 'üî±')}
}

# --- –û–ë–©–ï–ï –•–†–ê–ù–ò–õ–ò–©–ï –ü–û–°–¢–û–í (—Å–∫–≤–æ–∑–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è) ---
state = {
    'post_counter': 0,
    # 'message_counter', 'users_data' –∏ 'settings' —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ board_data
    # –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è/—Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ.
    # –ù–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –æ—Å—Ç–∞–≤–∏–º post_counter –∑–¥–µ—Å—å.
}
messages_storage = {}
post_to_messages = {}
message_to_post = {}
last_messages = deque(maxlen=3) # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â–∏–º
last_activity_time = datetime.now()
sent_media_groups = deque(maxlen=1000)


# –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞—Ö: media_group_id -> –¥–∞–Ω–Ω—ã–µ
current_media_groups = {}
media_group_timers = {}
user_spam_locks = defaultdict(asyncio.Lock)
media_group_creation_lock = asyncio.Lock() # <-- –î–û–ë–ê–í–õ–ï–ù–û

# –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ aiogram
os.environ["AIORGRAM_DISABLE_SIGNAL_HANDLERS"] = "1"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è cooldown /deanon
DEANON_COOLDOWN = 180  # 3 –º–∏–Ω—É—Ç—ã
last_deanon_time = 0
deanon_lock = asyncio.Lock()

# –§—Ä–∞–∑—ã –¥–ª—è cooldown
DEANON_COOLDOWN_PHRASES = [
    "–≠–π –≥–∞–Ω–¥–æ–Ω, –¥–µ–∞–Ω–æ–Ω–µ—Ä—ã –∑–∞–Ω—è—Ç—ã! –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É.",
    "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –ø–∏–¥–æ—Ä–∞—Å! –ü–æ–¥–æ–∂–¥–∏ —Ö–æ—Ç—è –±—ã –º–∏–Ω—É—Ç—É.",
    "–ù–µ —Å–ø–µ—à–∏, –µ–±–ª–∞–Ω! –î–µ–∞–Ω–æ–Ω —Ä–∞–∑ –≤ 2 –º–∏–Ω—É—Ç—ã.",
    "–ü–æ–¥–æ–∂–¥–∏, —É–µ–±–æ–∫! –î–µ–∞–Ω–æ–Ω–µ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã.",
    "–ê–±—É —Å–æ—Å–µ—Ç —Ö—É–π. –ü–æ–¥–æ–∂–¥–∏, –ø–∏–¥–æ—Ä.",
    "–≠–π –µ–±–ª–∞–Ω! –ü–æ–¥–æ–∂–¥–∏ 060 —Å–µ–∫—É–Ω–¥.",
    "–¢–µ—Ä–ø–µ–Ω–∏–µ, –∞–Ω–æ–Ω!",
    "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!",
    "–î–µ–∞–Ω–æ–Ω-–±–æ—Ç—ã –æ—Ç–¥—ã—Ö–∞—é—Ç. –ü–æ–¥–æ–∂–¥–∏ .",
    "üïµÔ∏è‚Äç‚ôÇÔ∏è –î–µ–∞–Ω–æ–Ω–µ—Ä—ã –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ –Ω–∞ –º–∏–Ω–µ—Ç. –ü–æ–¥–æ–∂–¥–∏, –ø–∏–¥–æ—Ä",
    "üîû –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–∞–Ω–æ–Ω–∞! –§–°–ë –∑–∞–ø—ã—Ö–∞–ª–∞—Å—å!",
    "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –¥–µ–∞–Ω–æ–Ω-–ø—É—à–∫–∏. 060 —Å–µ–∫—É–Ω–¥, —Å—É–∫–∞!",
    "–ó–∞–µ–±–∞–ª–∏ —É–∂–µ! –ü–æ–¥–æ–∂–¥–∏ 300 —Å–µ–∫—É–Ω–¥, –≥–∞–Ω–¥–æ–Ω."
]

SPAM_RULES = {
    'text': {
        'max_repeats': 5,  # –ú–∞–∫—Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
        'min_length': 2,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        'window_sec': 15,  # –û–∫–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)
        'max_per_window': 7,  # –ú–∞–∫—Å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∫–Ω–µ
        'penalty': [60, 120, 300]  # –®–∫–∞–ª–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π: [1 –º–∏–Ω, 5–º–∏–Ω, 10 –º–∏–Ω]
    },
    'sticker': {
        'max_repeats': 3, # <-- –î–û–ë–ê–í–õ–ï–ù–û
        'max_per_window': 6,  # 6 —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ 18 —Å–µ–∫
        'window_sec': 18,
        'penalty': [60, 300, 600]  # 1–º–∏–Ω, 10–º–∏–Ω, 15 –º–∏–Ω
    },
    'animation': {  # –ì–∏—Ñ–∫–∏
        'max_repeats': 3, # <-- –î–û–ë–ê–í–õ–ï–ù–û
        'max_per_window': 5,  # 5 –≥–∏—Ñ–∫–∏ –∑–∞ 24 —Å–µ–∫
        'window_sec': 24,
        'penalty': [60, 300, 600]  # 1–º–∏–Ω, 10–º–∏–Ω, 15 –º–∏–Ω
    }
}




def restore_backup_on_start():
    """
    –ó–∞–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ backup-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–∫ –Ω–æ–≤—ã–µ (.gz), —Ç–∞–∫ –∏ —Å—Ç–∞—Ä—ã–µ (.json) —Ñ–æ—Ä–º–∞—Ç—ã –∫—ç—à–∞,
    –∞ —Ç–∞–∫–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é `data`.
    """
    repo_url = "https://github.com/shlomapetia/dvachbot-backup.git"
    backup_dir = "/app/backup"
    max_attempts = 3
    
    if glob.glob("*_state.json"):
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ git –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return True
    
    for attempt in range(max_attempts):
        try:
            if os.path.exists(backup_dir):
                shutil.rmtree(backup_dir)
            
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ #{attempt+1}...")
            subprocess.run(
                ["git", "clone", "--depth", "1", repo_url, backup_dir],
                check=True, timeout=180
            )
            
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –£–î–ê–õ–ï–ù –ü–†–ï–ñ–î–ï–í–†–ï–ú–ï–ù–ù–´–ô –í–´–•–û–î ---
            
            # 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è –±—ç–∫–∞–ø–∞ (state, reply_cache)
            root_backup_files = glob.glob(os.path.join(backup_dir, "*_state.json"))
            root_backup_files += glob.glob(os.path.join(backup_dir, "*_reply_cache.json.gz"))
            root_backup_files += glob.glob(os.path.join(backup_dir, "*_reply_cache.json"))

            final_root_files = {}
            for f in root_backup_files:
                base_name = os.path.basename(f).replace('.json','').replace('.gz','')
                if base_name not in final_root_files or f.endswith('.gz'):
                    final_root_files[base_name] = f
            
            if not final_root_files:
                print("‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                for src_path in final_root_files.values():
                    shutil.copy2(src_path, os.getcwd())
                print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(final_root_files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω—è –±—ç–∫–∞–ø–∞.")

            # 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'data' —Ü–µ–ª–∏–∫–æ–º, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            backup_data_dir = os.path.join(backup_dir, DATA_DIR)
            if os.path.isdir(backup_data_dir):
                shutil.copytree(backup_data_dir, DATA_DIR, dirs_exist_ok=True)
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{DATA_DIR}' —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞.")
            else:
                print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{DATA_DIR}' –≤ –±—ç–∫–∞–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            return True
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            time.sleep(5)
    
    print("‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ git –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.")
    
    if glob.glob("*_state.json"):
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±—ç–∫–∞–ø –∏–∑ Git, –Ω–æ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ó–∞–ø—É—Å–∫–∞–µ–º—Å—è —Å –Ω–∏–º–∏.")
        return True
    
    print("‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–∫–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
    return False
    
async def healthcheck(request):
    print("üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ healthcheck")
    return web.Response(text="Bot is alive")


async def start_healthcheck():
    port = int(os.environ.get('PORT', 8080))
    app = web.Application()
    app.router.add_get("/", healthcheck)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    try:
        print(f"üü¢ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å healthcheck —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        await site.start()  # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        print(f"üü¢ Healthcheck-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ healthcheck —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        raise


GITHUB_REPO = "https://github.com/shlomapetia/dvachbot-backup.git"
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å –≤ Railway!

async def git_commit_and_push():
    """–ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞ –≤ GitHub"""
    global is_shutting_down

    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ shutdown
    if git_executor._shutdown and not is_shutting_down:
        print("‚ö†Ô∏è Git executor –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø")
        return False

    async with git_semaphore:
        try:
            token = os.getenv("GITHUB_TOKEN")
            if not token:
                print("‚ùå –ù–µ—Ç GITHUB_TOKEN")
                return False

            loop = asyncio.get_running_loop()
            return await loop.run_in_executor(
                git_executor, 
                sync_git_operations, 
                token
            )
        except Exception as e:
            print(f"‚õî –û—à–∏–±–∫–∞ –≤ git_commit_and_push: {str(e)}")
            return False


def sync_git_operations(token: str) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ Git-–æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å—Ä–µ–¥ —Å –º–µ–¥–ª–µ–Ω–Ω—ã–º –¥–∏—Å–∫–æ–º.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º .json.gz –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ .json —Ñ–∞–π–ª—ã.
    –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–û –û–ë–ù–û–í–õ–Ø–ï–¢ –°–¢–†–£–ö–¢–£–†–£ –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø.
    """
    GIT_TIMEOUT = 90  # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    GIT_LOCAL_TIMEOUT = 60
    
    try:
        work_dir = "/tmp/git_backup"
        repo_url = f"https://{token}@github.com/shlomapetia/dvachbot-backup.git"

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –£–ú–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–ú–ï–°–¢–û –ü–†–û–°–¢–û–ì–û –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–Ø ---

        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.exists(work_dir):
            shutil.rmtree(work_dir)
        os.makedirs(work_dir)

        # 2. –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        print("Git: –ö–ª–æ–Ω–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –±—ç–∫–∞–ø–∞...")
        subprocess.run(
            ["git", "clone", "--depth", "1", repo_url, work_dir],
            check=True, timeout=GIT_TIMEOUT
        )
        print("Git: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        
        # 3. –ö–æ–ø–∏—Ä—É–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ü–û–í–ï–†–• —Å–∫–∞—á–∞–Ω–Ω—ã—Ö
        # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —à–∞–≥: –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º –±—ç–∫–∞–ø —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        print("Git: –û–±–Ω–æ–≤–ª—è—é –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –±—ç–∫–∞–ø–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏...")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (*_state.json, *_reply_cache.json.gz)
        root_files_to_copy = glob.glob(os.path.join(os.getcwd(), "*_state.json"))
        root_files_to_copy += glob.glob(os.path.join(os.getcwd(), "*_reply_cache.json.gz"))
        
        for src_path in root_files_to_copy:
            shutil.copy2(src_path, work_dir)

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é DATA_DIR, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        local_data_dir = os.path.join(os.getcwd(), DATA_DIR)
        backup_data_dir = os.path.join(work_dir, DATA_DIR)
        if os.path.exists(local_data_dir):
            shutil.copytree(local_data_dir, backup_data_dir, dirs_exist_ok=True)
            
        # 4. –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ .json –∫—ç—à–∏ –∏–∑ —Ä–∞–±–æ—á–µ–π –∫–æ–ø–∏–∏ git (–µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—â–µ –µ—Å—Ç—å)
        old_json_caches_in_repo = glob.glob(os.path.join(work_dir, "*_reply_cache.json"))
        if old_json_caches_in_repo:
            print(f"Git: –ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ .json –∫—ç—à–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {[os.path.basename(f) for f in old_json_caches_in_repo]}")
            for old_file in old_json_caches_in_repo:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º git rm –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                subprocess.run(["git", "-C", work_dir, "rm", os.path.basename(old_file)], check=False, timeout=GIT_LOCAL_TIMEOUT)

        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        subprocess.run(["git", "-C", work_dir, "config", "user.name", "Backup Bot"], check=True, timeout=GIT_LOCAL_TIMEOUT)
        subprocess.run(["git", "-C", work_dir, "config", "user.email", "backup@dvachbot.com"], check=True, timeout=GIT_LOCAL_TIMEOUT)
        subprocess.run(["git", "-C", work_dir, "add", "."], check=True, timeout=GIT_LOCAL_TIMEOUT)
        
        status_result = subprocess.run(["git", "-C", work_dir, "status", "--porcelain"], capture_output=True, text=True, timeout=GIT_LOCAL_TIMEOUT)
        if not status_result.stdout:
            print("‚úÖ Git: –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞.")
            return True

        commit_msg = f"Backup: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}"
        subprocess.run(["git", "-C", work_dir, "commit", "-m", commit_msg], check=True, timeout=GIT_TIMEOUT)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        push_cmd = ["git", "-C", work_dir, "push", "origin", "main"] # –£–±—Ä–∞–ª --force, —Ç.–∫. –º—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
        print(f"Git: –í—ã–ø–æ–ª–Ω—è—é: {' '.join(push_cmd)}")
        result = subprocess.run(push_cmd, capture_output=True, text=True, timeout=GIT_TIMEOUT)
        
        if result.returncode == 0:
            print(f"‚úÖ –ë–µ–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub.")
            return True
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê PUSH (–∫–æ–¥ {result.returncode}):\n{result.stderr}")
            # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π push –Ω–µ –ø—Ä–æ—à–µ–ª, –ø—Ä–æ–±—É–µ–º --force –∫–∞–∫ –∫—Ä–∞–π–Ω—é—é –º–µ—Ä—É
            print("Git: –û–±—ã—á–Ω—ã–π push –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π push...")
            force_push_cmd = ["git", "-C", work_dir, "push", "--force", "origin", "main"]
            force_result = subprocess.run(force_push_cmd, capture_output=True, text=True, timeout=GIT_TIMEOUT)
            if force_result.returncode == 0:
                print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π push —É—Å–ø–µ—à–µ–Ω.")
                return True
            else:
                print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ê–ñ–ï –° --force (–∫–æ–¥ {force_result.returncode}):\n{force_result.stderr}")
                return False

    except subprocess.TimeoutExpired as e:
        print(f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ git! –ö–æ–º–∞–Ω–¥–∞ '{' '.join(e.cmd)}' –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {e.timeout} —Å–µ–∫—É–Ω–¥.")
        print(f"--- stderr ---\n{e.stderr or '(–ø—É—Å—Ç–æ)'}\n--- stdout ---\n{e.stdout or '(–ø—É—Å—Ç–æ)'}")
        return False
    except Exception as e:
        print(f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ sync_git_operations: {e}")
        return False
        
dp = Dispatcher()
dp.message.middleware(BoardMiddleware())
dp.callback_query.middleware(BoardMiddleware())
dp.message_reaction.middleware(BoardMiddleware()) # <-- –î–û–ë–ê–í–õ–ï–ù–û
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING,  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    format="%(message)s",  # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–∞—Ç
    datefmt="%H:%M:%S"  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ
)
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è aiohttp (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä)
aiohttp_log = logging.getLogger('aiohttp')
aiohttp_log.setLevel(logging.CRITICAL)  # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è aiogram (–±–æ—Ç)
aiogram_log = logging.getLogger('aiogram')
aiogram_log.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è


def clean_html_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    if not text:
        return text
    return re.sub(r'<[^>]+>', '', text)

def add_you_to_my_posts(text: str, user_id: int) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç (You) –∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –ø–æ—Å—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –∂–µ –ø–æ—Å—Ç.
    –î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑-–ø–æ–¥ storage_lock."""
    if not text:
        return text

    pattern = r">>(\d+)"
    matches = re.findall(pattern, text)

    for post_str in matches:
        try:
            post_num = int(post_str)
            post_data = messages_storage.get(post_num, {})
            original_author = post_data.get("author_id")

            if original_author == user_id:
                target = f">>{post_num}"
                replacement = f">>{post_num} (You)"
                if target in text and replacement not in text:
                    text = text.replace(target, replacement)
        except (ValueError, KeyError):
            continue

    return text


async def auto_backup():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –í–°–ï–• –¥–æ—Å–æ–∫ –∏ –±—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 1 —á"""
    while True:
        try:
            await asyncio.sleep(SAVE_INTERVAL)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

            if is_shutting_down:
                break
            
            # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –∏ –¥–µ–ª–∞–µ—Ç –±—ç–∫–∞–ø
            await save_all_boards_and_backup()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_backup: {e}")
            await asyncio.sleep(60)
            
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
gc.set_threshold(
    500, 5, 5)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –ø–∞–º—è—Ç–∏/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏


def get_user_msgs_deque(user_id: int, board_id: str):
    """–ü–æ–ª—É—á–∞–µ–º deque –¥–ª—è —é–∑–µ—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–µ. –û—á–∏—Å—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ auto_memory_cleaner."""
    last_user_msgs_for_board = board_data[board_id]['last_user_msgs']
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º setdefault –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è deque.
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π deque, –ª–∏–±–æ —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π
    # –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é, —á—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ (race condition).
    return last_user_msgs_for_board.setdefault(user_id, deque(maxlen=10))
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---


# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMINS = {int(x) for x in os.getenv("ADMINS", "").split(",") if x}
SPAM_LIMIT = 14
SPAM_WINDOW = 15
STATE_FILE = 'state.json'
SAVE_INTERVAL = 1800  # —Å–µ–∫—É–Ω–¥
STICKER_WINDOW = 10  # —Å–µ–∫—É–Ω–¥
STICKER_LIMIT = 7
REST_SECONDS = 30  # –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
REPLY_FILE = "reply_cache.json"  # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è reply
MAX_MESSAGES_IN_MEMORY = 600  # —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 600 –ø–æ—Å—Ç–æ–≤ –≤ –æ–±—â–µ–π –ø–∞–º—è—Ç–∏


# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
MOTIVATIONAL_MESSAGES = [
    "–ß–µ–º –±–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤, —Ç–µ–º —ç–ø–∏—á–Ω–µ–µ —Ç—Ä–µ–¥—ã",
    "–û–¥–∏–Ω –∞–Ω–æ–Ω - –Ω–µ –∞–Ω–æ–Ω. –ó–æ–≤–∏ –±—Ä–∞—Ç–∏—à–µ–∫",
    "–ë–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤ - –±–æ–ª—å—à–µ —Ä–æ—Ñ–ª–æ–≤",
    "–¢–≤–æ–π –¥—Ä—É–≥ –≤—Å—ë –µ—â—ë —Å–∏–¥–∏—Ç –≤ —Ç–µ–ª–µ–≥–µ –∫–∞–∫ –Ω–æ—Ä–º–∏—Å? –ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ",
    "–ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –∞–Ω–æ–Ω = -1 –Ω–æ—Ä–º–∏—Å –≤ –º–∏—Ä–µ",
    "–°–∏–¥–∏—à—å —Ç—É—Ç –æ–¥–∏–Ω? –ó–∞–µ–±–∞–ª, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π, –Ω–µ –±—É–¥—å –∞—É—Ç–∏—Å—Ç–æ–º",
    "–ë–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤ - –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ —Ç—Ä–µ–¥ —É–º—Ä—ë—Ç",
    "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ –¥–≤–æ–π–Ω—É—é –¥–æ–∑—É –ª—É–ª–∑–æ–≤",
    "–¢–≤–æ–∏ –∫–µ–Ω—Ç—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –≤ –≤–∫? –ü–æ—Ä–∞ –∏—Ö —Å–ø–∞—Å–∞—Ç—å",
    "–ê–Ω–æ–Ω–∏–º—É—Å—ã –Ω–µ —Ä–∞–∑–º–Ω–æ–∂–∞—é—Ç—Å—è –ø–æ—á–∫–æ–≤–∞–Ω–∏–µ–º. –ó–æ–≤–∏ –Ω–æ–≤—ã—Ö",
    "–°–∫—É—á–Ω–æ? –ü–æ–∑–æ–≤–∏ –∞–Ω–æ–Ω–æ–≤, –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–µ–µ",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —á–∞—Ç = –º—ë—Ä—Ç–≤—ã–π —á–∞—Ç. –î–µ–π—Å—Ç–≤—É–π",
    "–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å. –≠—Ç–æ –∏ –º—É–∂—Å–∫–æ–π —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π —Ñ–ª–∏—Ä—Ç.",
    "–ê–±—É —Å–æ—Å–µ—Ç —Ö—É–π. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π",
    "–¢–≥–∞—á - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —á–∞—Ç. –≠—Ç–æ –∞–Ω–æ–Ω—ã",
    "–í–æ–∑—Ä–æ–∂–¥–∞–µ–º —Å–æ—Å–∞—á. –ê–Ω–æ–Ω—ã, –∑–æ–≤–∏—Ç–µ –¥—Ä—É–∑–µ–π",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞",
    "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω. –¢—ã –Ω–µ –æ–¥–∏–Ω. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π",
    "–î–∞ —Ç—ã –∑–∞–µ–±–∞–ª, –ø—Ä–∏–≥–ª–∞—à–∞–π –∞–Ω–æ–Ω–æ–≤",
    "–ß–∞—Ç —É–º–µ—Ä? –ó–∞–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ —Å –ø–æ—Ä–Ω—É—Ö–æ–π!",
    "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ö—É–π",
    "–¢–≤–æ–π –¥—Ä—É–≥ –≤—Å—ë –µ—â—ë –≤ –≤–∫? –°–†–û–ß–ù–û –°–ü–ê–°–ê–ô –ï–ì–û –û–¢ –ù–û–†–ú–ò–°–û–í–°–¢–í–ê!",
    "–ü–æ—Ä–∞ –±—ã –ø—Ä–æ–ø–∏–∞—Ä–∏—Ç—å —Ç–≥–∞—á. –≠–π —É—ë–±–æ–∫, —Ä–∞–∑–æ—à–ª–∏ –≤ —Å–≤–æ–∏ –∫–æ–Ω—Ñ—ã",
]

MOTIVATIONAL_MESSAGES_EN = [
    "The more anons, the more epic the threads",
    "One anon is no anon. Call your bros",
    "More anons = more lulz",
    "Your friend still using Telegram like a normie? Fix it",
    "Every anon you invite = -1 normie in the world",
    "Wanna make this chat great? Invite new anons",
    "More anons means less chance the thread will die",
    "Bring a friend - get a double dose of lulz"
]

DVACH_STATS_CAPTIONS = [
    "–ö–∞–∫–∏–µ –∂–µ –º—ã –≤—Å–µ –¥–æ–ª–±–∞—ë–±—ã",
    "–≤–∞–º —Å–∞–º–∏–º –Ω–µ –∑–∞–µ–±–∞–ª–æ –µ—â—ë?",
    "–î–≤–∞—á–µ—Ä—ã, —Å–∫–æ–ª—å–∫–æ –≤–∞—Å —Ç—É—Ç –Ω–∞–±–µ–∂–∞–ª–æ, –∞?",
    "–ü–æ–∫–∞–∂–∏—Ç–µ –º–∞–º–∫–µ ‚Äî –æ–Ω–∞ –∞—Ö—É–µ–µ—Ç!",
    "–¢–≥–∞—á–µ—Ä—ã, –¥–∞–≤–∞–π—Ç–µ –¥–æ –º–∏–ª–ª–∏–æ–Ω–∞ –¥–æ–∂–∏–º–∞—Ç—å!",
    "–¢—É—Ç –≤—Å–µ —Å–≤–æ–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å–µ ‚Äî –¥–æ–ª–±–æ–µ–±—ã!",
    "–ë–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ ‚Äî –±–æ–ª—å—à–µ —Å—Ä–∞—á–µ–π!",
    "–°–æ—Å–∏, –µ—Å–ª–∏ –º–∞–ª–æ –ø–æ—Å—Ç–∏—à—å!",
    "–ú–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "–ü–µ—Ä–µ–≥–æ–Ω—è–µ–º —Å–æ—Å–∞—á.",
    "–ú–æ–∂–µ—Ç –Ω—É –µ–≥–æ –Ω–∞—Ö—É–π, –∞?",
    "–í–æ—Ç –∫–æ–º—É-—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ—Ö—É–π)",
    "–£ –Ω–∞—Å –ø—Ä–æ—Å—Ç–æ –µ–±–∞–Ω—É—Ç—ã–π —á–∞—Ç.",
    "99% –ø–æ—Å—Ç–æ–≤ –æ—Ç –±–æ—Ç–æ–≤, –Ω–µ–π—Ä–æ–Ω–æ–∫ –∏ —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞",
    "üëÅÔ∏è‚Äçüó®Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–Ω–æ–Ω–æ–≤ (–Ω–µ –±–æ—Ç–æ–≤) - 3 —á–µ–ª.",
    "–°–ø–∞—Å–∏–±–æ –ê–Ω–æ–Ω–∞–º.",
    "–ê–±—É –æ–¥–æ–±—Ä—è–µ—Ç —Ç–∞–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
    "–ü–æ—Å—Ç–æ–≤ —Å—Ç–æ–ª—å–∫–æ, —á—Ç–æ –¥–∞–∂–µ –ü—ã–Ω—è –∞—Ö—É–µ–ª –±—ã!",
    "–í —ç—Ç–æ–º —á–∞—Ç–µ –±–æ–ª—å—à–µ –∂–∏–∑–Ω–∏, —á–µ–º —É –º–µ–Ω—è!",
    "–ü–∏—à–∏ –µ—â—ë, –∞–Ω–æ–Ω! –ù–µ –±—É–¥—å –æ–≤–æ—â–µ–º!",
    "–ó–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç ‚Äî –ø–ª—é—Å –∫ –∫–∞—Ä–º–µ, –º–∏–Ω—É—Å –∫ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏!",
    "–ì–æ—Ä–¥–∏—Å—å, —Ç—ã –≤ —á–∏—Å–ª–µ —ç—Ç–∏—Ö –¥–æ–ª–±–æ—ë–±–æ–≤!",
    "–¢—É—Ç –∞–Ω–æ–Ω—ã, —Ç—É—Ç –¥–≤–∏–∂, —Ç—É—Ç –ø–∏–∑–¥–µ—Ü!",
]

DVACH_STATS_CAPTIONS_EN = [
    "Statistics so Abu doesn't cry!",
    "More posts ‚Äî closer to the banhammer!",
    "How many of you degenerates showed up here?",
    "Show this to your mom ‚Äî she'll fucking faint!",
    "Not posting enough? Go get a job, loser!",
    "Every post = minus one normie in the world!",
    "100 posts ‚Äî now you're officially a channer!",
    "Let's push this to a million, anons!",
    "Less posts ‚Äî more sadness!",
    "If you're not in the top, you're a loser!",
    "Everyone's a friend here, even if all are dumbfucks!",
    "More posts ‚Äî more shitstorms!",
    "Suck it if you post too little!",
    "Abu approves this activity!",
    "Anons, don't sleep ‚Äî post more!",
    "More anons here than friends you ever had!",
    "So many posts even Putin would freak out!",
    "If you're reading this stats ‚Äî you're NOT a bot!",
    "More life in this chat than I ever had!",
    "Post more, anon! Don't be a vegetable!",
    "Every post = karma up, personal life down!",
    "Everyone here is an expert... on everything!",
    "Abu said: post, shit, don't be sad!",
    "Even your mom would post here if she knew how!",
    "Be proud, you're one of these dumbfucks!",
    "Anons, action, and pure chaos here!",
    "Posting means you're alive!",
    "More posts here than brains combined!",
]

# ========== –§—Ä–∞–∑—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∞–∫—Ü–∏—è—Ö ==========
REACTION_NOTIFY_PHRASES = {
    'ru': {
        'positive': [
            "üëç –ê–Ω–æ–Ω –¥–≤–∞—á—É–µ—Ç –ø–æ—Å—Ç #{post_num}",
            "‚úÖ –¢–≤–æ–π –ø–æ—Å—Ç #{post_num} –Ω—Ä–∞–≤–∏—Ç—Å—è –∞–Ω–æ–Ω—É!",
            "üî• –û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç #{post_num}, –∞–Ω–æ–Ω—á–∏–∫!",
            "üî• –¢–≥–∞—á –µ—â—ë —Ç–æ—Ä—Ç, –∞—Ö—É–µ–Ω–Ω—ã–π –ø–æ—Å—Ç #{post_num}!",
            "‚ù§Ô∏è –ö—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª —Ç–≤–æ–π –ø–æ—Å—Ç #{post_num}",
            "‚ù§Ô∏è –û—Ö—É–µ–Ω–Ω–æ –Ω–∞–ø–∏—Å–∞–ª –∞–Ω–æ–Ω! –õ–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç #{post_num}",
            "üçÜ –ö—Ç–æ-—Ç–æ –∫–æ–Ω—á–∏–ª –æ—Ç —Ç–≤–æ–µ–≥–æ –ø–æ—Å—Ç–∞ #{post_num}",
            "ü´∂ –ê–Ω–æ–Ω –æ–±–Ω—è–ª —Ç–≤–æ–π –ø–æ—Å—Ç #{post_num} –∏ –∑–∞–ø–ª–∞–∫–∞–ª",
        ],
        'negative': [
            "üëé –ê–Ω–æ–Ω —Å–∞–≥–∞–Ω—É–ª —Ç–≤–æ–π –ø–æ—Å—Ç #{post_num}",
            "ü§° –ê–Ω–æ–Ω –ø–æ—Å—Å–∞–ª —Ç–µ–±–µ –Ω–∞ –µ–±–∞–ª–æ –∑–∞ #{post_num}",
            "üü•‚¨áÔ∏è –°–∞–∂–∞ –Ω–∞ –ø–æ—Å—Ç #{post_num}",
            "üí© –ê–Ω–æ–Ω –Ω–∞—Å—Ä–∞–ª —Ç–µ–±–µ –Ω–∞ –ø–æ—Å—Ç #{post_num}",
            "üë∫ –¢–≤–æ–π –ø–æ—Å—Ç #{post_num} –ø—Ä–∏–∑–Ω–∞–Ω –≤—ã—Å–µ—Ä–æ–º –≥–æ–¥–∞",
            "üü•‚¨áÔ∏è SAGE SAGE SAGE –ø–æ—Å—Ç #{post_num}",
            "üí© –ê–Ω–æ–Ω —Ä–µ–ø–æ—Ä—Ç–Ω—É–ª –ø–æ—Å—Ç #{post_num}",
            "‚¨áÔ∏è –î–∏–∑–ª–∞–π–∫ –ø–æ—Å—Ç #{post_num}",            
            "ü§¢ –¢–≤–æ–π –ø–æ—Å—Ç #{post_num} —Ç—É–ø–æ–π –≤—ã—Å–µ—Ä (–ø–æ –º–Ω–µ–Ω–∏—é –∞–Ω–æ–Ω–∞)",
        ],
        'neutral': [
            "ü§î –ê–Ω–æ–Ω –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Ç–≤–æ–π –ø–æ—Å—Ç #{post_num}",
            "üëÅÔ∏è‚Äçüó®Ô∏è –ù–∞ –ø–æ—Å—Ç #{post_num} –∫—Ç–æ-—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ–º",
            "ü´• –ö—Ç–æ-—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏–ª —Ç–≤–æ–π –ø–æ—Å—Ç #{post_num} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ",
            "üëÄ –ù–∞ —Ç–≤–æ–π –ø–æ—Å—Ç #{post_num} –æ–±—Ä–∞—Ç–∏–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ",
            "üßê –¢–≤–æ–π –ø–æ—Å—Ç #{post_num} –≤—ã–∑–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å",
        ]
    },
    'en': {
        'positive': [
            "üëç Anon liked your post #{post_num}",
            "‚úÖ Your post #{post_num} is fucking wholesome!",
            "üî• Great post #{post_num}, nigger!",
            "‚ù§Ô∏è Hey chud, someone liked your post #{post_num}",
            "üçë Anon clapped your post #{post_num} cheeks",
            "üí¶ Post #{post_num} made someone wet",
        ],
        'negative': [
            "üëé Anon disliked your post #{post_num}",
            "ü§° Sage your post #{post_num}",
            "üí© Your post #{post_num} is piece of shit",
            "ü§¢ Anon says: go fuck with your dumb post #{post_num}",
            "ü§Æ Anon vomited on your post #{post_num}",
            "üíÄ Your post #{post_num} got ratioed into oblivion",
        ],
        'neutral': [
            "ü§î Anon reacted to your post #{post_num}",
            "ü§î There is reaction on your post #{post_num}",
            "üëΩ Someone reacted to post #{post_num} with alien technology",
            "ü´† Your post #{post_num} caused a mild existential crisis",
            "üëÄ Your post #{post_num} got some attention",
            "üßê Someone is interested in your post #{post_num}",
        ]
    }
}

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
INVITE_TEXTS = [
    "–ê–Ω–æ–Ω, –∑–∞–ª–µ—Ç–∞–π –≤ –¢–≥–∞—á @dvach_chatbot\n–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ",
    "–ï—Å—Ç—å —Ç–µ–ª–µ–≥–∞? –ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? \n@dvach_chatbot - –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
    "–£—Å—Ç–∞–ª –æ—Ç —Ü–µ–Ω–∑—É—Ä—ã? –•–æ—á–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏?\n –í–µ–ª–∫–∞–º –≤ –¢–≥–∞—á - @dvach_chatbot - –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ",
    "@dvach_chatbot - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    "–¢–≥–∞—á: @dvach_chatbot\n–ü–∏—à–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–°–∫—É—á–∞–µ—à—å –ø–æ –¥–≤–∞—á—É? –û–Ω —Ç—É—Ç:  –¢–≥–∞—á @dvach_chatbot\n–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞",
    "–ó–∞–ª–µ—Ç–∞–π –≤ @dvach_chatbot\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≥–¥–µ –º–æ–∂–Ω–æ –≤—Å—ë",
    "@dvach_chatbot - –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —É—Å—Ç–∞–ª –æ—Ç –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤\n100% –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å",
    "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ: @dvach_chatbot\n–ü–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–¢–≥–∞—á –≤ —Ç–µ–ª–µ–≥–µ: @dvach_chatbot\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    "@dvach_chatbot - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ü–∏—à–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–°–∞–ø —Ç–≥–∞—á: @dvach_chatbot\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞. @dvach_chatbot",
    "@dvach_chatbot - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å—Ä–∞—Ç—å –≤ —á–∞—Ç –∏ –Ω–µ –º—ã—Ç—å —Ä—É–∫–∏",
    "–£—Å—Ç–∞–ª –æ—Ç –¥–µ–≤–æ—á–µ–∫? –ó–∞—Ö–æ–¥–∏ –≤ @dvach_chatbot - —Ç—É—Ç —Ç–æ–ª—å–∫–æ –º—É–∂–∏–∫–∏ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å!",
    "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω. –¢—ã –Ω–µ –æ–¥–∏–Ω. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π. @dvach_chatbot",
    "–¢–≥–∞—á - –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ @dvach_chatbot",
]

INVITE_TEXTS_EN = [
    "Anon, join TGACH @tgchan_chatbot\nYou can post anything anonymously here",
    "Got Telegram? Wanna post anonymously?\n@tgchan_chatbot - welcome aboard",
    "Tired of censorship? Want anonymity?\nWelcome to TGACH - @tgchan_chatbot - the real chan experience in Telegram",
    "@tgchan_chatbot - anonymous chat in Telegram\nNo registration, no SMS",
    "TGACH: @tgchan_chatbot\nSay what you think, no one will know who you are"
]

# ========== –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∞–∫—Ü–∏–π ==========
POSITIVE_REACTIONS = {'üëç', '‚ù§', 'üî•', '‚ù§‚Äçüî•', 'üòç', 'üòÇ', 'ü§£', 'üëå', 'üíØ', 'üôè', 'üéâ', '‚ù§Ô∏è', '‚ô•Ô∏è', 'ü•∞', 'ü§©', 'ü§Ø'}
NEGATIVE_REACTIONS = {'üëé', 'üí©', 'ü§Æ', 'ü§°', 'ü§¢', 'üò°', 'ü§¨', 'üñï'}
# –í—Å–µ, —á—Ç–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —ç—Ç–∏ –¥–≤–∞ —Å–ø–∏—Å–∫–∞, –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º


# –î–ª—è /suka_blyat
MAT_WORDS = ["—Å—É–∫–∞", "–±–ª—è–¥—å", "–ø–∏–∑–¥–µ—Ü", "–µ–±–∞—Ç—å", "–Ω–∞—Ö", "–ø–∏–∑–¥–∞", "—Ö—É–π–Ω—è", "–µ–±–∞–ª", "–±–ª—è—Ç—å", "–æ—Ç—ä–µ–±–∏—Å—å", "–µ–±–∞–Ω—ã–π", "–µ–±–ª–∞–Ω", "–•–£–ô", "–ü–ò–ó–î–ê", "—Ö—É–π–ª–æ", "–¥–æ–ª–±–∞—ë–±", "–ø–∏–¥–æ—Ä–∞—Å"]

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ú–°–ö
MSK = timezone(timedelta(hours=3))

# ‚îÄ‚îÄ‚îÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–π error-handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@dp.errors()
async def global_error_handler(event: types.ErrorEvent) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è aiogram (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–æ—Å–æ–∫)."""
    exception = event.exception
    update = event.update

    if exception is None:
        if update:
            update_info = f"Update {update.update_id}"
            if update.message:
                update_info += f" from user {update.message.from_user.id}"
            print(f"‚ö†Ô∏è Event without exception: {update_info}")
        else:
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –±–µ–∑ update")
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ TelegramForbiddenError (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
    if isinstance(exception, TelegramForbiddenError):
        user_id = None
        telegram_object = None

        if update and update.message:
            user_id = update.message.from_user.id
            telegram_object = update.message
        elif update and update.callback_query:
            user_id = update.callback_query.from_user.id
            telegram_object = update.callback_query

        if user_id and telegram_object:
            board_id = get_board_id(telegram_object)
            if board_id:
                # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
                async with storage_lock:
                    b_data = board_data[board_id]
                    b_data['users']['active'].discard(user_id)
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "–º—É—Å–æ—Ä" –≤ –ø–∞–º—è—Ç–∏
                    b_data['last_activity'].pop(user_id, None)
                    b_data['last_texts'].pop(user_id, None)
                    b_data['last_stickers'].pop(user_id, None)
                    b_data['last_animations'].pop(user_id, None)
                    b_data['spam_violations'].pop(user_id, None)
                    b_data['spam_tracker'].pop(user_id, None)
                    b_data['last_user_msgs'].pop(user_id, None)
                    b_data['message_counter'].pop(user_id, None)
                    b_data['user_state'].pop(user_id, None)
                print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –í—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if isinstance(exception, (TelegramNetworkError, TelegramConflictError, aiohttp.ClientError)):
        print(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {type(exception).__name__}: {exception}")
        await asyncio.sleep(10)
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã aiogram "–ø—Ä–æ–≥–ª–æ—Ç–∏–ª" –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        # —Å–ª–µ–¥—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º.
        return True
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º–∏ –∏ —Ç—Ä–µ–±—É—é—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
    else:
        import traceback
        print("‚õî‚õî‚õî –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚õî‚õî‚õî")
        print(f"Exception: {type(exception).__name__}: {exception}")
        
        # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π traceback
        traceback.print_exc()

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ update, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if update:
            try:
                update_json = update.model_dump_json(exclude_none=True, indent=2)
                print(f"--- Update Context ---\n{update_json}\n--- End Update Context ---")
            except Exception as json_e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å update: {json_e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–æ—á–Ω—ã–π –∞–ø–¥–µ–π—Ç,
        # –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Ä–∞–±–æ—Ç—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏.
        return True
        
def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã"""
    if not text:
        return text
    return text.replace('&', '&amp;').replace('<', '&lt;').replace(
        '>', '&gt;').replace('"', '&quot;')


def sanitize_html(text: str) -> str:
    """
    –ù–µ–π—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –æ–ø–∞—Å–Ω—ã–µ HTML-—Ç–µ–≥–∏ (—Å—Å—ã–ª–∫–∏), —Å–æ—Ö—Ä–∞–Ω—è—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è HTML-–∏–Ω—ä–µ–∫—Ü–∏–π –∏ –¥–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç: <b>, <i>, <u>, <s>, <code>.
    –£–¥–∞–ª—è–µ—Ç: <a>.
    """
    if not text:
        return text
    # –£–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ <a>, –≤–∫–ª—é—á–∞—è –≤—Å–µ –∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ã (href –∏ —Ç.–¥.).
    # –ö–æ–Ω—Ç–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–∞ –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–µ—Ç—Å—è.
    # –§–ª–∞–≥ re.IGNORECASE –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ <A HREF...>, <A> –∏ —Ç.–¥.
    sanitized_text = re.sub(r'</?a\b[^>]*>', '', text, flags=re.IGNORECASE)
    return sanitized_text


def is_admin(uid: int, board_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–û–ô –¥–æ—Å–∫–µ."""
    if not board_id:
        return False
    return uid in BOARD_CONFIG.get(board_id, {}).get('admins', set())

def _sync_get_board_activity(
    board_id: str,
    relevant_board_ids: list[str]
) -> int:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Å—Ç–æ–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –º–∞–ª–µ–Ω—å–∫–∏–º, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º.
    """
    # –ü—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –Ω—É–∂–Ω–æ–≥–æ board_id –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.
    # –≠—Ç–æ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.
    return relevant_board_ids.count(board_id)

async def get_board_activity_last_hours(board_id: str, hours: int = 2) -> float:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ —á–∞—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–æ—Å–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤.
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ executor.
    """
    if hours <= 0:
        return 0.0

    time_threshold = datetime.now(UTC) - timedelta(hours=hours)
    
    # 1. –ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    relevant_board_ids = []
    async with storage_lock:
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –æ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∫ —Å—Ç–∞—Ä—ã–º
        for post_data in reversed(messages_storage.values()):
            post_time = post_data.get("timestamp")
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—à–ª–∏ –¥–æ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
            if not post_time or post_time < time_threshold:
                break
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ ID –¥–æ—Å–æ–∫ - —ç—Ç–æ –æ—á–µ–Ω—å –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            b_id = post_data.get("board_id")
            if b_id:
                relevant_board_ids.append(b_id)

    # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_running_loop()
    post_count = await loop.run_in_executor(
        save_executor,
        _sync_get_board_activity,
        board_id,
        relevant_board_ids  # –ü–µ—Ä–µ–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏ –ª–µ–≥–∫–∏–π —Å–ø–∏—Å–æ–∫
    )
            
    activity = post_count / hours
    return activity
    
def _sync_save_board_state(board_id: str, data_to_save: dict):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state.json. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    state_file = f"{board_id}_state.json"
    try:
        with open(state_file, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚õî [{board_id}] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state: {e}")
        return False

async def save_board_state(board_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –∏ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state.json."""
    loop = asyncio.get_running_loop()
    
    # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º –∏ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    async with storage_lock:
        b_data = board_data[board_id]
        post_counter_to_save = state.get('post_counter') if board_id == 'b' else None
        
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º shadow_mutes –∫ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ JSON
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ ISO 8601
        shadow_mutes_to_save = {
            str(user_id): expiry.isoformat()
            for user_id, expiry in b_data['shadow_mutes'].items()
        }
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–ø–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫
        data_for_sync_func = {
            'users_data': {
                'active': list(b_data['users']['active']),
                'banned': list(b_data['users']['banned']),
            },
            'message_counter': dict(b_data['message_counter']),
            'board_post_count': b_data.get('board_post_count', 0),
            'shadow_mutes': shadow_mutes_to_save, # <-- –ò–ó–ú–ï–ù–ï–ù–û
        }
        if post_counter_to_save is not None:
            data_for_sync_func['post_counter'] = post_counter_to_save

    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ
    await loop.run_in_executor(
        save_executor,
        _sync_save_board_state,
        board_id,
        data_for_sync_func
    )
    
def _sync_save_threads_data(board_id: str, data_to_save: dict):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–¥–∞—Ö. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    threads_file = os.path.join(DATA_DIR, f"{board_id}_threads.json")
    try:
        with open(threads_file, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚õî [{board_id}] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è _threads.json: {e}")
        return False

def _sync_save_user_states(board_id: str, data_to_save: dict):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    user_states_file = os.path.join(DATA_DIR, f"{board_id}_user_states.json")
    try:
        with open(user_states_file, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚õî [{board_id}] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è _user_states.json: {e}")
        return False

async def save_user_states(board_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    if board_id not in THREAD_BOARDS:
        return

    # 1. –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    async with storage_lock:
        # .copy() –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ user_state —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã
        data_to_save = board_data[board_id].get('user_state', {}).copy()

    # 2. –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ø–∏—é –≤ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(
        save_executor,
        _sync_save_user_states,
        board_id,
        data_to_save
    )

async def save_all_boards_and_backup():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –í–°–ï–• –¥–æ—Å–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –¥–µ–ª–∞–µ—Ç –æ–¥–∏–Ω –æ–±—â–∏–π –±—ç–∫–∞–ø –≤ Git."""
    print("üíæ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –±—ç–∫–∞–ø–∞...")

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è reply_cache ---
    
    # 1. –û–¥–∏–Ω —Ä–∞–∑ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≥—Ä—É–ø–ø–∏—Ä—É—è –∏—Ö –ø–æ board_id
    grouped_data_for_cache = defaultdict(lambda: {
        'post_keys': [],
        'post_to_messages': {},
        'message_to_post': {},
        'storage_meta': {}
    })

    async with storage_lock:
        # –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ –¥–æ—Å–∫–∞–º
        posts_by_board = defaultdict(list)
        for p_num, data in messages_storage.items():
            b_id = data.get("board_id")
            if b_id:
                posts_by_board[b_id].append(p_num)

        # –î–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏ –±–µ—Ä–µ–º —Å—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
        for b_id, p_nums in posts_by_board.items():
            recent_posts = sorted(p_nums)[-MAX_MESSAGES_IN_MEMORY:]
            grouped_data_for_cache[b_id]['post_keys'] = set(recent_posts) # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        # –û–¥–∏–Ω —Ä–∞–∑ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –±–æ–ª—å—à–∏–º —Å–ª–æ–≤–∞—Ä—è–º, —Ä–∞—Å–∫–∏–¥—ã–≤–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ—Å–∫–∞–º
        all_recent_posts_flat = {p_num for data in grouped_data_for_cache.values() for p_num in data['post_keys']}
        
        for p_num, data in post_to_messages.items():
            if p_num in all_recent_posts_flat:
                b_id = messages_storage.get(p_num, {}).get("board_id")
                if b_id:
                    grouped_data_for_cache[b_id]['post_to_messages'][p_num] = data # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
        
        for key, p_num in message_to_post.items():
            if p_num in all_recent_posts_flat:
                b_id = messages_storage.get(p_num, {}).get("board_id")
                if b_id:
                    grouped_data_for_cache[b_id]['message_to_post'][key] = p_num

        for b_id, data in grouped_data_for_cache.items():
            for p_num in data['post_keys']:
                post_meta = messages_storage.get(p_num)
                if post_meta:
                    data['storage_meta'][p_num] = {
                        "author_id": post_meta.get("author_id", ""),
                        "timestamp": post_meta.get("timestamp", datetime.now(UTC)).isoformat(),
                        "author_message_id": post_meta.get("author_message_id"),
                        "board_id": post_meta.get("board_id")
                    }
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    save_tasks = []
    loop = asyncio.get_running_loop()

    for board_id in BOARDS:
        save_tasks.append(save_board_state(board_id))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞
        board_cache_data = grouped_data_for_cache[board_id]
        save_tasks.append(loop.run_in_executor(
            save_executor,
            _sync_save_reply_cache,
            board_id,
            list(board_cache_data['post_keys']), # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –æ–±—Ä–∞—Ç–Ω–æ –≤ list –¥–ª—è _sync_
            board_cache_data['post_to_messages'],
            board_cache_data['message_to_post'],
            board_cache_data['storage_meta']
        ))

        if board_id in THREAD_BOARDS:
            save_tasks.append(save_threads_data(board_id))
            save_tasks.append(save_user_states(board_id))

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await asyncio.gather(*save_tasks)
    
    print("üíæ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø—É—à–∏–º –≤ GitHub...")
    success = await git_commit_and_push()
    if success:
        print("‚úÖ –ë—ç–∫–∞–ø –≤—Å–µ—Ö –¥–æ—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub.")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø –≤ GitHub.")
    return success

def _sync_save_reply_cache(
    board_id: str,
    recent_board_posts: list,
    all_post_to_messages: dict,
    all_message_to_post: dict,
    all_messages_storage_meta: dict
):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞. –†–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –µ–π –¥–∞–Ω–Ω—ã–º–∏, –∑–∞–ø–∏—Å—ã–≤–∞—è —Å–∂–∞—Ç—ã–π gzip-—Ñ–∞–π–ª."""
    reply_file = f"{board_id}_reply_cache.json.gz"
    try:
        recent_posts_set = set(recent_board_posts)

        if not recent_posts_set:
            if os.path.exists(reply_file):
                os.remove(reply_file)
            return True

        new_data = {
            "post_to_messages": {
                str(p_num): data
                for p_num, data in all_post_to_messages.items()
                if p_num in recent_posts_set
            },
            "message_to_post": {
                f"{uid}_{mid}": p_num
                for (uid, mid), p_num in all_message_to_post.items()
                if p_num in recent_posts_set
            },
            "messages_storage_meta": {
                str(p_num): all_messages_storage_meta[p_num]
                for p_num in recent_board_posts
                if p_num in all_messages_storage_meta
            }
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º gzip.open –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ 'wt' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∂–∞—Ç–æ–≥–æ JSON
        with gzip.open(reply_file, 'wt', encoding='utf-8') as f:
            json.dump(new_data, f, ensure_ascii=False, indent=2)

        return True

    except Exception as e:
        print(f"‚õî [{board_id}] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è reply_cache: {str(e)[:200]}")
        return False

def load_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –í–°–ï–• –¥–æ—Å–æ–∫ –≤ board_data."""
    global state # –¢–æ–ª—å–∫–æ –¥–ª—è post_counter

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ 'b'
    # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∫–≤–æ–∑–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
    state_file_b = 'b_state.json'
    if os.path.exists(state_file_b):
        try:
            with open(state_file_b, 'r', encoding='utf-8') as f:
                data = json.load(f)
                state['post_counter'] = data.get('post_counter', 0)
                print(f"–û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: {state['post_counter']}")
        except (json.JSONDecodeError, OSError):
             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –∏–∑ {state_file_b}.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏
    for board_id in BOARDS:
        state_file = f"{board_id}_state.json"
        if not os.path.exists(state_file):
            print(f"–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ—Å–∫–∏ '{board_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫.")
            continue

        try:
            with open(state_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ board_data[board_id]
            b_data = board_data[board_id]
            b_data['users']['active'] = set(data.get('users_data', {}).get('active', []))
            b_data['users']['banned'] = set(data.get('users_data', {}).get('banned', []))
            b_data['message_counter'].update(data.get('message_counter', {}))

            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            # –ó–∞–≥—Ä—É–∂–∞–µ–º shadow_mutes —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
            loaded_shadow_mutes = data.get('shadow_mutes', {})
            if loaded_shadow_mutes:
                deserialized_shadow_mutes = {}
                now_utc = datetime.now(UTC)
                for user_id_str, expiry_str in loaded_shadow_mutes.items():
                    try:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á –≤ int, –∞ —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                        user_id = int(user_id_str)
                        expiry_dt = datetime.fromisoformat(expiry_str)
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –º—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏
                        if expiry_dt > now_utc:
                             deserialized_shadow_mutes[user_id] = expiry_dt
                    except (ValueError, TypeError) as e:
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã
                        print(f"[{board_id}] –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ shadow_mute –¥–ª—è '{user_id_str}': {e}")
                
                b_data['shadow_mutes'] = deserialized_shadow_mutes
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
            # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
            loaded_post_count = data.get('board_post_count', 0)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 'b', —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç.
            # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–µ—Ä—é –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
            if board_id == 'b' and loaded_post_count == 0:
                b_data['board_post_count'] = 37004
            else:
                b_data['board_post_count'] = loaded_post_count

            print(f"[{board_id}] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: "
                  f"–∞–∫—Ç–∏–≤–Ω—ã—Ö = {len(b_data['users']['active'])}, "
                  f"–∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö = {len(b_data['users']['banned'])}, "
                  f"–ø–æ—Å—Ç–æ–≤ = {b_data['board_post_count']}") # <-- –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –¥–æ—Å–∫–∏
            load_reply_cache(board_id)

            # --- –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –õ–û–ì–ò–ö–ò –¢–†–ï–î–û–í ---
            if board_id in THREAD_BOARDS:
                threads_file = os.path.join(DATA_DIR, f'{board_id}_threads.json')
                if os.path.exists(threads_file):
                    try:
                        with open(threads_file, 'r', encoding='utf-8') as f:
                            loaded_threads_data = json.load(f)
                        
                        # –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 'subscribers' –∏–∑ list –≤ set
                        for thread_id, thread_info in loaded_threads_data.items():
                            if 'subscribers' in thread_info and isinstance(thread_info['subscribers'], list):
                                thread_info['subscribers'] = set(thread_info['subscribers'])
                        
                        b_data['threads_data'] = loaded_threads_data
                        print(f"[{board_id}] –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

                    except (json.JSONDecodeError, IOError) as e:
                        print(f"[{board_id}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ _threads.json: {e}")
                        b_data['threads_data'] = {}
                
                user_states_file = os.path.join(DATA_DIR, f'{board_id}_user_states.json')
                if os.path.exists(user_states_file):
                    try:
                        with open(user_states_file, 'r', encoding='utf-8') as f:
                            # –ö–ª—é—á–∏ –≤ JSON –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                            loaded_states = json.load(f)
                            b_data['user_state'] = {int(k): v for k, v in loaded_states.items()}
                            print(f"[{board_id}] –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç—Ä–µ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                    except (json.JSONDecodeError, IOError) as e:
                        print(f"[{board_id}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ _user_states.json: {e}")
                        b_data['user_state'] = {}
            # --- –ö–û–ù–ï–¶ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –õ–û–ì–ò–ö–ò –¢–†–ï–î–û–í ---

        except (json.JSONDecodeError, OSError) as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ—Å–∫–∏ '{board_id}': {e}")
            
def load_archived_post(post_num):
    """–ò—â–µ–º –ø–æ—Å—Ç –≤ –∞—Ä—Ö–∏–≤–∞—Ö"""
    for archive_file in glob.glob("archive_*.pkl.gz"):
        with gzip.open(archive_file, "rb") as f:
            data = pickle.load(f)
            if post_num in data:
                return data[post_num]
    return None

def load_reply_cache(board_id: str):
    """
    –ß–∏—Ç–∞–µ—Ç reply_cache –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±–µ—Å—à–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
    —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (.json) –Ω–∞ –Ω–æ–≤—ã–π —Å–∂–∞—Ç—ã–π (.json.gz) –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∏—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    global message_to_post, post_to_messages, messages_storage
    
    new_reply_file = f"{board_id}_reply_cache.json.gz"
    old_reply_file = f"{board_id}_reply_cache.json"
    
    reply_file = None
    is_gzipped = False

    if os.path.exists(new_reply_file) and os.path.getsize(new_reply_file) > 0:
        reply_file = new_reply_file
        is_gzipped = True
    elif os.path.exists(old_reply_file) and os.path.getsize(old_reply_file) > 0:
        reply_file = old_reply_file
    else:
        return

    try:
        if is_gzipped:
            with gzip.open(reply_file, "rt", encoding="utf-8") as f:
                data = json.load(f)
        else:
            with open(reply_file, "r", encoding="utf-8") as f:
                data = json.load(f)
    except (json.JSONDecodeError, OSError, gzip.BadGzipFile, EOFError) as e:
        print(f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (–ù–û –ü–ï–†–ï–•–í–ê–ß–ï–ù–ê): –§–∞–π–ª –∫—ç—à–∞ {reply_file} –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ({e}).")
        print("     –§–∞–π–ª –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
        try:
            os.remove(reply_file)
        except OSError:
            pass
        return
    
    valid_post_nums = set()
    for p_str, meta in data.get("messages_storage_meta", {}).items():
        if "board_id" not in meta or meta.get("board_id") == board_id:
            try:
                p = int(p_str)
                valid_post_nums.add(p)
                
                if 'timestamp' in meta:
                    dt = datetime.fromisoformat(meta['timestamp'])
                    if dt.tzinfo is None:
                        dt = dt.replace(tzinfo=UTC)
                    
                    final_board_id = meta.get("board_id", board_id)
                    messages_storage[p] = {
                        "author_id": meta["author_id"],
                        "timestamp": dt,
                        "author_message_id": meta.get("author_msg"),
                        "board_id": final_board_id
                    }
            except (ValueError, TypeError):
                continue

    loaded_post_count = 0
    for p_str, mapping in data.get("post_to_messages", {}).items():
        try:
            p_num = int(p_str)
            if p_num in valid_post_nums:
                post_to_messages[p_num] = { int(uid): mid for uid, mid in mapping.items() }
                loaded_post_count += 1
        except (ValueError, TypeError):
            continue
            
    for key, post_num in data.get("message_to_post", {}).items():
        try:
            if post_num in valid_post_nums:
                uid, mid = map(int, key.split("_"))
                message_to_post[(uid, mid)] = post_num
        except (ValueError, TypeError):
            continue
            
    status = "—Å–∂–∞—Ç–æ" if is_gzipped else "—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç"
    print(f"[{board_id}] reply-cache –∑–∞–≥—Ä—É–∂–µ–Ω: {loaded_post_count} –ø–æ—Å—Ç–æ–≤ ({status})")

async def graceful_shutdown(bots: list[Bot], healthcheck_site: web.TCPSite | None = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –í–°–ï–• –¥–æ—Å–æ–∫ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π."""
    global is_shutting_down
    if is_shutting_down:
        return

    is_shutting_down = True
    print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª shutdown, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

    # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    try:
        await dp.stop_polling()
        print("‚è∏ Polling –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling: {e}")

    # 2. –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    print("–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π (–¥–æ 10 —Å–µ–∫—É–Ω–¥)...")
    all_queues_empty = False
    for _ in range(10):
        if all(q.empty() for q in message_queues.values()):
            all_queues_empty = True
            break
        await asyncio.sleep(1)
    
    if all_queues_empty:
        print("‚úÖ –í—Å–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
    else:
        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è.")

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –û–°–¢–ê–ù–û–í–ö–ò ---

    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø, –ü–û–ö–ê event loop –µ—â–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–µ–Ω
    print("üíæ –ü–æ–ø—ã—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –±—ç–∫–∞–ø–∞ –≤ GitHub (—Ç–∞–π–º–∞—É—Ç 120 —Å–µ–∫—É–Ω–¥)...")
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∞ –Ω–µ –∫–∞–∫ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        await asyncio.wait_for(save_all_boards_and_backup(), timeout=120.0)
        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ç–∞–π–º–∞—É—Ç–∞.")
    except asyncio.TimeoutError:
        print("‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø –Ω–µ —É—Å–ø–µ–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω!")
    except Exception as e:
        print(f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: {e}")

    # 4. –¢–û–õ–¨–ö–û –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    print("–û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    await asyncio.gather(*tasks, return_exceptions=True)
    print("‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    # 5. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ (healthcheck, executor'—ã)
    print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    try:
        if healthcheck_site:
            await healthcheck_site.stop()
            print("üõë Healthcheck server stopped")

        # Executor'—ã –ª—É—á—à–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –∏—Ö –∑–∞–¥–∞—á–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω—ã
        git_executor.shutdown(wait=False, cancel_futures=True)
        save_executor.shutdown(wait=False, cancel_futures=True)
        print("üõë Executors shutdown initiated.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    
    # 6. –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, –∫–æ–≥–¥–∞ —É–∂–µ —Ç–æ—á–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Å—Å–∏—é, –º—ã –µ–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    # –≠—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ –±–ª–æ–∫–µ finally —Ñ—É–Ω–∫—Ü–∏–∏ main(), —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–µ—Å—Ç–æ–º.
    print("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ graceful_shutdown –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –≤ main().")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
# ========== –ë–õ–û–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–ê–ú–Ø–¢–ò ==========

def _sync_get_memory_summary() -> str:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–º—è—Ç–∏.
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤ ThreadPoolExecutor.
    """
    # –ò–º–ø–æ—Ä—Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–æ–¥—É–ª—å, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    import io
    import sys
    from pympler import muppy, summary

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
    all_objects = muppy.get_objects()
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –≤—ã–≤–æ–¥ 25 —Å–∞–º—ã–º–∏ "—Ç—è–∂–µ–ª—ã–º–∏" —Ç–∏–ø–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    sum_result = summary.summarize(all_objects)
    
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É
    old_stdout = sys.stdout
    sys.stdout = captured_output = io.StringIO()
    summary.print_(sum_result, limit=25)
    sys.stdout = old_stdout # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–∞ –º–µ—Å—Ç–æ
    
    return captured_output.getvalue()

async def log_memory_summary():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏.
    """
    print(f"\n--- üìù –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏ –≤ {datetime.now(UTC).strftime('%Y-%m-%d %H:%M:%S UTC')} ---")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    gc.collect()
    
    loop = asyncio.get_running_loop()
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        summary_text = await loop.run_in_executor(
            save_executor, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π executor
            _sync_get_memory_summary
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(summary_text.strip())
        print("--- ‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω ---\n")
        
    except Exception as e:
        print(f"--- ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞–º—è—Ç–∏: {e} ---\n")

# ===============================================

async def auto_memory_cleaner():
    """
    –ü–æ–ª–Ω–∞—è –∏ —á–µ—Å—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.
    (–í–ï–†–°–Ø 8.0 - –ë–ï–ó EXECUTOR –î–õ–Ø –û–ß–ò–°–¢–ö–ò –°–õ–û–í–ê–†–ï–ô)
    """
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    global message_to_post
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    while True:
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

        deleted_post_keys = []
        
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
        async with storage_lock:
            # --- –ë–ª–æ–∫ 1: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ ---
            if len(messages_storage) > MAX_MESSAGES_IN_MEMORY:
                to_delete_count = len(messages_storage) - MAX_MESSAGES_IN_MEMORY
                # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –±–µ—Ä–µ–º —Å—Ä–µ–∑ —Å –Ω–∞—á–∞–ª–∞.
                # –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –ø–æ–ª–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞–º–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.
                all_keys = list(messages_storage.keys())
                deleted_post_keys = all_keys[:to_delete_count]
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                
                for post_num in deleted_post_keys:
                    messages_storage.pop(post_num, None)
                    post_to_messages.pop(post_num, None)

            if deleted_post_keys:
                print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª–µ–Ω–æ {len(deleted_post_keys)} —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.")

            # --- –ë–ª–æ–∫ 2: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ message_to_post "–Ω–∞ –º–µ—Å—Ç–µ" ---
            actual_post_nums = set(messages_storage.keys())
            
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ ---
            # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            keys_to_delete = [
                key for key, post_num in message_to_post.items()
                if post_num not in actual_post_nums
            ]
            
            # –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ —É–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è,
            # –∏–∑–±–µ–≥–∞—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–≥–æ –ø–æ–ª–Ω–æ–π –∫–æ–ø–∏–∏ –≤ –ø–∞–º—è—Ç–∏.
            deleted_count = len(keys_to_delete)
            if deleted_count > 0:
                for key in keys_to_delete:
                    del message_to_post[key]
                print(f"üßπ –û—á–∏—Å—Ç–∫–∞ message_to_post: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π.")
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            # --- –ë–ª–æ–∫ 3: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
            for board_id in BOARDS:
                b_data = board_data[board_id]
                now_utc = datetime.now(UTC)
                
                users_with_active_restrictions = {uid for uid, expiry in b_data.get('mutes', {}).items() if expiry > now_utc}
                users_with_active_restrictions.update({uid for uid, expiry in b_data.get('shadow_mutes', {}).items() if expiry > now_utc})

                inactive_threshold = timedelta(hours=12)
                
                users_to_purge = [
                    uid for uid, last_time in b_data.get('last_activity', {}).items()
                    if (now_utc - last_time) > inactive_threshold and uid not in users_with_active_restrictions
                ]
                
                purged_count = 0
                for user_id in users_to_purge:
                    b_data['last_activity'].pop(user_id, None)
                    b_data['last_texts'].pop(user_id, None)
                    b_data['last_stickers'].pop(user_id, None)
                    b_data['last_animations'].pop(user_id, None)
                    b_data['spam_violations'].pop(user_id, None)
                    b_data['spam_tracker'].pop(user_id, None)
                    b_data['last_user_msgs'].pop(user_id, None)
                    b_data['message_counter'].pop(user_id, None)
                    b_data['user_state'].pop(user_id, None) 
                    purged_count += 1
                
                if purged_count > 0:
                    print(f"üßπ [{board_id}] –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {purged_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

                for user_id in list(b_data.get('mutes', {}).keys()):
                    if b_data['mutes'][user_id] < now_utc:
                        b_data['mutes'].pop(user_id, None)
                for user_id in list(b_data.get('shadow_mutes', {}).keys()):
                    if b_data['shadow_mutes'][user_id] < now_utc:
                        b_data['shadow_mutes'].pop(user_id, None)
                
                spam_tracker_board = b_data['spam_tracker']
                window_sec = SPAM_RULES.get('text', {}).get('window_sec', 15)
                window_start = now_utc - timedelta(seconds=window_sec)
                for user_id in list(spam_tracker_board.keys()):
                    spam_tracker_board[user_id] = [t for t in spam_tracker_board[user_id] if t > window_start]
                    if not spam_tracker_board[user_id]:
                        del spam_tracker_board[user_id]
        
        # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        # --- –ë–ª–æ–∫ 4: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø ---
        now_ts = time.time()
        stale_groups = [
            group_id for group_id in current_media_groups
            if group_id not in media_group_timers
        ]
        if stale_groups:
             print(f"üßπ –ù–∞–π–¥–µ–Ω–æ {len(stale_groups)} –∑–∞–≤–∏—Å—à–∏—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
             for group_id in stale_groups:
                 current_media_groups.pop(group_id, None)
                 if group_id in media_group_timers:
                     media_group_timers[group_id].cancel()
                     media_group_timers.pop(group_id, None)

        # --- –ë–ª–æ–∫ 5: –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π ---
        tracker_inactive_threshold_sec = 11 * 3600
        keys_to_delete_from_tracker = [
            author_id for author_id, timestamps in author_reaction_notify_tracker.items()
            if not timestamps or (now_ts - timestamps[-1] > tracker_inactive_threshold_sec)
        ]
        if keys_to_delete_from_tracker:
            for author_id in keys_to_delete_from_tracker:
                del author_reaction_notify_tracker[author_id]

        # --- –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞ ---
        gc.collect()
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.")
        
def _sync_collect_board_statistics(hour_ago: datetime, all_messages_meta: dict) -> defaultdict[str, int]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ executor'–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    posts_per_hour = defaultdict(int)
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–ª—é—á–∞–º —Å–ª–æ–≤–∞—Ä—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±–µ–∑ –ø–æ–ª–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    # –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ dict (Python 3.7+).
    for post_num in reversed(all_messages_meta.keys()):
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        post_meta = all_messages_meta.get(post_num)
        if not post_meta:
            continue
        
        post_time = post_meta.get('timestamp')
        if not post_time or post_time < hour_ago:
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –µ—â–µ —Å—Ç–∞—Ä—à–µ.
            break
        
        b_id = post_meta.get('board_id')
        if b_id:
            posts_per_hour[b_id] += 1
            
    return posts_per_hour

async def board_statistics_broadcaster():
    """
    –†–∞–∑ –≤ —á–∞—Å —Å–æ–±–∏—Ä–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É.
    –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ executor –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–∑–∞–º–æ—Ä–æ–∑–∫–∏" –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    await asyncio.sleep(300)

    while True:
        try:
            await asyncio.sleep(3600)

            now = datetime.now(UTC)
            hour_ago = now - timedelta(hours=1)
            
            # 1. –ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            async with storage_lock:
                messages_storage_copy = messages_storage.copy()
            
            # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é, –±–ª–æ–∫–∏—Ä—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_running_loop()
            posts_per_hour = await loop.run_in_executor(
                save_executor,
                _sync_collect_board_statistics,
                hour_ago,
                messages_storage_copy
            )
            
            # 3. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for board_id in BOARDS:
                if board_id == 'test':
                    continue

                activity = await get_board_activity_last_hours(board_id, hours=2)
                if activity < 40:
                    print(f"‚ÑπÔ∏è [{board_id}] –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {activity:.1f} –ø/—á (—Ç—Ä–µ–±—É–µ—Ç—Å—è > 40).")
                    continue

                b_data = board_data[board_id]
                recipients = b_data['users']['active'] - b_data['users']['banned']
                if not recipients:
                    continue

                stats_lines = []
                for b_id_inner, config_inner in BOARD_CONFIG.items():
                    if b_id_inner == 'test': continue
                    hour_stat = posts_per_hour.get(b_id_inner, 0)
                    total_stat = board_data[b_id_inner].get('board_post_count', 0)
                    template = "<b>{name}</b> - {hour} pst/hr, total: {total}" if board_id == 'int' else "<b>{name}</b> - {hour} –ø—Å—Ç/—á–∞—Å, –≤—Å–µ–≥–æ: {total}"
                    stats_lines.append(template.format(
                        name=config_inner['name'],
                        hour=hour_stat,
                        total=total_stat
                    ))
                
                header_text = "üìä Boards Statistics:\n" if board_id == 'int' else "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–æ–∫:\n"
                full_stats_text = header_text + "\n".join(stats_lines)
                header = "### Statistics ###" if board_id == 'int' else "### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ###"

                if random.random() < 0.66:
                    captions = DVACH_STATS_CAPTIONS_EN if board_id == 'int' else DVACH_STATS_CAPTIONS
                    dvach_caption = random.choice(captions)
                    full_stats_text = f"{full_stats_text}\n\n<i>{dvach_caption}</i>"

                _, post_num = await format_header(board_id)
                content = {"type": "text", "header": header, "text": full_stats_text, "is_system_message": True}
                
                async with storage_lock:
                    messages_storage[post_num] = {'author_id': 0, 'timestamp': now, 'content': content, 'board_id': board_id}
                
                await message_queues[board_id].put({"recipients": recipients, "content": content, "post_num": post_num, "board_id": board_id})
                
                print(f"‚úÖ [{board_id}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–æ–∫ #{post_num} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ board_statistics_broadcaster: {e}")
            await asyncio.sleep(120)
            
async def setup_pinned_messages(bots: dict[str, Bot]):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞."""
    
    for board_id, bot_instance in bots.items():
        b_data = board_data[board_id]
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        if board_id == 'int':
            base_help_text = random.choice(HELP_TEXT_EN_COMMANDS)
            boards_header = "üåê <b>All boards:</b>"
            board_links = "\n".join(
                f"<b>{config['name']}</b> {config['description_en']} - {config['username']}"
                for b_id, config in BOARD_CONFIG.items() if b_id != 'test'
            )
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            if board_id in THREAD_BOARDS:
                thread_info = (
                    "\n\n<b>This board supports threads!</b>\n"
                    "/create &lt;title&gt; - Create a new thread\n"
                    "/threads - View active threads\n"
                    "/leave - Return to the main board from a thread"
                )
            else:
                thread_info = ""
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        else:
            base_help_text = random.choice(HELP_TEXT_COMMANDS)
            boards_header = "üåê <b>–í—Å–µ –¥–æ—Å–∫–∏:</b>"
            board_links = "\n".join(
                f"<b>{config['name']}</b> {config['description']} - {config['username']}"
                for b_id, config in BOARD_CONFIG.items() if b_id != 'test'
            )
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            if board_id in THREAD_BOARDS:
                thread_info = (
                    "\n\n<b>–ù–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ –µ—Å—Ç—å —Ç—Ä–µ–¥—ã!</b>\n"
                    "/create &lt;–∑–∞–≥–æ–ª–æ–≤–æ–∫&gt; - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–¥\n"
                    "/threads - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–¥—ã\n"
                    "/leave - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –¥–æ—Å–∫—É –∏–∑ —Ç—Ä–µ–¥–∞"
                )
            else:
                thread_info = ""
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_help_text = (
            f"{base_help_text}\n"
            f"{thread_info}\n\n" # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–¥–∞—Ö
            f"{boards_header}\n{board_links}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ /start –∏ /help
        b_data['start_message_text'] = full_help_text
        
        print(f"üìå [{board_id}] –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏ –∑–∞–∫—Ä–µ–ø–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.")

async def get_board_chunk(board_id: str, hours: int = 6, thread_id: str | None = None) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞–Ω–∫ –ø–æ—Å—Ç–æ–≤ –¥–æ—Å–∫–∏ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."""
    now = datetime.now(UTC)
    time_threshold = now - timedelta(hours=hours)
    lines = []
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–ª—è —Ç—Ä–µ–¥–æ–≤ ---
    async with storage_lock:
        storage_copy = list(messages_storage.values())

    post_iterator = storage_copy
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω thread_id, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–≥–æ
    if thread_id:
        b_data = board_data[board_id]
        thread_info = b_data.get('threads_data', {}).get(thread_id)
        if not thread_info:
            return "" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ç—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            
        thread_post_nums = set(thread_info.get('posts', []))
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞
        post_iterator = [p for p_num, p in messages_storage.items() if p_num in thread_post_nums]
        # –î–ª—è —Ç—Ä–µ–¥–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (hours)
        time_threshold = datetime.min.replace(tzinfo=UTC)

    for post in post_iterator:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å–∫—É –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            if post.get('board_id') != board_id:
                continue
            # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞–Ω–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –¥–ª—è —Ç—Ä–µ–¥–∞ - –æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞
            if post.get('timestamp', now) < time_threshold:
                continue
            if post.get('author_id') == 0: # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                continue

            content = post.get('content', {})
            ttype = content.get('type')

            if ttype == 'text':
                text = content.get('text', '')
                text = clean_html_tags(text)
                text = re.sub(r'^(–ü–æ—Å—Ç ‚Ññ\d+.*?\n|Post No\.\d+.*?\n)', '', text, flags=re.MULTILINE)
                text = re.sub(r'^(###.*?###|<i>.*?</i>)\s*\n?', '', text, flags=re.MULTILINE)
                text = text.strip()
                if text:
                    lines.append(text)
        except Exception as e:
            print(f"[summarize] Error while chunking post: {e}, post: {post}")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    full_text = "\n".join(lines)
    cleaned_chunk = re.sub(r'\n{2,}', '\n', full_text).strip()

    context_name = f"thread {thread_id}" if thread_id else f"board {board_id}"
    print(f"[summarize] Chunk for {context_name} built, len={len(cleaned_chunk)}")
    
    return cleaned_chunk[:35000]
    
async def check_spam(user_id: int, msg: Message, board_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∞–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º –∏ —Å–±—Ä–æ—Å–æ–º —É—Ä–æ–≤–Ω—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ—Å–æ–∫)"""
    b_data = board_data[board_id]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if msg.content_type == 'text':
        msg_type = 'text'
        content = msg.text
    elif msg.content_type == 'sticker':
        msg_type = 'sticker'
        content = msg.sticker.file_id # <-- –ò–ó–ú–ï–ù–ï–ù–û: –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º ID
    elif msg.content_type == 'animation':
        msg_type = 'animation'
        content = msg.animation.file_id # <-- –ò–ó–ú–ï–ù–ï–ù–û: –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º ID
    elif msg.content_type in ['photo', 'video', 'document'] and msg.caption:
        msg_type = 'text'
        content = msg.caption
    else:
        return True # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞

    rules = SPAM_RULES.get(msg_type)
    if not rules:
        return True

    now = datetime.now(UTC)
    violations = b_data['spam_violations'].setdefault(user_id, {'level': 0, 'last_reset': now})

    # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
    if (now - violations['last_reset']) > timedelta(hours=1):
        violations['level'] = 0
        violations['last_reset'] = now
    
    # --- –ù–ê–ß–ê–õ–û –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ã ---
    max_repeats = rules.get('max_repeats')
    if max_repeats and content:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        if msg_type == 'text':
            last_items_deque = b_data['last_texts'][user_id]
        elif msg_type == 'sticker':
            last_items_deque = b_data['last_stickers'][user_id]
        elif msg_type == 'animation':
            last_items_deque = b_data['last_animations'][user_id]
        else:
            last_items_deque = None

        if last_items_deque is not None:
            last_items_deque.append(content)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ N –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
            if len(last_items_deque) >= max_repeats:
                if len(set(last_items_deque)) == 1:
                    violations['level'] = min(violations['level'] + 1, len(rules['penalty']) - 1)
                    last_items_deque.clear() # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π)
            if msg_type == 'text' and len(last_items_deque) == 4:
                if len(set(last_items_deque)) == 2:
                    contents = list(last_items_deque)
                    p1 = [contents[0], contents[1]] * 2
                    p2 = [contents[1], contents[0]] * 2
                    if contents == p1 or contents == p2:
                        violations['level'] = min(violations['level'] + 1, len(rules['penalty']) - 1)
                        last_items_deque.clear() # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                        return False
    # --- –ö–û–ù–ï–¶ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê ---

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    window_start = now - timedelta(seconds=rules['window_sec'])
    b_data['spam_tracker'][user_id] = [t for t in b_data['spam_tracker'][user_id] if t > window_start]
    b_data['spam_tracker'][user_id].append(now)

    if len(b_data['spam_tracker'][user_id]) >= rules['max_per_window']:
        violations['level'] = min(violations['level'] + 1, len(rules['penalty']) - 1)
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        # –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –±–∞–Ω–∞
        del b_data['spam_tracker'][user_id]
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        return False
        
    return True

async def apply_penalty(bot_instance: Bot, user_id: int, msg_type: str, board_id: str):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º—É—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
    async with user_spam_locks[user_id]:  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        b_data = board_data[board_id]
        rules = SPAM_RULES.get(msg_type, {})
        if not rules:
            return
            
        violations_data = b_data['spam_violations'].get(user_id, {'level': 0, 'last_reset': datetime.now(UTC)})
        level = violations_data['level']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω –º—É—Ç
        current_mute = b_data['mutes'].get(user_id)
        if current_mute and current_mute > datetime.now(UTC):
            return  # –ú—É—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        
        level = min(level, len(rules.get('penalty', [])) - 1)
        mute_seconds = rules['penalty'][level] if rules.get('penalty') else 30
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç
        b_data['mutes'][user_id] = datetime.now(UTC) + timedelta(seconds=mute_seconds)
        
        violation_type = {'text': "—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∞–º", 'sticker': "—Å–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏", 'animation': "—Å–ø–∞–º –≥–∏—Ñ–∫–∞–º–∏"}.get(msg_type, "—Å–ø–∞–º")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        mute_duration = f"{mute_seconds} —Å–µ–∫" if mute_seconds < 60 else f"{mute_seconds//60} –º–∏–Ω"
        print(f"üö´ [{board_id}] –ú—É—Ç –∑–∞ —Å–ø–∞–º: user {user_id}, —Ç–∏–ø: {violation_type}, —É—Ä–æ–≤–µ–Ω—å: {level+1}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {mute_duration}")
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if mute_seconds < 60:
                time_str = f"{mute_seconds} —Å–µ–∫"
            elif mute_seconds < 3600:
                time_str = f"{mute_seconds // 60} –º–∏–Ω"
            else:
                time_str = f"{mute_seconds // 3600} —á–∞—Å"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            lang = 'en' if board_id == 'int' else 'ru'
            
            if lang == 'en':
                violation_type_en = {'text': "text spam", 'sticker': "sticker spam", 'animation': "gif spam"}.get(msg_type, "spam")
                phrases = [
                    "üö´ Hey faggot, you are muted for {time} for {violation} on the {board} board.\nKeep spamming - get banned.",
                    "üîá Too much spam, buddy. Take a break for {time} on {board}.",
                    "üö® Spam detected! You've been silenced for {time} for {violation} on {board}. Don't do it again.",
                    "üõë Stop right there, criminal scum! You're muted for {time} on {board} for spamming."
                ]
                notification_text = random.choice(phrases).format(
                    time=time_str, 
                    violation=violation_type_en, 
                    board=BOARD_CONFIG[board_id]['name']
                )
            else:
                phrases = [
                    "üö´ –≠–π –ø–∏–¥–æ—Ä, —Ç—ã –≤ –º—É—Ç–µ –Ω–∞ {time} –∑–∞ {violation} –Ω–∞ –¥–æ—Å–∫–µ {board}\n–°–ø–∞–º–∏—à—å –¥–∞–ª—å—à–µ - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω.",
                    "üîá –¢—ã –∑–∞–µ–±–∞–ª —Å–ø–∞–º–∏—Ç—å. –û—Ç–¥–æ—Ö–Ω–∏ {time} –Ω–∞ –¥–æ—Å–∫–µ {board}.",
                    "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º! –¢–≤–æ—è –ø–∞—Å—Ç—å –∑–∞–≤–∞–ª–µ–Ω–∞ –Ω–∞ {time} –∑–∞ {violation} –Ω–∞ –¥–æ—Å–∫–µ {board}. –ü–æ–≤—Ç–æ—Ä–∏—à—å - –ø–æ–ª—É—á–∏—à—å –ø–æ –∂–æ–ø–µ.",
                    "üõë –°—Ç–æ–π, –ø–∏–¥–æ—Ä–∞—Å! –¢—ã –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω –Ω–∞ {time} –º–æ–ª—á–∞–Ω–∏—è –Ω–∞ –¥–æ—Å–∫–µ {board} –∑–∞ —Å–≤–æ–π –≤—ã—Å–µ—Ä."
                ]
                notification_text = random.choice(phrases).format(
                    time=time_str, 
                    violation=violation_type, 
                    board=BOARD_CONFIG[board_id]['name']
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot_instance.send_message(user_id, notification_text, parse_mode="HTML")
            await send_moderation_notice(user_id, "mute", board_id, duration=time_str)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—É—Ç–µ: {e}")

def _get_random_header_prefix(lang: str = 'ru') -> str:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    rand_prefix = random.random()
    
    if lang == 'en':
        if rand_prefix < 0.005: return "### ADMIN ### "
        if rand_prefix < 0.008: return "Me - "
        if rand_prefix < 0.01: return "Faggot - "
        if rand_prefix < 0.012: return "### DEGENERATE ### "
        if rand_prefix < 0.016: return "Biden - "
        if rand_prefix < 0.021: return "EMPEROR CONAN - "
        return ""

    # Russian prefixes (default)
    if rand_prefix < 0.005: return "### –ê–î–ú–ò–ù ### "
    if rand_prefix < 0.008: return "–ê–±—É - "
    if rand_prefix < 0.01: return "–ü–∏–¥–æ—Ä - "
    if rand_prefix < 0.012: return "### –î–ñ–£–õ–£–ü ### "
    if rand_prefix < 0.014: return "### –•—É–µ—Å–æ—Å ### "
    if rand_prefix < 0.016: return "–ü—ã–Ω—è - "
    if rand_prefix < 0.018: return "–ù–∞—Ä–∏–º–∞–Ω –ù–∞–º–∞–∑–æ–≤ - "
    if rand_prefix < 0.021: return "–ò–ú–ü–ï–†–ê–¢–û–† –ö–û–ù–ê–ù - "
    if rand_prefix < 0.023: return "–ê–Ω—Ç–æ–Ω –ë–∞–±–∫–∏–Ω - "
    if rand_prefix < 0.025: return "### –ù–ê–†–ò–ú–ê–ù –ù–ê–ú–ê–ó–û–í ### "
    if rand_prefix < 0.027: return "### –ü–£–¢–ò–ù ### "
    if rand_prefix < 0.028: return "–ì–µ–π - "
    if rand_prefix < 0.030: return "–ê–Ω–∞—Ä—Ö–∏—Å—Ç - "
    if rand_prefix < 0.033: return "### –ò–º–±–µ—Ü–∏–ª ### "
    if rand_prefix < 0.035: return "### –ß–ú–û ### "
    if rand_prefix < 0.037: return "### –û–ù–ê–ù–ò–°–¢ ### "
    if rand_prefix < 0.040: return "### –ß–ï–ß–ï–ù–ï–¶ ### "
    if rand_prefix < 0.042: return "–ê–ê–ê–ê–ê–ê–ê–ê - "
    if rand_prefix < 0.044: return "### –ê–Ω–∏–º–µ –¥–µ–≤–æ—á–∫–∞ ### "
    return ""

async def format_thread_post_header(board_id: str, local_post_num: int, author_id: int, thread_info: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞ –í–ù–£–¢–†–ò —Ç—Ä–µ–¥–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∏ –º–µ—Ç–∫–æ–π (OP)."""
    b_data = board_data[board_id]
    op_marker = ""
    if author_id != 0 and author_id == thread_info.get('op_id'):
        op_marker = " (OP)"

    if b_data['slavaukraine_mode']:
        return f"üíôüíõ –üi—Å—Ç ‚Ññ{local_post_num}/{MAX_POSTS_PER_THREAD}{op_marker}"
    if b_data['zaputin_mode']:
        return f"üá∑üá∫ –ü–æ—Å—Ç ‚Ññ{local_post_num}/{MAX_POSTS_PER_THREAD}{op_marker}"
    if b_data['anime_mode']:
        return f"üå∏ ÊäïÁ®ø {local_post_num}/{MAX_POSTS_PER_THREAD} Áï™{op_marker}"
    if b_data['suka_blyat_mode']:
        return f"üí¢ –ü–æ—Å—Ç ‚Ññ{local_post_num}/{MAX_POSTS_PER_THREAD}{op_marker}"

    rand = random.random()
    circle = ""
    if rand < 0.003: circle = "üî¥ "
    elif rand < 0.006: circle = "üü¢ "
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
    prefix = _get_random_header_prefix(lang='ru')
    
    header_text = f"{circle}{prefix}–ü–æ—Å—Ç ‚Ññ{local_post_num}/{MAX_POSTS_PER_THREAD}{op_marker}"
    return header_text

async def format_header(board_id: str) -> Tuple[str, int]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å—Ç–æ–≤."""
    async with post_counter_lock:
        state['post_counter'] += 1
        post_num = state['post_counter']
        
        board_data[board_id].setdefault('board_post_count', 0)
        board_data[board_id]['board_post_count'] += 1
    
    if board_id == 'int':
        circle = ""
        rand_circle = random.random()
        if rand_circle < 0.003: circle = "üî¥ "
        elif rand_circle < 0.006: circle = "üü¢ "
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
        prefix = _get_random_header_prefix(lang='en')
        header_text = f"{circle}{prefix}Post No.{post_num}"
        return header_text, post_num

    b_data = board_data[board_id]

    if b_data['slavaukraine_mode']:
        return f"üíôüíõ –üi—Å—Ç ‚Ññ{post_num}", post_num
    if b_data['zaputin_mode']:
        return f"üá∑üá∫ –ü–æ—Å—Ç ‚Ññ{post_num}", post_num
    if b_data['anime_mode']:
        return f"üå∏ ÊäïÁ®ø {post_num} Áï™", post_num
    if b_data['suka_blyat_mode']:
        return f"üí¢ –ü–æ—Å—Ç ‚Ññ{post_num}", post_num

    rand = random.random()
    circle = ""
    if rand < 0.003: circle = "üî¥ "
    elif rand < 0.006: circle = "üü¢ "
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
    prefix = _get_random_header_prefix(lang='ru')
    header_text = f"{circle}{prefix}–ü–æ—Å—Ç ‚Ññ{post_num}"
    return header_text, post_num

async def delete_user_posts(bot_instance: Bot, user_id: int, time_period_minutes: int, board_id: str) -> int:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ö–û–ù–ö–†–ï–¢–ù–û–ô –¥–æ—Å–∫–∏, –≤–∫–ª—é—á–∞—è –æ—á–∏—Å—Ç–∫—É –∏–∑ —Ç—Ä–µ–¥–æ–≤."""
    try:
        time_threshold = datetime.now(UTC) - timedelta(minutes=time_period_minutes)
        
        messages_to_delete_from_api = []

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥ –µ–¥–∏–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π ---
        async with storage_lock:
            posts_to_delete_info = []
            
            # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
            # –ó–∞–º–µ–Ω–∞ sorted() –Ω–∞ reversed() –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∫ —Å—Ç–∞—Ä—ã–º –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
            for post_num in reversed(messages_storage):
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
                post_data = messages_storage.get(post_num, {})
                post_time = post_data.get('timestamp')

                if not post_time or post_time < time_threshold:
                    break

                if post_data.get('author_id') == user_id and post_data.get('board_id') == board_id:
                    posts_to_delete_info.append((post_num, post_data.get('thread_id')))
                    if post_num in post_to_messages:
                        for uid, mid in post_to_messages[post_num].items():
                            messages_to_delete_from_api.append((uid, mid))

            if not posts_to_delete_info:
                return 0
            
            # 2. –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            for post_num, thread_id in posts_to_delete_info:
                if post_num in post_to_messages:
                    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
                    for uid, mid in list(post_to_messages[post_num].items()):
                        message_to_post.pop((uid, mid), None)
                
                post_to_messages.pop(post_num, None)
                messages_storage.pop(post_num, None)

                # –û—á–∏—Å—Ç–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–∞
                if board_id in THREAD_BOARDS and thread_id:
                    threads_data = board_data[board_id].get('threads_data', {})
                    if thread_id in threads_data and 'posts' in threads_data[thread_id]:
                        try:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                            thread_posts_set = set(threads_data[thread_id]['posts'])
                            thread_posts_set.discard(post_num)
                            threads_data[thread_id]['posts'] = list(thread_posts_set)
                        except (ValueError, KeyError):
                            pass
        # --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ ---
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        # 3. –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
        deleted_count = 0
        for chat_id, message_id in messages_to_delete_from_api:
            try:
                await bot_instance.delete_message(chat_id, message_id)
                deleted_count += 1
            except (TelegramBadRequest, TelegramForbiddenError):
                continue
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        
        return deleted_count

    except Exception as e:
        import traceback
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ delete_user_posts: {e}\n{traceback.format_exc()}")
        return 0
        
async def delete_single_post(post_num: int, bot_instance: Bot) -> int:
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç, –≤–∫–ª—é—á–∞—è –æ—á–∏—Å—Ç–∫—É –∏–∑ —Ç—Ä–µ–¥–∞."""
    messages_to_delete_info = []

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–ª–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π ---
    async with storage_lock:
        if post_num not in messages_storage:
            return 0

        post_data = messages_storage.get(post_num, {})
        board_id = post_data.get('board_id')

        # 1. –û—á–∏—â–∞–µ–º –ø–æ—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–∞
        if board_id and board_id in THREAD_BOARDS:
            thread_id = post_data.get('thread_id')
            if thread_id:
                threads_data = board_data[board_id].get('threads_data', {})
                if thread_id in threads_data:
                    try:
                        if 'posts' in threads_data[thread_id]:
                             threads_data[thread_id]['posts'].remove(post_num)
                    except (ValueError, KeyError):
                        pass

        # 2. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–∫–∞ –¥–µ—Ä–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if post_num in post_to_messages:
            for uid, mid in post_to_messages[post_num].items():
                messages_to_delete_info.append((uid, mid))

        # 3. –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
        for uid, mid in messages_to_delete_info:
            message_to_post.pop((uid, mid), None)
        
        post_to_messages.pop(post_num, None)
        messages_storage.pop(post_num, None)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ ---

    # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    deleted_count = 0
    for (uid, mid) in messages_to_delete_info:
        try:
            await bot_instance.delete_message(uid, mid)
            deleted_count += 1
        except (TelegramBadRequest, TelegramForbiddenError):
            continue
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {mid} —É {uid}: {e}")

    return deleted_count
    
async def send_moderation_notice(user_id: int, action: str, board_id: str, duration: str = None, deleted_posts: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –≤ —á–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏."""
    b_data = board_data[board_id]
    if not b_data['users']['active']:
        return

    _, post_num = await format_header(board_id)
    header = "### –ê–¥–º–∏–Ω ###"
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    lang = 'en' if board_id == 'int' else 'ru'

    if action == "ban":
        if lang == 'en':
            ban_phrases = [
                f"üö® A faggot has been banned for spam. RIP.",
                f"‚ò†Ô∏è Another spammer bites the dust. Good riddance.",
                f"üî® The ban hammer has spoken. A degenerate was removed.",
                f"‚úàÔ∏è Sent a spammer on a one-way trip to hell."
            ]
        else:
            ban_phrases = [
                f"üö® –•—É–µ—Å–æ—Å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º. –ü–æ–º—è–Ω–µ–º.",
                f"‚ò†Ô∏è –ú–∏—Ä —Å—Ç–∞–ª —á–∏—â–µ, –µ—â–µ –æ–¥–∏–Ω —Å–ø–∞–º–µ—Ä –æ—Ç–ª–µ—Ç–µ–ª –≤ –±–∞–Ω.",
                f"üî® –ë–∞–Ω—Ö–∞–º–º–µ—Ä –æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ –≥–æ–ª–æ–≤—É –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç–∞.",
                f"‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–∞–º–µ—Ä–∞ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—Ö—É–π."
            ]
        text = random.choice(ban_phrases)

    elif action == "mute":
        if lang == 'en':
            mute_phrases = [
                f"üîá A loudmouth has been muted for a while.",
                f"ü§´ Someone's got a timeout. Let's enjoy the silence.",
                f"ü§ê Put a sock in it! A user has been temporarily silenced.",
                f"‚åõÔ∏è A faggot is in the penalty box for a bit."
            ]
        else:
            mute_phrases = [
                f"üîá –ü–∏–¥–æ—Ä–∞—Å–∞ –∑–∞–º—É—Ç–∏–ª–∏ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ.",
                f"ü§´ –ù–∞—Å–ª–∞–∂–¥–∞–µ–º—Å—è —Ç–∏—à–∏–Ω–æ–π, —Ö—É–µ–≥–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å.",
                f"ü§ê –ê–Ω–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —É–≥–æ–ª –ø–æ–¥—É–º–∞—Ç—å –æ —Å–≤–æ–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏.",
                f"‚åõÔ∏è –ü–∏–¥–æ—Ä—É –≤—ã–ø–∏—Å–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä—Ç–∞."
            ]
        text = random.choice(mute_phrases)
    else:
        return
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    content = {
        'type': 'text',
        'header': header,
        'text': text,
        'is_system_message': True
    }

    messages_storage[post_num] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data["users"]["active"],
        "content": content,
        "post_num": post_num,
        "board_id": board_id
    })

async def process_new_post(
    bot_instance: Bot,
    board_id: str,
    user_id: int,
    content: dict,
    reply_to_post: int | None,
    is_shadow_muted: bool
):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.
    (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–Ø –° –£–õ–£–ß–®–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö)
    """
    b_data = board_data[board_id]
    current_post_num = None
    
    try:
        user_location = b_data.get('user_state', {}).get(user_id, {}).get('location', 'main')
        thread_id = None
        recipients = set()
        
        if board_id in THREAD_BOARDS and user_location != 'main':
            thread_id = user_location
            thread_info = b_data.get('threads_data', {}).get(thread_id)

            if not thread_info or thread_info.get('is_archived'):
                b_data['user_state'].setdefault(user_id, {})['location'] = 'main'
                lang = 'en' if board_id == 'int' else 'ru'
                await bot_instance.send_message(user_id, random.choice(thread_messages[lang]['thread_not_found']))
                return

            if user_id in thread_info.get('local_mutes', {}):
                if time.time() < thread_info['local_mutes'][user_id]: return
                else: del thread_info['local_mutes'][user_id]
            
            if user_id in thread_info.get('local_shadow_mutes', {}):
                expires_ts = thread_info['local_shadow_mutes'][user_id]
                if time.time() < expires_ts:
                    is_shadow_muted = True
                else:
                    del thread_info['local_shadow_mutes'][user_id]

            async with b_data['thread_locks'][thread_id]:
                local_post_num = len(thread_info.get('posts', [])) + 1
                header_text = await format_thread_post_header(board_id, local_post_num, user_id, thread_info)
                _, current_post_num = await format_header(board_id)
                thread_info['posts'].append(current_post_num)
                thread_info['last_activity_at'] = time.time()
            
            recipients = thread_info.get('subscribers', set()) - {user_id}

            posts_count = len(thread_info.get('posts', []))
            milestones = [50, 150, 220]
            for milestone in milestones:
                if posts_count == milestone and milestone not in thread_info.get('announced_milestones', []):
                    thread_info.setdefault('announced_milestones', []).append(milestone)
                    asyncio.create_task(post_thread_notification_to_channel(
                        bots=GLOBAL_BOTS,
                        board_id=board_id,
                        thread_id=thread_id,
                        thread_info=thread_info,
                        event_type='milestone',
                        details={'posts': milestone}
                    ))

        else:
            header_text, current_post_num = await format_header(board_id)
            recipients = b_data['users']['active'] - {user_id}

        numeral_level = check_post_numerals(current_post_num)
        if numeral_level:
            asyncio.create_task(post_special_num_to_channel(
                bots=GLOBAL_BOTS, board_id=board_id, post_num=current_post_num,
                level=numeral_level, content=content, author_id=user_id
            ))

        content['header'] = header_text
        content['reply_to_post'] = reply_to_post
        content['post_num'] = current_post_num

        reply_info_for_author = {}
        async with storage_lock:
            messages_storage[current_post_num] = {
                'author_id': user_id, 'timestamp': datetime.now(UTC), 'content': content,
                'author_message_id': None, 'board_id': board_id, 'thread_id': thread_id
            }
            if reply_to_post:
                reply_info_for_author = post_to_messages.get(reply_to_post, {})

        content_for_author = await _apply_mode_transformations(content.copy(), board_id)
        
        author_results = await send_message_to_users(
            bot_instance=bot_instance, recipients={user_id},
            content=content_for_author, reply_info=reply_info_for_author
        )
        
        if author_results and author_results[0] and author_results[0][1]:
            sent_to_author = author_results[0][1]
            messages_to_save = sent_to_author if isinstance(sent_to_author, list) else [sent_to_author]
            author_message_id_to_archive = messages_to_save[0].message_id
            
            async with storage_lock:
                if current_post_num in messages_storage:
                    messages_storage[current_post_num]['author_message_id'] = author_message_id_to_archive
                
                for m in messages_to_save:
                    post_to_messages.setdefault(current_post_num, {})[user_id] = m.message_id
                    message_to_post[(user_id, m.message_id)] = current_post_num
        
        if not is_shadow_muted and recipients:
            await message_queues[board_id].put({
                'recipients': recipients, 'content': content, 'post_num': current_post_num,
                'board_id': board_id, 'thread_id': thread_id
            })

        if not content.get('is_system_message'):
            asyncio.create_task(_forward_post_to_realtime_archive(
                bot_instance=bot_instance, board_id=board_id, post_num=current_post_num, content=content
            ))

    except TelegramForbiddenError:
        b_data['users']['active'].discard(user_id)
        print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ (–∏–∑ process_new_post).")
        if current_post_num:
            async with storage_lock:
                messages_storage.pop(current_post_num, None)
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω traceback.format_exc() –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_new_post –¥–ª—è user {user_id}: {e}\n{traceback.format_exc()}")
        if current_post_num:
            async with storage_lock:
                messages_storage.pop(current_post_num, None)

async def _forward_post_to_realtime_archive(bot_instance: Bot, board_id: str, post_num: int, content: dict):
    """
    –ù–∞–¥–µ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ø–∏—é –ø–æ—Å—Ç–∞ –≤ —Ä–µ–∞–ª-—Ç–∞–π–º –∞—Ä—Ö–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª.
    –î–ª—è –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–≥–ª—É—à–∫–∏.
    (–í–ï–†–°–ò–Ø 7.0 - –í–û–ó–í–†–ê–¢ –ö –ó–ê–ì–õ–£–®–ö–ê–ú –î–õ–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò)
    """
    archive_bot = GLOBAL_BOTS.get(ARCHIVE_POSTING_BOT_ID)
    if not archive_bot:
        print(f"‚õî –û—à–∏–±–∫–∞: –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª-—Ç–∞–π–º –∞—Ä—Ö–∏–≤ ('{ARCHIVE_POSTING_BOT_ID}') –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        board_name = BOARD_CONFIG.get(board_id, {}).get('name', board_id)
        lang = 'en' if board_id == 'int' else 'ru'
        header_text = f"<b>{board_name}</b> | {'Post' if lang == 'en' else '–ü–æ—Å—Ç'} ‚Ññ{post_num}"

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü–æ–ª–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–≥–ª—É—à–∫–∏ ---
        
        text_content = ""
        content_type_str = str(content.get("type", "")).split('.')[-1].lower()

        if content_type_str == 'text':
            text_content = content.get('text', '')
        else:
            # –î–ª—è –≤—Å–µ—Ö –º–µ–¥–∏–∞-—Ç–∏–ø–æ–≤ –±–µ—Ä–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            text_content = content.get('caption', '') or ''
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è —Å–∞–º–æ–≥–æ –º–µ–¥–∏–∞
            media_placeholders = {
                'photo': '[–§–æ—Ç–æ]', 'video': '[–í–∏–¥–µ–æ]', 'animation': '[GIF]', 'sticker': '[–°—Ç–∏–∫–µ—Ä]',
                'document': '[–î–æ–∫—É–º–µ–Ω—Ç]', 'audio': '[–ê—É–¥–∏–æ]', 'voice': '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]',
                'video_note': '[–ö—Ä—É–∂–æ–∫]', 'media_group': '[–ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞]'
            }
            placeholder = media_placeholders.get(content_type_str, f'[{content_type_str}]')
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏ –ø–æ–¥–ø–∏—Å—å
            text_content = f"{placeholder}\n{text_content}".strip()

        final_text = f"{header_text}\n\n{text_content}"
        if len(final_text) > 4096:
            final_text = final_text[:4093] + "..."

        async def send_with_retry():
            try:
                await archive_bot.send_message(
                    chat_id=REALTIME_ARCHIVE_CHANNEL_ID,
                    text=final_text,
                    parse_mode="HTML"
                )
            except TelegramRetryAfter as e:
                print(f"‚ö†Ô∏è –ü–æ–ø–∞–ª–∏ –Ω–∞ –ª–∏–º–∏—Ç API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∞—Ä—Ö–∏–≤. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫...")
                await asyncio.sleep(e.retry_after + 1)
                await send_with_retry()
            except TelegramBadRequest as e:
                print(f"‚ùå BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ #{post_num} –≤ –∞—Ä—Ö–∏–≤: {e}")

        await send_with_retry()
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    except Exception as e:
        import traceback
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç #{post_num} –≤ —Ä–µ–∞–ª-—Ç–∞–π–º –∞—Ä—Ö–∏–≤: {e}")
        traceback.print_exc()
            
async def _apply_mode_transformations(content: dict, board_id: str) -> dict:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–Ω–∏–º–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    –í–ê–ñ–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å. –í—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
    –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–æ–ø–∏—é, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª.
    """
    b_data = board_data[board_id]
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –£–¥–∞–ª–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏. –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –º—É—Ç–∏—Ä—É–µ—Ç 'content'. ---
    modified_content = content
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    is_transform_mode_active = (
        b_data['anime_mode'] or b_data['slavaukraine_mode'] or
        b_data['zaputin_mode'] or b_data['suka_blyat_mode']
    )

    if not is_transform_mode_active:
        return modified_content

    if 'text' in modified_content and modified_content['text']:
        modified_content['text'] = clean_html_tags(modified_content['text'])
    if 'caption' in modified_content and modified_content['caption']:
        modified_content['caption'] = clean_html_tags(modified_content['caption'])

    if b_data['anime_mode']:
        if 'text' in modified_content and modified_content['text']:
            modified_content['text'] = anime_transform(modified_content['text'])
        if 'caption' in modified_content and modified_content['caption']:
            modified_content['caption'] = anime_transform(modified_content['caption'])
        
        if modified_content.get('type') == 'text' and random.random() < 0.49:
            if random.random() < 0.31:
                anime_img_url = await get_monogatari_image()
                print(f"[ANIME DEBUG] Attempting Monogatari image...")
            else:
                anime_img_url = await get_random_anime_image()
                print(f"[ANIME DEBUG] Attempting random waifu image...")

            print(f"[ANIME DEBUG] Got anime_img_url: {anime_img_url}")

            if anime_img_url:
                text_content = modified_content.pop('text', '')
                modified_content.update({
                    'type': 'photo',
                    'caption': text_content,
                    'image_url': anime_img_url
                })
                print(f"[ANIME DEBUG] –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞: {anime_img_url}")
            else:
                print("[ANIME DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, fallback emoji")
                modified_content['text'] = f"üå∏ {modified_content.get('text', '')}"

    elif b_data['slavaukraine_mode']:
        if 'text' in modified_content and modified_content['text']:
            modified_content['text'] = ukrainian_transform(modified_content['text'])
        if 'caption' in modified_content and modified_content['caption']:
            modified_content['caption'] = ukrainian_transform(modified_content['caption'])
            
    elif b_data['zaputin_mode']:
        if 'text' in modified_content and modified_content['text']:
            modified_content['text'] = zaputin_transform(modified_content['text'])
        if 'caption' in modified_content and modified_content['caption']:
            modified_content['caption'] = zaputin_transform(modified_content['caption'])
            
    elif b_data['suka_blyat_mode']:
        if 'text' in modified_content and modified_content['text']:
            words = modified_content['text'].split()
            for i in range(len(words)):
                if random.random() < 0.3: words[i] = random.choice(MAT_WORDS)
            modified_content['text'] = ' '.join(words)
        if 'caption' in modified_content and modified_content['caption']:
            caption = modified_content['caption']
            words = caption.split()
            for i in range(len(words)):
                if random.random() < 0.3: words[i] = random.choice(MAT_WORDS)
            modified_content['caption'] = ' '.join(words)
    
    return modified_content

async def _format_message_body(
    content: dict, 
    user_id_for_context: int, 
    post_data: dict, # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    reply_to_post_author_id: int | None # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–∞–∫—Ü–∏–∏, reply, greentext, (You)).
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –ù–ï –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º –∏ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    parts = []
    
    # –ë–ª–æ–∫ –æ—Ç–≤–µ—Ç–∞
    reply_to_post = content.get('reply_to_post')
    if reply_to_post:
        you_marker = " (You)" if user_id_for_context == reply_to_post_author_id else ""
        reply_line = f">>{reply_to_post}{you_marker}"
        formatted_reply_line = f"<code>{escape_html(reply_line)}</code>"
        parts.append(formatted_reply_line)
        
    # –ë–ª–æ–∫ —Ä–µ–∞–∫—Ü–∏–π
    reactions_data = post_data.get('reactions')
    
    if reactions_data:
        reaction_lines = []
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ó–∞–º–µ–Ω–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ .get() ---
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç KeyError, –µ—Å–ª–∏ 'users' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ 'reactions' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user_reactions = reactions_data.get('users', {})
        if isinstance(user_reactions, dict):
            all_emojis = [emoji for user_emojis in user_reactions.values() for emoji in user_emojis]
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
            positive_display = sorted([e for e in all_emojis if e in POSITIVE_REACTIONS])
            neutral_display = sorted([e for e in all_emojis if e not in POSITIVE_REACTIONS and e not in NEGATIVE_REACTIONS])
            negative_display = sorted([e for e in all_emojis if e in NEGATIVE_REACTIONS])
            
            if positive_display: reaction_lines.append("".join(positive_display))
            if neutral_display: reaction_lines.append("".join(neutral_display))
            if negative_display: reaction_lines.append("".join(negative_display))

        elif 'positive' in reactions_data or 'negative' in reactions_data:
            if reactions_data.get('positive'): reaction_lines.append("".join(reactions_data['positive']))
            if reactions_data.get('neutral'): reaction_lines.append("".join(reactions_data['neutral']))
            if reactions_data.get('negative'): reaction_lines.append("".join(reactions_data['negative']))
        
        if reaction_lines:
            reactions_block = "\n".join(reaction_lines)
            parts.append(reactions_block)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    main_text_raw = content.get('text') or content.get('caption') or ''
    if main_text_raw:
        formatted_main_text = apply_greentext_formatting(main_text_raw)
        parts.append(formatted_main_text)
        
    return '\n\n'.join(filter(None, parts))

async def send_message_to_users(
    bot_instance: Bot,
    recipients: set[int],
    content: dict,
    reply_info: dict | None = None,
    keyboard: InlineKeyboardMarkup | None = None,
) -> list:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫."""
    if not recipients or not content or 'type' not in content:
        return []

    board_id = next((b_id for b_id, config in BOARD_CONFIG.items() if config['token'] == bot_instance.token), None)
    if not board_id:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å–∫—É –¥–ª—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º ...{bot_instance.token[-6:]}")
        return []

    b_data = board_data[board_id]
    modified_content = await _apply_mode_transformations(content.copy(), board_id)
    
    blocked_users = set()
    active_recipients = {uid for uid in recipients if uid not in b_data['users']['banned']}
    if not active_recipients:
        return []

    user_specific_data = {}
    async with storage_lock:
        post_num = modified_content.get('post_num')
        post_data = messages_storage.get(post_num, {})
        reply_to_post_num = modified_content.get('reply_to_post')
        reply_author_id = messages_storage.get(reply_to_post_num, {}).get('author_id') if reply_to_post_num else None

        for uid in active_recipients:
            reply_to_mid = None
            if reply_info and isinstance(reply_info, dict):
                reply_to_mid = reply_info.get(uid)
            if reply_to_mid is None and reply_to_post_num:
                if reply_to_post_num in post_to_messages and isinstance(post_to_messages[reply_to_post_num], dict):
                    reply_to_mid = post_to_messages[reply_to_post_num].get(uid)

            header_text = modified_content.get('header', '')
            head = f"<i>{escape_html(header_text)}</i>"
            if uid == reply_author_id:
                if "–ü–æ—Å—Ç" in head: head = head.replace("–ü–æ—Å—Ç", "üî¥ –ü–æ—Å—Ç")
                if "Post" in head: head = head.replace("Post", "üî¥ Post")

            content_for_user = modified_content.copy()
            text_or_caption = content_for_user.get('text') or content_for_user.get('caption')
            if text_or_caption:
                text_with_you = add_you_to_my_posts(text_or_caption, uid)
                if 'text' in content_for_user:
                    content_for_user['text'] = text_with_you
                elif 'caption' in content_for_user:
                    content_for_user['caption'] = text_with_you

            formatted_body = await _format_message_body(
                content=content_for_user, user_id_for_context=uid,
                post_data=post_data, reply_to_post_author_id=reply_author_id
            )
            
            user_specific_data[uid] = {
                'reply_to_mid': reply_to_mid,
                'head': head,
                'body': formatted_body,
            }
    
    async def really_send(uid: int):
        data = user_specific_data.get(uid)
        if not data: return None
        
        reply_to = data['reply_to_mid']
        head = data['head']
        formatted_body = data['body']
        
        try:
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
            ct_raw = modified_content["type"]
            # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç 'video' –∏–∑ 'ContentType.VIDEO' –∏–ª–∏ 'video' –∏–∑ 'video'
            ct = str(ct_raw).split('.')[-1].lower()
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
            full_text = f"{head}\n\n{formatted_body}" if formatted_body else head

            if ct == "media_group":
                if not modified_content.get('media'): return None
                builder = MediaGroupBuilder()
                for idx, media in enumerate(modified_content['media']):
                    caption = full_text if idx == 0 else None
                    builder.add(type=media['type'], media=media['file_id'], caption=caption, parse_mode="HTML" if caption else None)
                return await bot_instance.send_media_group(chat_id=uid, media=builder.build(), reply_to_message_id=reply_to)
            
            method_name = f"send_{ct}"
            if ct == 'text': method_name = 'send_message'
            send_method = getattr(bot_instance, method_name)
            
            kwargs = {'chat_id': uid, 'reply_to_message_id': reply_to, 'reply_markup': keyboard}
            
            if ct == 'text':
                kwargs.update(text=full_text, parse_mode="HTML")
            elif ct in ['photo', 'video', 'animation', 'document', 'audio', 'voice']:
                if len(full_text) > 1024: full_text = full_text[:1021] + "..."
                kwargs.update(caption=full_text, parse_mode="HTML")
                file_source = modified_content.get('image_url') or modified_content.get("file_id")
                kwargs[ct] = file_source
            elif ct in ['video_note', 'sticker']:
                kwargs[ct] = modified_content.get("file_id")
            else:
                return None
            
            try:
                return await send_method(**kwargs)
            except TelegramBadRequest as e:
                if ct == 'photo' and 'image_url' in modified_content and ("failed to get HTTP URL content" in e.message or "wrong type" in e.message):
                    error_text = "‚ö†Ô∏è [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]"
                    fallback_content = f"{head}\n\n{error_text}\n\n{formatted_body}"
                    return await bot_instance.send_message(
                        chat_id=uid, text=fallback_content, parse_mode="HTML",
                        reply_to_message_id=reply_to, reply_markup=keyboard)
                
                placeholder_map = {"VOICE_MESSAGES_FORBIDDEN": " VOICE MESSAGE ", "VIDEO_MESSAGES_FORBIDDEN": " VIDEO MESSAGE (–∫—Ä—É–∂–æ–∫) "}
                for error_str, placeholder in placeholder_map.items():
                    if error_str in e.message:
                        error_info = (f"<b>[ üö´ Blocked Content ]</b>\n\n" f"You have blocked receiving {placeholder} in your Telegram privacy settings.") if board_id == 'int' else (f"<b>[ –¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –º–µ–¥–∏–∞, –Ω–æ... ]</b>\n\n" f"–£ –≤–∞—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ {placeholder}")
                        return await bot_instance.send_message(
                            chat_id=uid, text=f"{head}\n\n{error_info}", parse_mode="HTML",
                            reply_to_message_id=reply_to, reply_markup=keyboard)
                raise e

        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after + 1)
            return await really_send(uid)
        except TelegramForbiddenError:
            blocked_users.add(uid)
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid} –±–æ—Ç–æ–º {bot_instance.id}: {e}")
            return None

    semaphore = asyncio.Semaphore(100)
    async def send_with_semaphore(uid):
        async with semaphore:
            result = await really_send(uid)
            return (uid, result)

    tasks = [send_with_semaphore(uid) for uid in active_recipients]
    results = await asyncio.gather(*tasks)

    async with storage_lock:
        post_num = modified_content.get('post_num')
        if post_num:
            for uid, msg in results:
                if not msg: continue
                messages_to_save = msg if isinstance(msg, list) else [msg]
                for m in messages_to_save:
                    post_to_messages.setdefault(post_num, {})[uid] = m.message_id
                    message_to_post[(uid, m.message_id)] = post_num

    if blocked_users:
        for uid in blocked_users:
            if uid in b_data['users']['active']:
                b_data['users']['active'].discard(uid)
                print(f"üö´ [{board_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")

    return results

async def edit_post_for_all_recipients(post_num: int, bot_instance: Bot):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–æ—Å—Ç–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏—Ö, –¥–æ–±–∞–≤–ª—è—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
    —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π. (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–û–†–†–ï–ö–¢–ù–û–ô –ë–õ–û–ö–ò–†–û–í–ö–û–ô)
    """
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü–æ–ª–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–∏–∫–∏ ---
    
    # –≠–¢–ê–ü 1: –°–æ–±–∏—Ä–∞–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –æ–¥–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π.
    message_copies_to_edit = {}
    board_id = None
    content_type = None
    post_data_copy = {}
    reply_author_id = None
    
    async with storage_lock:
        post_data = messages_storage.get(post_num)
        message_copies = post_to_messages.get(post_num)

        if not post_data or not message_copies:
            return

        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        message_copies_to_edit = message_copies.copy()
        post_data_copy = post_data.copy()
        board_id = post_data.get('board_id')
        content_type = post_data.get('content', {}).get('type')
        
        reply_to_post_num = post_data.get('content', {}).get('reply_to_post')
        if reply_to_post_num:
            reply_author_id = messages_storage.get(reply_to_post_num, {}).get('author_id')
        
        can_be_edited = content_type in ['text', 'photo', 'video', 'animation', 'document', 'audio']
        if not can_be_edited or not board_id:
            return

    # –≠–¢–ê–ü 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
    async def _edit_one(user_id: int, message_id: int):
        full_text = ""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≠–¢–ê–ü–ï 1.
            content = post_data_copy.get('content', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–º–µ—Ç–∫–æ–π –æ–± –æ—Ç–≤–µ—Ç–µ
            header_text = content.get('header', '')
            head = f"<i>{escape_html(header_text)}</i>"
            if user_id == reply_author_id:
                if board_id == 'int': head = head.replace("Post", "üî¥ Post")
                else: head = head.replace("–ü–æ—Å—Ç", "üî¥ –ü–æ—Å—Ç")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ —Å (You) –∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏
            content_for_user = content.copy()
            text_or_caption = content_for_user.get('text') or content_for_user.get('caption')
            if text_or_caption:
                # add_you_to_my_posts –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–ø–∏–µ–π.
                text_with_you = add_you_to_my_posts(text_or_caption, user_id)
                if 'text' in content_for_user: content_for_user['text'] = text_with_you
                elif 'caption' in content_for_user: content_for_user['caption'] = text_with_you
            
            # _format_message_body –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
            formatted_body = await _format_message_body(
                content=content_for_user,
                user_id_for_context=user_id,
                post_data=post_data_copy,
                reply_to_post_author_id=reply_author_id
            )
            full_text = f"{head}\n\n{formatted_body}" if formatted_body else head

            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–µ—Ç–µ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            if content_type == 'text':
                if len(full_text) > 4096: full_text = full_text[:4093] + "..."
                await bot_instance.edit_message_text(text=full_text, chat_id=user_id, message_id=message_id, parse_mode="HTML")
            else:
                if len(full_text) > 1024: full_text = full_text[:1021] + "..."
                await bot_instance.edit_message_caption(caption=full_text, chat_id=user_id, message_id=message_id, parse_mode="HTML")

        except TelegramBadRequest as e:
            if "message is not modified" not in e.message and "message to edit not found" not in e.message:
                 print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (BadRequest) –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ #{post_num} –¥–ª—è {user_id}: {e}")
        except TelegramForbiddenError:
            b_data = board_data.get(board_id)
            if b_data:
                b_data['users']['active'].discard(user_id)
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ #{post_num} –¥–ª—è {user_id}: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [
        _edit_one(uid, mid)
        for uid, mid in message_copies_to_edit.items()
    ]
    await asyncio.gather(*tasks)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
async def execute_delayed_edit(post_num: int, bot_instance: Bot, author_id: int | None, notify_text: str | None, delay: float = 3.0):
    """
    –ñ–¥–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å), –∞ –∑–∞—Ç–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç.
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–µ–π –∑–∞–¥–∞—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
    """
    try:
        await asyncio.sleep(delay)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ
        if author_id and notify_text:
            try:
                await bot_instance.send_message(author_id, notify_text)
            except (TelegramForbiddenError, TelegramBadRequest):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ —Ç.–¥.)
                pass

        # –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö
        await edit_post_for_all_recipients(post_num, bot_instance)
        
    except asyncio.CancelledError:
        # –®—Ç–∞—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–∞–π–º–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º.
        pass
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ execute_delayed_edit –¥–ª—è –ø–æ—Å—Ç–∞ #{post_num}: {e}")
    finally:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–≤–æ—é –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è "–æ–∂–∏–¥–∞—é—â–∏—Ö"
        async with pending_edit_lock:
            current_task = asyncio.current_task()
            if pending_edit_tasks.get(post_num) is current_task:
                pending_edit_tasks.pop(post_num, None)

async def message_broadcaster(bots: dict[str, Bot]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏."""
    tasks = [
        asyncio.create_task(message_worker(f"Worker-{board_id}", board_id, bot_instance))
        for board_id, bot_instance in bots.items()
    ]
    await asyncio.gather(*tasks)

async def message_worker(worker_name: str, board_id: str, bot_instance: Bot):
    """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏. (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    queue = message_queues[board_id]
    b_data = board_data[board_id]
    
    while True:
        try:
            msg_data = await queue.get()
            if not msg_data:
                await asyncio.sleep(0.05)
                continue

            if not await validate_message_format(msg_data):
                continue

            initial_recipients = msg_data['recipients']
            content = msg_data['content']
            post_num = msg_data['post_num']
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            keyboard = msg_data.get('keyboard') # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
            thread_id = msg_data.get('thread_id')
            
            recipients_at_location = set()
            user_states = b_data.get('user_state', {})

            for uid in initial_recipients:
                user_location = user_states.get(uid, {}).get('location', 'main')
                
                if thread_id:
                    if user_location == thread_id:
                        recipients_at_location.add(uid)
                else:
                    if user_location == 'main':
                        recipients_at_location.add(uid)
            
            active_recipients = {uid for uid in recipients_at_location if uid not in b_data['users']['banned']}

            if not active_recipients:
                continue
            
            content = await _apply_mode_transformations(content, board_id)
            content['post_num'] = post_num

            reply_info_copy = {}
            async with storage_lock:
                if post_num in post_to_messages:
                    reply_info_copy = post_to_messages[post_num].copy()

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ send_message_to_users ---
            await send_message_to_users(
                bot_instance,
                active_recipients,
                content,
                reply_info_copy,
                keyboard=keyboard 
            )
        except Exception as e:
            print(f"{worker_name} | ‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:200]}")
            import traceback
            traceback.print_exc()
            await asyncio.sleep(1)

async def _send_single_missed_post(bot: Bot, user_id: int, post_num: int):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
    –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        content_copy, reply_info_copy = None, {}
        async with storage_lock:
            post_data = messages_storage.get(post_num)
            if post_data:
                content_copy = post_data.get('content', {}).copy()
                reply_info_copy = post_to_messages.get(post_num, {})

        if content_copy:
            await send_message_to_users(bot, {user_id}, content_copy, reply_info_copy)
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è #{post_num} —é–∑–µ—Ä—É {user_id}: {e}")

async def send_missed_messages(bot: Bot, board_id: str, user_id: int, target_location: str) -> tuple[bool, bool]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –û–ü-–ø–æ—Å—Ç
    —Ç—Ä–µ–¥–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–µ—Ä–≤—ã–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–±—ã–ª–∏ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í—Å—è –ª–µ—Ç–æ–ø–∏—Å—å").
    """
    b_data = board_data[board_id]
    user_s = b_data['user_state'].setdefault(user_id, {})
    
    missed_post_nums_full = []
    last_seen_post = 0
    op_post_num = None
    
    async with storage_lock:
        if target_location == 'main':
            last_seen_post = user_s.get('last_seen_main', 0)
            all_main_posts = sorted([
                p_num for p_num, p_data in messages_storage.items() 
                if p_data.get('board_id') == board_id and not p_data.get('thread_id')
            ])
            missed_post_nums_full = [p_num for p_num in all_main_posts if p_num > last_seen_post]
        else:
            thread_id = target_location
            thread_info = b_data.get('threads_data', {}).get(thread_id)
            if not thread_info: return False, False

            all_thread_posts = sorted(thread_info.get('posts', []))
            if all_thread_posts:
                op_post_num = all_thread_posts[0]
            last_seen_threads = user_s.setdefault('last_seen_threads', {})
            last_seen_post = last_seen_threads.get(thread_id, 0)
            missed_post_nums_full = [p_num for p_num in all_thread_posts if p_num > last_seen_post]

    if not missed_post_nums_full:
        return False, False

    missed_post_nums_to_send = missed_post_nums_full.copy()
    
    MAX_MISSED_TO_SEND = 70
    if len(missed_post_nums_to_send) > MAX_MISSED_TO_SEND:
        missed_post_nums_to_send = missed_post_nums_to_send[-MAX_MISSED_TO_SEND:]

    lang = 'en' if board_id == 'int' else 'ru'
    show_history_button = False

    if op_post_num and op_post_num in missed_post_nums_to_send:
        await _send_single_missed_post(bot, user_id, op_post_num)
        missed_post_nums_to_send.remove(op_post_num)

    THRESHOLD = 30
    
    if len(missed_post_nums_full) > THRESHOLD:
        show_history_button = True
        posts_to_skip_count = len(missed_post_nums_full) - THRESHOLD
        posts_to_send = [p for p in missed_post_nums_full if p > last_seen_post][-THRESHOLD:]

        skip_notice_text = random.choice(thread_messages[lang]['missed_posts_notification']).format(count=posts_to_skip_count)
        try:
            await bot.send_message(user_id, f"<i>{skip_notice_text}</i>", parse_mode="HTML")
            await asyncio.sleep(0.1)
        except (TelegramForbiddenError, TelegramBadRequest):
            pass

        for post_num in posts_to_send:
            if post_num != op_post_num:
                await _send_single_missed_post(bot, user_id, post_num)
    else:
        for post_num in missed_post_nums_to_send:
            await _send_single_missed_post(bot, user_id, post_num)
    
    final_text = "All new messages loaded." if lang == 'en' else "–í—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
    entry_keyboard = _get_thread_entry_keyboard(board_id, show_history_button)
    
    try:
        await bot.send_message(user_id, final_text, reply_markup=entry_keyboard, parse_mode="HTML")
    except (TelegramForbiddenError, TelegramBadRequest):
        pass

    if missed_post_nums_full:
        new_last_seen = missed_post_nums_full[-1]
        
        if target_location == 'main':
            user_s['last_seen_main'] = new_last_seen
        else:
            user_s.setdefault('last_seen_threads', {})[target_location] = new_last_seen
    
    return True, show_history_button

async def help_broadcaster():
    """
    –†–∞–∑ –≤ ~4 —á–∞—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É –æ–¥–Ω–æ –∏–∑ —Ç—Ä–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—É —Ç—Ä–µ–¥–æ–≤, –≤—ã–±–∏—Ä–∞—è —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞.
    """
    await asyncio.sleep(300)  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 10 –º–∏–Ω—É—Ç

    while True:
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 11 –¥–æ 13 —á–∞—Å–æ–≤
        delay = random.randint(9600, 16800)
        await asyncio.sleep(delay)
        
        try:
            for board_id in BOARDS:
                if board_id == 'test':
                    continue

                b_data = board_data[board_id]
                recipients = b_data['users']['active'] - b_data['users']['banned']

                if not recipients:
                    continue
                
                lang = 'en' if board_id == 'int' else 'ru'
                message_text = ""

                # --- –†–∞–≤–Ω–æ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
                choice = random.randint(1, 3)
                
                if choice == 1: # 1. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
                    message_text = random.choice(HELP_TEXT_EN_COMMANDS) if lang == 'en' else random.choice(HELP_TEXT_COMMANDS)
                
                elif choice == 2: # 2. –°–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫
                    message_text = generate_boards_list(BOARD_CONFIG, lang)

                else: # 3. –†–µ–∫–ª–∞–º–∞ —Ç—Ä–µ–¥–æ–≤
                    message_text = random.choice(THREAD_PROMO_TEXT_EN) if lang == 'en' else random.choice(THREAD_PROMO_TEXT_RU)
                
                header, post_num = await format_header(board_id)
                content = {
                    'type': 'text', 'header': header, 'text': message_text,
                    'is_system_message': True
                }

                async with storage_lock:
                    messages_storage[post_num] = {
                        'author_id': 0, 'timestamp': datetime.now(UTC),
                        'content': content, 'board_id': board_id
                    }

                await message_queues[board_id].put({
                    'recipients': recipients, 'content': content,
                    'post_num': post_num, 'board_id': board_id
                })

                print(f"‚úÖ [{board_id}] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ #{post_num} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.")

        except Exception as e:
            print(f"‚ùå [{board_id}] –û—à–∏–±–∫–∞ –≤ help_broadcaster: {e}")
            await asyncio.sleep(120)

async def motivation_broadcaster():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è."""
    await asyncio.sleep(15)  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    async def board_motivation_worker(board_id: str):
        """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏."""
        while True:
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 2 –¥–æ 4 —á–∞—Å–æ–≤
                delay = random.randint(7000, 14000)
                await asyncio.sleep(delay)

                # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                # –î–æ–±–∞–≤–ª–µ–Ω await –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                activity = await get_board_activity_last_hours(board_id, hours=2)
                if activity < 60:
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                    print(f"‚ÑπÔ∏è [{board_id}] –ü—Ä–æ–ø—É—Å–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {activity:.1f} –ø/—á (—Ç—Ä–µ–±—É–µ—Ç—Å—è > 60).")
                    continue

                b_data = board_data[board_id]
                recipients = b_data['users']['active'] - b_data['users']['banned']

                if not recipients:
                    continue
                
                header, post_num = await format_header(board_id)
                
                if board_id == 'int':
                    motivation = random.choice(MOTIVATIONAL_MESSAGES_EN)
                    invite_text = random.choice(INVITE_TEXTS_EN)
                    message_text = (
                        f"üí≠ {motivation}\n\n"
                        f"Copy and send to anons:\n"
                        f"<code>{escape_html(invite_text)}</code>"
                    )
                else:
                    motivation = random.choice(MOTIVATIONAL_MESSAGES)
                    invite_text = random.choice(INVITE_TEXTS)
                    header = f"### –ê–î–ú–ò–ù ### "
                    message_text = (
                        f"üí≠ {motivation}\n\n"
                        f"–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω—á–∏–∫–∞–º:\n"
                        f"<code>{escape_html(invite_text)}</code>"
                    )

                content = {
                    'type': 'text', 'header': header, 'text': message_text,
                    'is_system_message': True
                }

                await message_queues[board_id].put({
                    'recipients': recipients, 'content': content,
                    'post_num': post_num, 'reply_info': None, 'board_id': board_id
                })

                messages_storage[post_num] = {
                    'author_id': 0, 'timestamp': datetime.now(UTC),
                    'content': content, 'board_id': board_id
                }

                print(f"‚úÖ [{board_id}] –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{post_num} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")

            except Exception as e:
                print(f"‚ùå [{board_id}] –û—à–∏–±–∫–∞ –≤ motivation_broadcaster: {e}")
                await asyncio.sleep(120)

    tasks = [asyncio.create_task(board_motivation_worker(bid)) for bid in BOARDS]
    await asyncio.gather(*tasks)
            
async def validate_message_format(msg_data: dict) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not isinstance(msg_data, dict):
        return False

    required = ['recipients', 'content', 'post_num']
    if any(key not in msg_data for key in required):
        return False

    if not isinstance(msg_data['recipients'], (set, list)):
        return False

    if not isinstance(msg_data['content'], dict):
        return False

    if (msg_data['content'].get('type') == 'media_group' and 
        not isinstance(msg_data['content'].get('media'), list)):
        return False

    return True

async def save_threads_data(board_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–¥–∞—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    if board_id not in THREAD_BOARDS:
        return

    # 1. –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    async with storage_lock:
        original_data = board_data[board_id].get('threads_data', {})
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–≥–æ–¥–Ω—É—é –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –≤ list)
        data_to_save = {}
        for thread_id, thread_info in original_data.items():
            serializable_info = thread_info.copy()
            if 'subscribers' in serializable_info and isinstance(serializable_info['subscribers'], set):
                serializable_info['subscribers'] = list(serializable_info['subscribers'])
            data_to_save[thread_id] = serializable_info

    # 2. –ü–µ—Ä–µ–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é –≤ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(
        save_executor,
        _sync_save_threads_data,
        board_id,
        data_to_save
    )

async def process_successful_messages(post_num: int, results: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)"""
    post_to_messages.setdefault(post_num, {})

    for uid, msg in results:
        if not msg:
            continue

        if isinstance(msg, list):  # –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞
            post_to_messages[post_num][uid] = msg[0].message_id
            for m in msg:
                message_to_post[(uid, m.message_id)] = post_num
        else:  # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            post_to_messages[post_num][uid] = msg.message_id
            message_to_post[(uid, msg.message_id)] = post_num

async def fetch_dvach_thread(board: str, only_new: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–¥ —Å –¥–≤–∞—á–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    f'https://2ch.hk/{board}/catalog.json') as response:
                if response.status != 200:
                    return None

                data = await response.json()

                if not data or 'threads' not in data:
                    return None

                threads = data['threads']
                if not threads:
                    return None

                if only_new and board == 'news':
                    threads.sort(key=lambda x: x.get('timestamp', 0),
                                 reverse=True)
                    threads = threads[:10]

                thread = random.choice(threads)
                thread_num = thread.get('num')

                if not thread_num:
                    return None

                async with session.get(
                        f'https://2ch.hk/{board}/res/{thread_num}.json'
                ) as thread_response:
                    if thread_response.status != 200:
                        return None

                    thread_data = await thread_response.json()

                    if not thread_data or 'threads' not in thread_data:
                        return None

                    posts = thread_data['threads'][0]['posts']
                    if not posts:
                        return None

                    op_post = posts[0]
                    text = op_post.get('comment', '')
                    text = re.sub(r'<[^>]+>', '', text)
                    text = text.replace('&gt;', '>')
                    text = text.replace('&lt;', '<')
                    text = text.replace('&amp;', '&')
                    text = text.replace('&quot;', '"')
                    text = text.replace('&#47;', '/')
                    text = text.replace('<br>', '\n')

                    if len(text) > 500:
                        text = text[:500] + '...'

                    link = f"https://2ch.hk/{board}/res/{thread_num}.html"

                    if board == 'news' or random.random() > 0.5:
                        result = f"–¢—Ä–µ–¥ —Å /{board}/:\n\n"
                        result += f"{text}\n\n"
                        result += link
                    else:
                        comment = random.choice(THREAD_COMMENTS)
                        result = f"{link}\n\n{comment}"
                        if text and random.random() > 0.3:
                            result = f"{text}\n\n{link}\n\n{comment}"

                    return result

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ —Å /{board}/: {e}")
        return None

async def dvach_thread_poster():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (—Ä–∞–∑ –≤ 2-5 —á–∞—Å–æ–≤) –ø–æ—Å—Ç–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–¥ —Å 2ch
    –Ω–∞ –°–õ–£–ß–ê–ô–ù–£–Æ –∏–∑ –Ω–∞—à–∏—Ö –¥–æ—Å–æ–∫.
    """
    await asyncio.sleep(300) # 5 –º–∏–Ω—É—Ç –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # –î–æ—Å–∫–∏ 2ch, —Å –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å —Ç—Ä–µ–¥—ã
    SOURCE_BOARDS = ['b', 'po', 'a', 'sex', 'vg', 'news']

    while True:
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 2 –¥–æ 5 —á–∞—Å–æ–≤
            delay = random.randint(7200, 18000)
            await asyncio.sleep(delay)

            # 1. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å–∫—É –ò–°–¢–û–ß–ù–ò–ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            source_board = random.choice(SOURCE_BOARDS)
            
            # 2. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å–∫—É –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –∏–∑ –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤
            destination_board_id = random.choice(BOARDS)
            
            b_data = board_data[destination_board_id]
            recipients = b_data['users']['active'] - b_data['users']['banned']

            if not recipients:
                print(f"‚ÑπÔ∏è [{destination_board_id}] –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Å—Ç–∏–Ω–≥–∞ —Ç—Ä–µ–¥–∞ —Å 2ch, –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")
                continue

            # 3. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–¥
            thread_text = await fetch_dvach_thread(source_board)
            if not thread_text:
                continue
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            header, post_num = await format_header(destination_board_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header_with_source = f"{header} (/{source_board}/)"

            content = {
                'type': 'text',
                'header': header_with_source,
                'text': thread_text, # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            }

            messages_storage[post_num] = {
                'author_id': 0, # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                'timestamp': datetime.now(UTC),
                'content': content,
                'board_id': destination_board_id
            }

            await message_queues[destination_board_id].put({
                'recipients': recipients,
                'content': content,
                'post_num': post_num,
                'board_id': destination_board_id
            })

            print(f"‚úÖ –¢—Ä–µ–¥ —Å /{source_board}/ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–æ—Å–∫–∏ /{destination_board_id}/")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ dvach_thread_poster: {e}")
            await asyncio.sleep(300) # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


    
async def check_cooldown(message: Message, board_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏"""
    b_data = board_data[board_id]
    last_activation = b_data.get('last_mode_activation')

    if last_activation is None:
        return True

    elapsed = (datetime.now(UTC) - last_activation).total_seconds()
    if elapsed < MODE_COOLDOWN:
        time_left = MODE_COOLDOWN - elapsed
        minutes = int(time_left // 60)
        seconds = int(time_left % 60)

        try:
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            lang = 'en' if board_id == 'int' else 'ru'

            if lang == 'en':
                phrases = [
                    "‚è≥ Hey faggot, slow down! Modes on this board can be switched once per hour.\nWait for: {minutes} minutes {seconds} seconds.",
                    "‚åõÔ∏è Cool down, cowboy. The mode switch is on cooldown.\nTime left: {minutes}m {seconds}s.",
                    "‚õîÔ∏è You're switching modes too often, cunt. Wait another {minutes} minutes {seconds} seconds.",
                    "‚ö†Ô∏è Wait, I need to rest. You can switch modes in {minutes}m {seconds}s."
                ]
            else:
                phrases = [
                    "‚è≥ –≠–π –ø–∏–¥–æ—Ä, –Ω–µ —Å–ø–µ—à–∏! –†–µ–∂–∏–º—ã –Ω–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å.\n–ñ–¥–∏ –µ—â–µ: {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥\n\n–ê –ø–æ–∫–∞ –ø–æ—Å–∏–¥–∏ –≤ —É–≥–ª—É –∏ –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏.",
                    "‚åõÔ∏è –û—Å—Ç—ã–Ω—å, –∫–æ–≤–±–æ–π. –ö—É–ª–¥–∞—É–Ω –Ω–∞ —Å–º–µ–Ω—É —Ä–µ–∂–∏–º–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª.\n–û—Å—Ç–∞–ª–æ—Å—å: {minutes}–º {seconds}—Å.",
                    "‚õîÔ∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—à—å —Ä–µ–∂–∏–º—ã, –∑–∞–µ–±–∞–ª. –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.",
                    "‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏, —è –æ—Ç–¥–æ—Ö–Ω—É. –†–µ–∂–∏–º—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ {minutes}–º {seconds}—Å."
                ]

            text = random.choice(phrases).format(minutes=minutes, seconds=seconds)
            await message.answer(text, parse_mode="HTML")
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞: {e}")

        await message.delete()
        return False

    return True

def check_post_numerals(post_num: int) -> int | None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ü–∏—Ñ—Ä –≤ –∫–æ–Ω—Ü–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω—Ü–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "—É—Ä–æ–≤–µ–Ω—å —Ä–µ–¥–∫–æ—Å—Ç–∏" (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤) –∏–ª–∏ None.
    """
    s = str(post_num)
    length = len(s)
    if length < 3:
        return None

    last_char = s[-1]
    count = 1
    
    # –ò–¥–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –æ—Ç –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
    for i in range(length - 2, -1, -1):
        if s[i] == last_char:
            count += 1
        else:
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª
            break
            
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞—à–µ–º –∫–æ–Ω—Ñ–∏–≥–µ
    if count in SPECIAL_NUMERALS_CONFIG:
        return count

    return None

def get_board_id(telegram_object: types.Message | types.CallbackQuery) -> str | None:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID –¥–æ—Å–∫–∏ ('b', 'po', etc.) –ø–æ –æ–±—ä–µ–∫—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫–∞.
    –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏.
    """
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ .bot ---
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        bot_token = telegram_object.bot.token
    except AttributeError:
        # –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ .bot, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å
        # –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None.
        return None
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    for board_id, config in BOARD_CONFIG.items():
        if config['token'] == bot_token:
            return board_id
    
    # –≠—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    print(f"‚ö†Ô∏è CRITICAL: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å board_id –¥–ª—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–º—Å—è –Ω–∞ ...{bot_token[-6:]}")
    return None

async def _send_thread_info_if_applicable(message: types.Message, board_id: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–¥–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –¥–æ—Å–∫–µ.
    """
    if board_id not in THREAD_BOARDS:
        return

    lang = 'en' if board_id == 'int' else 'ru'

    if lang == 'en':
        info_text = (
            "<b>This board supports threads!</b>\n\n"
            "You can create your own temporary discussion rooms. "
            "Use /create to start a new thread or /threads to view active ones."
        )
        button_create_text = "üöÄ Create a New Thread"
        button_view_text = "üìã View Active Threads"
    else:
        info_text = (
            "<b>–ù–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç—Ä–µ–¥—ã!</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–¥, –∏–ª–∏ /threads, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ."
        )
        button_create_text = "üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–¥"
        button_view_text = "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–¥—ã"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_create_text, callback_data="create_thread_start")],
        [InlineKeyboardButton(text=button_view_text, callback_data="show_active_threads")]
    ])

    try:
        await message.answer(info_text, reply_markup=keyboard, parse_mode="HTML")
    except (TelegramForbiddenError, TelegramBadRequest):
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å

# ========== –ö–û–ú–ê–ù–î–´ ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext, board_id: str | None):
    user_id = message.from_user.id
    if not board_id: return
    
    b_data = board_data[board_id]
    command_payload = message.text.split()[1] if len(message.text.split()) > 1 else None

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ç—Ä–µ–¥ —á–µ—Ä–µ–∑ –¥–∏–ø–ª–∏–Ω–∫ ---
    if command_payload and command_payload.startswith("thread_"):
        thread_id = command_payload.split('_')[-1]
        
        if board_id in THREAD_BOARDS and thread_id in b_data.get('threads_data', {}):
            b_data['users']['active'].add(user_id) # –î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
            
            # –í–´–ó–´–í–ê–ï–ú –ù–û–í–£–Æ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
            await _enter_thread_logic(
                bot=message.bot,
                board_id=board_id,
                user_id=user_id,
                thread_id=thread_id,
                message_to_delete=message
            )
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    if user_id not in b_data['users']['active']:
        b_data['users']['active'].add(user_id)
        print(f"‚úÖ [{board_id}] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ /start: ID {user_id}")
    
    start_text = b_data.get('start_message_text', "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–ì–ê–ß!")
    
    await message.answer(start_text, parse_mode="HTML", disable_web_page_preview=True)
    
    await _send_thread_info_if_applicable(message, board_id)
    
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    

AHE_EYES = ['üòµ', 'ü§§', 'üò´', 'üò©', 'üò≥', 'üòñ', 'ü•µ']
AHE_TONGUE = ['üëÖ', 'üí¶', 'üòõ', 'ü§™', 'üòù']
AHE_EXTRA = ['üíï', 'üíó', '‚ú®', 'ü•¥', '']

@dp.message(Command(commands=['b', 'po', 'pol', 'a', 'sex', 'vg', 'int', 'test']))
async def cmd_show_board_info(message: types.Message, board_id: str | None):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–æ—Å–∫–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π.
    """
    if not board_id:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ "/"
    requested_board_alias = message.text.lstrip('/')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª–∏–∞—Å /pol -> /po
    if requested_board_alias == 'pol':
        requested_board_alias = 'po'
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –¥–æ—Å–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    if requested_board_alias not in BOARD_CONFIG:
        # –≠—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é aiogram –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø–æ–≤—Ä–µ–¥–∏—Ç
        await message.delete()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π –¥–æ—Å–∫–µ
    target_config = BOARD_CONFIG[requested_board_alias]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ï–ö–£–©–ï–ô –¥–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_english = (board_id == 'int')

    if is_english:
        header_text = f"üåê You are currently on the <b>{BOARD_CONFIG[board_id]['name']}</b> board."
        board_info_text = (
            f"You requested information about the <b>{target_config['name']}</b> board:\n"
            f"<i>{target_config['description_en']}</i>\n\n"
            f"You can switch to it here: {target_config['username']}"
        )
    else:
        header_text = f"üåê –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –¥–æ—Å–∫–µ <b>{BOARD_CONFIG[board_id]['name']}</b>."
        board_info_text = (
            f"–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å–∫–µ <b>{target_config['name']}</b>:\n"
            f"<i>{target_config['description']}</i>\n\n"
            f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–µ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: {target_config['username']}"
        )
    
    full_response_text = f"{header_text}\n\n{board_info_text}"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(full_response_text, parse_mode="HTML", disable_web_page_preview=True)
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        await message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ cmd_show_board_info: {e}")

@dp.message(Command("face"))
async def cmd_face(message: types.Message, board_id: str | None):
    if not board_id: return

    face = (secrets.choice(AHE_EYES) + secrets.choice(AHE_TONGUE) +
            secrets.choice(AHE_EXTRA))

    user_id = message.from_user.id
    b_data = board_data[board_id]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –ø–æ—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if board_id in THREAD_BOARDS:
        user_location = b_data.get('user_state', {}).get(user_id, {}).get('location', 'main')
        if user_location != 'main':
            thread_id = user_location
            thread_info = b_data.get('threads_data', {}).get(thread_id)
            if thread_info and not thread_info.get('is_archived'):
                local_post_num = len(thread_info.get('posts', [])) + 1
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
                # –ü–µ—Ä–µ–¥–∞–µ–º author_id=0 (—Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) –∏ thread_info
                header_text = await format_thread_post_header(board_id, local_post_num, 0, thread_info)
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
                _, pnum = await format_header(board_id) # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                
                content = {"type": "text", "header": header_text, "text": face}
                messages_storage[pnum] = {
                    'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content,
                    'board_id': board_id, 'thread_id': thread_id
                }
                thread_info['posts'].append(pnum)
                thread_info['last_activity_at'] = time.time()
                
                await message_queues[board_id].put({
                    "recipients": thread_info.get('subscribers', set()),
                    "content": content, "post_num": pnum, "board_id": board_id, "thread_id": thread_id
                })
                await message.delete()
                return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞
    header, pnum = await format_header(board_id)
    content = {"type": "text", "header": header, "text": face}
    
    messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}
    
    await message_queues[board_id].put({
        "recipients": board_data[board_id]['users']['active'],
        "content": content,
        "post_num": pnum,
        "board_id": board_id
    })
    await message.delete()

@dp.message(Command("summarize"))
async def cmd_summarize(message: types.Message, board_id: str | None):
    if not board_id:
        print("[summarize] Board ID not found")
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å–∫—É.")
        return

    b_data = board_data[board_id]
    user_id = message.from_user.id
    lang = 'en' if board_id == 'int' else 'ru'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Cooldown
    now_ts = time.time()
    last_usage = b_data.get('last_summarize_time', 0)

    if now_ts - last_usage < SUMMARIZE_COOLDOWN:
        remaining = SUMMARIZE_COOLDOWN - (now_ts - last_usage)
        
        if lang == 'en':
            cooldown_text = f"‚è≥ Command is on cooldown. Please wait {int(remaining)} seconds."
        else:
            cooldown_text = f"‚è≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(remaining)} —Å–µ–∫."
        
        try:
            await message.answer(cooldown_text)
            await message.delete()
        except Exception:
            pass
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ç—Ä–µ–¥ –∏–ª–∏ –¥–æ—Å–∫–∞) ---
    thread_id = None
    context_name = f"–¥–æ—Å–∫–∏ {BOARD_CONFIG[board_id]['name']}"
    if board_id in THREAD_BOARDS:
        user_location = b_data.get('user_state', {}).get(user_id, {}).get('location', 'main')
        if user_location != 'main':
            thread_id = user_location
            thread_info = b_data.get('threads_data', {}).get(thread_id, {})
            thread_title = thread_info.get('title', '...')
            context_name = f"—Ç—Ä–µ–¥–∞ ¬´{thread_title}¬ª"

    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è prompt –¥–ª—è —Ç—Ä–µ–¥–∞
    if thread_id:
        prompt = (
            f"–¢—ã –¥–æ–ª–∂–µ–Ω –∫–æ—Ä–æ—Ç–∫–æ –∏ –∑–∞–±–∞–≤–Ω–æ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ —Ç—Ä–µ–¥–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{escape_html(thread_info.get('title', ''))}¬ª –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ –¥–≤–∞—á–∞. "
            "–ü–∏—à–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ä–æ–Ω–∏—é –∏ —Å–∞—Ä–∫–∞–∑–º, –≤—ã–Ω–æ—Å–∏ —Å—É—Ç—å. –ù–µ –±—É–¥—å —É–Ω—ã–ª—ã–º!"
        )
        # –î–ª—è —Ç—Ä–µ–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –µ–≥–æ –ø–æ—Å—Ç—ã, –∞ –Ω–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
        chunk = await get_board_chunk(board_id, thread_id=thread_id)
        info_text = f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤ –≤ —Ç—Ä–µ–¥–µ" # –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    else:
        prompt = (
            "–¢—ã –¥–æ–ª–∂–µ–Ω –∫–æ—Ä–æ—Ç–∫–æ –∏ –∑–∞–±–∞–≤–Ω–æ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ –¥–≤–∞—á–∞. –¢–∞–º –æ–±—â–∞—é—Ç—Å—è –∞–Ω–æ–Ω—ã."
            "–ü–∏—à–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ä–æ–Ω–∏—é –∏ —Å–∞—Ä–∫–∞–∑–º, –≤—ã–Ω–æ—Å–∏ —Å—É—Ç—å –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–µ—Ä—å—ë–∑–Ω–æ. "
            "–ï—Å–ª–∏ –±—ã–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –º–µ–¥–∏–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏ '–ö–∞—Ä—Ç–∏–Ω–∫–∞', '–ì–∏—Ñ–∫–∞' –∏ —Ç.–ø. –ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω–æ, –Ω–µ –ø–∏—à–∏ —É–Ω—ã–ª–æ!"
        )
        chunk = await get_board_chunk(board_id, hours=6)
        info_text = f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ"
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    hf_token = os.getenv("HF_TOKEN")
    if not hf_token:
        print("[summarize] HF_TOKEN not set")
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω Hugging Face.")
        return

    if not chunk or len(chunk) < 100:
        print(f"[summarize] –ú–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è summarize (len={len(chunk)})")
        await message.answer(f"{info_text} –±—ã–ª–æ –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏.")
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–∞–º–º–∞—Ä–∏, –∂–¥–∏—Ç–µ ~30 —Å–µ–∫—É–Ω–¥...")
    try:
        summary = await summarize_text_with_hf(prompt, chunk, hf_token)
    except Exception as e:
        print(f"[summarize] Error during HF summarize: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏.")
        return

    if not summary:
        print("[summarize] Summary empty or failed")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–º–∞—Ä–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    b_data['last_summarize_time'] = time.time()

    summary = summary[:4000]
    print(f"[summarize] Final summary length: {len(summary)}")

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç—Ä–µ–¥ –∏–ª–∏ –Ω–∞ –¥–æ—Å–∫—É ---
    header, pnum = await format_header(board_id) # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω—É–∂–µ–Ω –≤—Å–µ–≥–¥–∞
    content = {
        'type': 'text',
        'text': f"–°–∞–º–º–∞—Ä–∏ {context_name}:\n\n{summary}",
        'is_system_message': True
    }

    if thread_id:
        thread_info = b_data.get('threads_data', {}).get(thread_id)
        if thread_info and not thread_info.get('is_archived'):
            local_post_num = len(thread_info.get('posts', [])) + 1
            header_text = await format_thread_post_header(board_id, local_post_num, 0, thread_info)
            content['header'] = header_text
            
            messages_storage[pnum] = {
                'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content,
                'board_id': board_id, 'thread_id': thread_id
            }
            thread_info['posts'].append(pnum)
            thread_info['last_activity_at'] = time.time()
            
            await message_queues[board_id].put({
                "recipients": thread_info.get('subscribers', set()),
                "content": content, "post_num": pnum, "board_id": board_id, "thread_id": thread_id
            })
        else: # –ï—Å–ª–∏ —Ç—Ä–µ–¥ —É–∂–µ —É–¥–∞–ª–µ–Ω/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ—Ç–º–µ–Ω—è–µ–º
             await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∞–º–º–∞—Ä–∏, —Ç—Ä–µ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
             return
    else:
        content['header'] = header
        messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}
        await message_queues[board_id].put({
            'recipients': b_data['users']['active'],
            'content': content,
            'post_num': pnum,
            'board_id': board_id
        })

    print(f"[summarize] –°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({context_name}, post_num={pnum})")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

@dp.callback_query(F.data == "show_active_threads")
async def cq_show_active_threads(callback: types.CallbackQuery, board_id: str | None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–¥—ã', –≤—ã–≤–æ–¥—è —Å–ø–∏—Å–æ–∫."""
    if not board_id or board_id not in THREAD_BOARDS:
        await callback.answer("This action is not available here.", show_alert=True)
        return

    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'
    
    threads_data = b_data.get('threads_data', {})
    
    active_threads = {k: v for k, v in threads_data.items() if not v.get('is_archived')}

    if not active_threads:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        empty_phrases = thread_messages.get(lang, {}).get('threads_list_empty', [])
        default_empty_text = "No active threads right now."
        empty_text = random.choice(empty_phrases) if empty_phrases else default_empty_text
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        await callback.answer(empty_text, show_alert=True)
        return

    sorted_threads = sorted(
        active_threads.items(),
        key=lambda item: item[1].get('last_activity_at', 0),
        reverse=True
    )
    
    user_s = b_data['user_state'].setdefault(callback.from_user.id, {})
    user_s['sorted_threads_cache'] = [tid for tid, _ in sorted_threads]

    text, keyboard = await generate_threads_page(b_data, callback.from_user.id, page=0)

    await callback.answer()
    try:
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.message.delete()
    except (TelegramForbiddenError, TelegramBadRequest):
        pass

@dp.message(Command("help"))
async def cmd_help(message: types.Message, board_id: str | None):
    if not board_id: return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å–∫–∏
    start_text = board_data[board_id].get('start_message_text', "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–º–æ—â–∏.")
    await message.answer(start_text, parse_mode="HTML", disable_web_page_preview=True)
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ---
    await _send_thread_info_if_applicable(message, board_id)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    try:
        await message.delete()
    except TelegramBadRequest:
        pass


@dp.message(Command("roll"))
async def cmd_roll(message: types.Message, board_id: str | None):
    if not board_id: return
    
    result = random.randint(1, 100)
    lang = 'en' if board_id == 'int' else 'ru'
    roll_text = f"üé≤ Rolled: {result}" if lang == 'en' else f"üé≤ –ù–∞—Ä–æ–ª–ª–∏–ª: {result}"

    user_id = message.from_user.id
    b_data = board_data[board_id]

    if board_id in THREAD_BOARDS:
        user_location = b_data.get('user_state', {}).get(user_id, {}).get('location', 'main')
        if user_location != 'main':
            thread_id = user_location
            thread_info = b_data.get('threads_data', {}).get(thread_id)
            if thread_info and not thread_info.get('is_archived'):
                local_post_num = len(thread_info.get('posts', [])) + 1
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
                # –ü–µ—Ä–µ–¥–∞–µ–º author_id=0 (—Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) –∏ thread_info
                header_text = await format_thread_post_header(board_id, local_post_num, 0, thread_info)
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
                _, pnum = await format_header(board_id)
                
                content = {"type": "text", "header": header_text, "text": roll_text}
                messages_storage[pnum] = {
                    'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content,
                    'board_id': board_id, 'thread_id': thread_id
                }
                thread_info['posts'].append(pnum)
                thread_info['last_activity_at'] = time.time()

                await message_queues[board_id].put({
                    "recipients": thread_info.get('subscribers', set()),
                    "content": content, "post_num": pnum, "board_id": board_id, "thread_id": thread_id
                })
                await message.delete()
                return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
    header, pnum = await format_header(board_id)
    content = {"type": "text", "header": header, "text": roll_text}
    messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}

    await message_queues[board_id].put({
        "recipients": board_data[board_id]['users']['active'],
        "content": content,
        "post_num": pnum,
        "board_id": board_id
    })
    await message.delete()
    
@dp.message(Command("slavaukraine"))
async def cmd_slavaukraine(message: types.Message, board_id: str | None):
    if not board_id: return
    if board_id == 'int':
        try:
            await message.delete()
        except Exception: pass
        return
    
    b_data = board_data[board_id]

    if not await check_cooldown(message, board_id):
        return

    b_data['slavaukraine_mode'] = True
    b_data['last_mode_activation'] = datetime.now(UTC)
    b_data['zaputin_mode'] = False
    b_data['suka_blyat_mode'] = False
    b_data['anime_mode'] = False

    _, pnum = await format_header(board_id)
    header = "### –ê–¥–º–∏–Ω ###"

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    activation_phrases = [
        "–£–í–ê–ì–ê! –ê–ö–¢–ò–í–û–í–ê–ù–û –£–ö–†–ê–á–ù–°–¨–ö–ò–ô –†–ï–ñ–ò–ú!\n\nüíôüíõ –°–õ–ê–í–ê –£–ö–†–ê–á–ù–Ü! üíõüíô\n–ì–ï–†–û–Ø–ú –°–õ–ê–í–ê!\n\n–•—Ç–æ –Ω–µ —Å–∫–∞–∂–µ '–ü—É—Ç—ñ–Ω —Ö—É–π–ª–æ' - —Ç–æ–π –º–æ—Å–∫–∞–ª—å —ñ –ø—ñ–¥–∞—Ä!",
        "–£–ö–†–ê–á–ù–°–¨–ö–ò–ô –†–ï–ñ–ò–ú –£–í–Ü–ú–ö–ù–ï–ù–û! üá∫üá¶ –í—Å—ñ –º–æ—Å–∫–∞–ª—ñ –±—É–¥—É—Ç—å –¥–µ–Ω–∞—Ü–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —Ç–∞ –¥–µ–º—ñ–ª—ñ—Ç–∞—Ä–∏–∑–æ–≤–∞–Ω—ñ. –°–º–µ—Ä—Ç—å –≤–æ—Ä–æ–≥–∞–º!",
        "–£–í–ê–ì–ê! –í —á–∞—Ç—ñ –æ–≥–æ–ª–æ—à–µ–Ω–æ –∫–æ–Ω—Ç—Ä–Ω–∞—Å—Ç—É–ø! üöú –°–õ–ê–í–ê –ù–ê–¶–Ü–á! –ü–ò–ó–î–ï–¶–¨ –†–û–°–Ü–ô–°–¨–ö–Ü–ô –§–ï–î–ï–†–ê–¶–Ü–á!",
        "üíôüíõ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å–æ–ª–æ–≤'—ó–Ω—É! –•—Ç–æ –Ω–µ —Å–∫–∞—á–µ, —Ç–æ–π –º–æ—Å–∫–∞–ª—å! –°–õ–ê–í–ê –ó–°–£!",
        "–ê–ö–¢–ò–í–û–í–ê–ù–û –†–ï–ñ–ò–ú '–ë–ê–ù–î–ï–†–û–ú–û–ë–Ü–õ–¨'! üá∫üá¶ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Javelin... –¶—ñ–ª—å: –ö—Ä–µ–º–ª—å.",
        "–£–ö–†–ê–á–ù–°–¨–ö–ò–ô –ü–û–†–Ø–î–û–ö –ù–ê–í–ï–î–ï–ù–û! ü´° –ì–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –ø–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–≥—Ä–æ–º—É —Ä—É—Å–Ω—ñ. –ü—É—Ç—ñ–Ω - —Ö—É–π–ª–æ!",
        "–¢–ï–†–ú–Ü–ù–û–í–û! –í —á–∞—Ç—ñ –≤–∏—è–≤–ª–µ–Ω–æ —Ä—É—Å–Ω—é! –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª '–ê–ó–û–í'. üá∫üá¶ –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!",
        "–†–µ–∂–∏–º '–ü–†–ò–í–ò–î –ö–ò–Ñ–í–ê' –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! ‚úàÔ∏è –í–∏–ª—ñ—Ç–∞—î–º–æ –Ω–∞ –±–æ–π–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –†—É—Å–∫—ñ–π –≤–æ—î–Ω–Ω–∏–π –∫–æ—Ä–∞–±–ª—å, —ñ–¥—ñ –Ω–∞—Ö—É–π!",
        "–ù–∞—Å—Ç—É–ø–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω –≤ —á–∞—Ç—ñ - –ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞! üíôüíõ –ó–∞ –Ω–µ–ø–æ–∫–æ—Ä—É - —Ä–æ–∑—Å—Ç—Ä—ñ–ª –Ω–∞—Ö—É–π. –ì–µ—Ä–æ—è–º –°–ª–∞–≤–∞!",
        "üíôüíõ –í–ê–•–¢–ê –ù–ê –ó–ê–í–ê–õ–Ü! –í–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º '–ö–Ü–ë–ï–†–ü–û–õ–ö –ê–ó–û–í'! –°–ú–ï–†–¢–¨ –†–£–°–ù–Ü!",
        "–ë–ê–ù–î–ï–†–û–í–ï–¶–¨ –í –ß–ê–¢–Ü! üíõüíô –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç—Ä–æ–ª—ñ–Ω–≥. –ü—É—Ç—ñ–Ω - —Ö—É–π–ª–æ!",
        "üí£ –•–ï–†–°–û–ù–¨ –ù–ê–®! –†–µ–∂–∏–º '–î–†–û–ù-–ö–ê–ú–ò–ö–ê–î–ó–ï' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–õ–ê–í–ê –ó–°–£!",
        "üî• –î–ï–ú–û–ù–Ü–ß–ù–ò–ô –†–ï–ñ–ò–ú –í–í–Ü–ú–ö–ù–ï–ù–û! –ó–∞–ø–∞–ª—é—î–º–æ —Ä—É—Å—Å–∫—ñ–π –∫–æ—Ä–∞–±–ª—å! –Ü–î–ò –ù–ê–•–£–ô!",
        "ü™ñ –¢–ï–†–û–ë–û–†–û–ù–ï–¶–¨ –£ –ß–ê–¢–Ü! –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç—Ä–æ–ª—ñ–Ω–≥. –ü—É—Ç—ñ–Ω - —Ö—É–π–ª–æ!",
        "‚öîÔ∏è –®–ê–•–¢–ê–†–°–¨–ö–ò–ô –ù–ê–°–¢–£–ü! –†–µ–∂–∏–º '–°–õ–ê–í–ê –ù–ê–¶–Ü–á' –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –ì–ï–†–û–Ø–ú –°–õ–ê–í–ê!",
        "üî± –¢–ï–†–ú–Ü–ù–û–í–û! –£ –ß–ê–¢–Ü –ó'–Ø–í–ò–í–°–Ø –•–ê–°–ö! –†–µ–∂–∏–º '–°–õ–ê–í–ê –ù–ê–¶–Ü–á' –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!",
        "–£–í–ê–ì–ê! –¢–µ—Ä–∏—Ç–æ—Ä—ñ—è —Ü—å–æ–≥–æ —á–∞—Ç—É –æ–≥–æ–ª–æ—à—É—î—Ç—å—Å—è —Å—É–≤–µ—Ä–µ–Ω–Ω–æ—é —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—î—é –£–∫—Ä–∞—ó–Ω–∏! üá∫üá¶ –°–õ–ê–í–ê –£–ö–†–ê–á–ù–Ü!"
    ]
    activation_text = random.choice(activation_phrases)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    content = {
        "type": "text",
        "header": header,
        "text": activation_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })

    asyncio.create_task(disable_slavaukraine_mode(310, board_id))
    await message.delete()


async def disable_slavaukraine_mode(delay: int, board_id: str):
    await asyncio.sleep(delay)
    
    b_data = board_data[board_id]
    b_data['slavaukraine_mode'] = False

    _, pnum = await format_header(board_id)
    header = "### –ê–¥–º–∏–Ω ###"

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    end_phrases = [
        "üíÄ –í–∏–∑–≥ —Ö–æ—Ö–ª–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω! –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ç—Ä—ë–ø—É.",
        "–ö–æ–Ω—Ç—Ä–Ω–∞—Å—Ç—É–ø –∑–∞—Ö–ª–µ–±–Ω—É–ª—Å—è! üá∑üá∫ –•–æ—Ö–ª—ã, –≤–∞—à–µ –≤—Ä–µ–º—è –≤—ã—à–ª–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é.",
        "–ü–µ—Ä–µ–º–æ–≥–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è! üê∑ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º —è–∑—ã–∫–µ.",
        "–°–≤–∏–Ω–∞—Ä–Ω–∏–∫ –∑–∞–∫—Ä—ã—Ç –Ω–∞ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—é. üêñ –†–µ–∂–∏–º '–°–ª–∞–≤–∞ –£–∫—Ä–∞–∏–Ω–µ' –æ—Ç–∫–ª—é—á–µ–Ω.",
        "–¢–∞—Ä–∞—Å—ã, –ø–æ –æ–∫–æ–ø–∞–º! –í–∞—à–∞ –ø–µ—Ä–µ–º–æ–≥–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –∑—Ä–∞–¥–æ–π. üá∑üá∫ –†–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω.",
        "–ë–∞—Ç—å–∫–æ –Ω–∞—à –ë–∞–Ω–¥–µ—Ä–∞ —Å–¥–æ—Ö! üíÄ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ –æ–∫–æ–Ω—á–µ–Ω–∞.",
        "–°–ê–õ–û –£–†–û–ù–ò–õ–ò! ü§£ –†–µ–∂–∏–º —Ö–æ—Ö–ª–æ—Å—Ä–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ú–æ–∂–Ω–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å.",
        "–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. üá∑üá∫ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –ø–æ–¥–∞–≤–ª–µ–Ω.",
        "üíÄ –î–ï–ú–û–ë–Ü–õ–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Å—Å–∞–Ω—è –≤ —á–∞—Ç",
        "üíÄ –ë–ê–ù–î–ï–†–ê –í–¢–Ü–ö –£ –ö–ê–ù–ê–î–£. –†–µ–∂–∏–º –≤–∏–º–∫–Ω–µ–Ω–æ, –º–æ—Å–∫–∞–ª—ñ –ø–µ—Ä–µ–º–æ–≥–ª–∏...",
        "üïäÔ∏è –ú–ò–†–ù–ò–ô –ü–†–û–¶–ï–°. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Å—Å–∞–Ω—è –≤ —á–∞—Ç",
        "–ë–∞–π—Ä–∞–∫—Ç–∞—Ä—ã —Å–±–∏—Ç—ã, –¥–∂–∞–≤–µ–ª–∏–Ω—ã –ø—Ä–æ—ë–±–∞–Ω—ã. üê∑ –†–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–æ–¥–Ω—É—é –≥–∞–≤–∞–Ω—å.",
        "–•—Ä—é–∫–∞–Ω–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. üêñ –ú–æ—Å–∫–∞–ª–∏ —Å–Ω–æ–≤–∞ –ø–æ–±–µ–¥–∏–ª–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É."
    ]
    end_text = random.choice(end_phrases)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    content = {
        "type": "text",
        "header": header,
        "text": end_text
    }
    
    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }
    
    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message, board_id: str | None):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é–±—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–µ."""
    if not board_id: return

    if not is_admin(message.from_user.id, board_id):
        await message.delete()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–∏
    b_data = board_data[board_id]

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –≠–¢–û–ô –¥–æ—Å–∫–∏
    b_data['zaputin_mode'] = False
    b_data['suka_blyat_mode'] = False
    b_data['slavaukraine_mode'] = False
    b_data['anime_mode'] = False
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
    b_data['last_mode_activation'] = None

    await message.answer(f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    await message.delete()

@dp.message(Command("active"))
async def cmd_active(message: types.Message, board_id: str | None):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ—Å–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ + –∑–∞ —Å—É—Ç–∫–∏."""
    if not board_id: return

    if board_id in THREAD_BOARDS:
        user_id = message.from_user.id
        b_data = board_data[board_id]
        user_location = b_data.get('user_state', {}).get(user_id, {}).get('location', 'main')
        if user_location != 'main':
            try: await message.delete()
            except Exception: pass
            return

    day_ago = datetime.now(UTC) - timedelta(hours=24)
    posts_last_24h = 0
    
    async with storage_lock:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
        # –ó–∞–º–µ–Ω–∞ sorted() –Ω–∞ reversed() –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
        for post_num in reversed(messages_storage):
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
            post_data = messages_storage[post_num]
            post_time = post_data.get("timestamp")
            
            if not post_time or post_time < day_ago:
                break
            
            posts_last_24h += 1
    
    lang = 'en' if board_id == 'int' else 'ru'
    activity_lines = []
    for b_id in BOARDS:
        if b_id == 'test':
            continue
        activity = await get_board_activity_last_hours(b_id, hours=2)
        board_name = BOARD_CONFIG[b_id]['name']
        line = f"<b>{board_name}</b> - {activity:.1f} posts/hr" if lang == 'en' else f"<b>{board_name}</b> - {activity:.1f} –ø/—á"
        activity_lines.append(line)

    if lang == 'en':
        header_text = "üìä Boards Activity (last 2h):"
        total_text = f"\n\nüìÖ Total posts in last 24h: {posts_last_24h}"
    else:
        header_text = "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ—Å–æ–∫ (–∑–∞ 2—á):"
        total_text = f"\n\nüìÖ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {posts_last_24h}"
        
    full_activity_text = f"{header_text}\n\n" + "\n".join(activity_lines) + total_text

    header, pnum = await format_header(board_id)
    content = {
        'type': 'text', 
        'header': header, 
        'text': full_activity_text
    }
    
    async with storage_lock:
        messages_storage[pnum] = {
            'author_id': 0, 
            'timestamp': datetime.now(UTC), 
            'content': content, 
            'board_id': board_id
        }
        
    b_data = board_data[board_id]
    await message_queues[board_id].put({
        'recipients': b_data['users']['active'],
        'content': content,
        'post_num': pnum,
        'board_id': board_id
    })
    await message.delete()

# ========== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –¢–†–ï–î–û–í ==========

@dp.message(Command("create"))
async def cmd_create_fsm_entry(message: types.Message, state: FSMContext, board_id: str | None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /create –∏ —Å–ª—É–∂–∏—Ç —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ FSM-—Å—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞.
    """
    if not board_id or board_id not in THREAD_BOARDS:
        return

    current_state = await state.get_state()
    lang = 'en' if board_id == 'int' else 'ru'
    if current_state is not None:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        cancel_phrases = thread_messages.get(lang, {}).get('create_cancelled', [])
        default_cancel_text = "You are already creating a thread. Use /cancel." if lang == 'en' else "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç–µ —Ç—Ä–µ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
        text = random.choice(cancel_phrases) if cancel_phrases else default_cancel_text
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        try:
            await message.answer(text)
            await message.delete()
        except (TelegramForbiddenError, TelegramBadRequest):
            pass
        return

    command_args = message.text.split(maxsplit=1)
    if len(command_args) > 1 and command_args[1].strip():
        op_post_text = command_args[1].strip()
        
        await state.update_data(op_post_text=op_post_text)
        await state.set_state(ThreadCreateStates.waiting_for_confirmation)

        if lang == 'en':
            confirmation_text = f"You want to create a thread with this opening post:\n\n---\n{escape_html(op_post_text)}\n---\n\nCreate?"
            button_create, button_edit = "‚úÖ Create Thread", "‚úèÔ∏è Edit Text"
        else:
            confirmation_text = f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥ —Å —Ç–∞–∫–∏–º –û–ü-–ø–æ—Å—Ç–æ–º:\n\n---\n{escape_html(op_post_text)}\n---\n\n–°–æ–∑–¥–∞–µ–º?"
            button_create, button_edit = "‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=button_create, callback_data="create_thread_confirm"),
                InlineKeyboardButton(text=button_edit, callback_data="create_thread_edit")
            ]
        ])
        await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="HTML")

    else:
        await state.set_state(ThreadCreateStates.waiting_for_op_post)
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        prompt_phrases = thread_messages.get(lang, {}).get('create_prompt_op_post', [])
        default_prompt = "Please send the text for your opening post." if lang == 'en' else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –û–ü-–ø–æ—Å—Ç–∞."
        prompt_text = random.choice(prompt_phrases) if prompt_phrases else default_prompt
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        await message.answer(prompt_text)

    try:
        await message.delete()
    except TelegramBadRequest:
        pass

@dp.callback_query(F.data == "create_thread_confirm", ThreadCreateStates.waiting_for_confirmation)
async def cb_create_thread_confirm(callback: types.CallbackQuery, state: FSMContext, board_id: str | None):
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –ª–æ–≤–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ–¥ –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ FSM.
    """
    if not board_id: return
    
    user_id = callback.from_user.id
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'

    fsm_data = await state.get_data()
    op_post_text = fsm_data.get('op_post_text')

    if not op_post_text:
        await state.clear()
        await callback.answer("Error: Post data not found. Please start over.", show_alert=True)
        return
        
    threads_data = b_data.get('threads_data', {})
    thread_id = secrets.token_hex(4)
    now_ts = time.time()
    now_dt = datetime.now(UTC)
    
    title = escape_html(clean_html_tags(op_post_text).split('\n')[0][:60])
    
    thread_info = {
        'op_id': user_id, 'title': title, 'created_at': now_dt.isoformat(),
        'last_activity_at': now_ts, 'posts': [], 'subscribers': {user_id},
        'local_mutes': {}, 'local_shadow_mutes': {}, 'is_archived': False,
        'announced_milestones': [], 'activity_notified': False
    }
    threads_data[thread_id] = thread_info

    user_s = b_data['user_state'].setdefault(user_id, {})
    user_s['last_thread_creation'] = now_ts

    notification_text = random.choice(thread_messages.get(lang, {}).get('new_thread_public_notification', [])).format(title=title)
    if not notification_text:
        notification_text = f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥: ¬´<b>{title}</b>¬ª"

    bot_username = BOARD_CONFIG[board_id]['username'].lstrip('@')
    deeplink_url = f"https://t.me/{bot_username}?start=thread_{thread_id}"
    button_text = "–í–æ–π—Ç–∏ –≤ —Ç—Ä–µ–¥" if lang == 'ru' else "Enter Thread"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, url=deeplink_url)]
    ])

    header, pnum_notify = await format_header(board_id)
    content_notify = {'type': 'text', 'header': header, 'text': notification_text, 'is_system_message': True}
    messages_storage[pnum_notify] = {'author_id': 0, 'timestamp': now_dt, 'content': content_notify, 'board_id': board_id}
    await message_queues[board_id].put({
        'recipients': b_data['users']['active'], 
        'content': content_notify, 
        'post_num': pnum_notify, 
        'board_id': board_id, 
        'keyboard': keyboard
    })
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –û–ü-–ø–æ—Å—Ç–∞ –±–µ–∑ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ –æ–±—â–∏–π —á–∞—Ç ---
    
    # 1. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –î–û —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.
    # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞ –≤ –æ–±—â–∏–π —á–∞—Ç,
    # —Ç–∞–∫ –∫–∞–∫ `process_new_post` –Ω–µ –Ω–∞–π–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ 'main'.
    user_s['location'] = thread_id
    user_s['last_location_switch'] = now_ts
    
    # 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º process_new_post, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –Ω–µ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
    # –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å—Ç
    # –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É.
    formatted_op_text = f"<b>–û–ü-–ü–û–°–¢</b>\n_______________________________\n{op_post_text}"
    op_post_content = {'type': 'text', 'text': formatted_op_text}

    await process_new_post(
        bot_instance=callback.bot, board_id=board_id, user_id=user_id, content=op_post_content,
        reply_to_post=None, is_shadow_muted=False
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    await callback.answer()
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    enter_phrases = thread_messages.get(lang, {}).get('enter_thread_prompt', [])
    default_enter_text = f"You have entered the thread: {title}" if lang == 'en' else f"–í—ã –≤–æ—à–ª–∏ –≤ —Ç—Ä–µ–¥: {title}"
    enter_message = random.choice(enter_phrases).format(title=title) if enter_phrases else default_enter_text

    entry_keyboard = _get_thread_entry_keyboard(board_id)
    try:
        await callback.message.answer(enter_message, reply_markup=entry_keyboard, parse_mode="HTML")
    except (TelegramForbiddenError, TelegramBadRequest):
        pass

    asyncio.create_task(post_thread_notification_to_channel(
        bots=GLOBAL_BOTS, board_id=board_id, thread_id=thread_id,
        thread_info=thread_info, event_type='new_thread'
    ))

    await _send_op_commands_info(callback.bot, user_id, board_id)
    
    await state.clear()

@dp.callback_query(F.data == "create_thread_edit", ThreadCreateStates.waiting_for_confirmation)
async def cb_create_thread_edit(callback: types.CallbackQuery, state: FSMContext, board_id: str | None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', –≤–æ–∑–≤—Ä–∞—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –û–ü-–ø–æ—Å—Ç–∞.
    """
    if not board_id: return
    lang = 'en' if board_id == 'int' else 'ru'

    await state.set_state(ThreadCreateStates.waiting_for_op_post)

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
    prompt_phrases = thread_messages.get(lang, {}).get('create_prompt_op_post_edit', [])
    default_prompt = "Okay, send the new text for your opening post." if lang == 'en' else "–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –û–ü-–ø–æ—Å—Ç–∞."
    prompt_text = random.choice(prompt_phrases) if prompt_phrases else default_prompt
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    await callback.answer()
    try:
        await callback.message.edit_text(prompt_text)
    except TelegramBadRequest:
        pass


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
THREADS_PER_PAGE = 10

@dp.message(Command("threads"))
async def cmd_threads(message: types.Message, board_id: str | None):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤."""
    if not board_id or board_id not in THREAD_BOARDS:
        try: await message.delete()
        except Exception: pass
        return

    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'
    
    threads_data = b_data.get('threads_data', {})
    active_threads = {k: v for k, v in threads_data.items() if not v.get('is_archived')}

    if not active_threads:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        empty_phrases = thread_messages.get(lang, {}).get('threads_list_empty', [])
        default_empty_text = "No active threads right now. Be the first to /create one!" if lang == 'en' else "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤. –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º, /create!"
        empty_text = random.choice(empty_phrases) if empty_phrases else default_empty_text
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        await message.answer(empty_text)
        await message.delete()
        return

    sorted_threads = sorted(
        active_threads.items(),
        key=lambda item: item[1].get('last_activity_at', 0),
        reverse=True
    )
    
    user_s = b_data['user_state'].setdefault(message.from_user.id, {})
    user_s['sorted_threads_cache'] = [tid for tid, _ in sorted_threads]

    text, keyboard = await generate_threads_page(b_data, message.from_user.id, page=0)

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await message.delete()

async def generate_threads_page(b_data: dict, user_id: int, page: int = 0) -> tuple[str, InlineKeyboardMarkup]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–¥–æ–≤."""
    board_id = next((bid for bid, data in board_data.items() if data is b_data), None)
    lang = 'en' if board_id == 'int' else 'ru'

    user_s = b_data['user_state'].get(user_id, {})
    sorted_thread_ids = user_s.get('sorted_threads_cache', [])
    threads_data = b_data.get('threads_data', {})

    start_index = page * THREADS_PER_PAGE
    end_index = start_index + THREADS_PER_PAGE
    page_thread_ids = sorted_thread_ids[start_index:end_index]

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ ---
    tm_lang = thread_messages.get(lang, {})
    header_phrases = tm_lang.get('threads_list_header', ["Active Threads:"])
    header = random.choice(header_phrases)

    item_template = tm_lang.get('thread_list_item', "{index}. {title} ({posts_count} posts, last: {last_activity})")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    lines, keyboard_buttons = [], []
    now_ts = time.time()

    for i, thread_id in enumerate(page_thread_ids):
        thread_info = threads_data.get(thread_id)
        if not thread_info: continue

        index, title = start_index + i + 1, thread_info.get('title', 'No Title')
        posts_count = len(thread_info.get('posts', []))
        
        time_diff = now_ts - thread_info.get('last_activity_at', 0)
        if time_diff < 60: last_activity_str = f"{int(time_diff)}s"
        elif time_diff < 3600: last_activity_str = f"{int(time_diff / 60)}m"
        else: last_activity_str = f"{int(time_diff / 3600)}h"

        lines.append(item_template.format(index=index, title=title, posts_count=posts_count, last_activity=last_activity_str))
        keyboard_buttons.append([InlineKeyboardButton(text=f"{index}. {title[:40]}", callback_data=f"enter_thread_{thread_id}")])

    current_location = user_s.get('location', 'main')
    if current_location != 'main' and threads_data.get(current_location):
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        history_phrases = tm_lang.get('show_history_button', ["Show History"])
        history_button_text = random.choice(history_phrases)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        keyboard_buttons.append([InlineKeyboardButton(text=history_button_text, callback_data=f"show_history_{current_location}")])

    pagination_row = []
    total_pages = (len(sorted_thread_ids) + THREADS_PER_PAGE - 1) // THREADS_PER_PAGE
    if page > 0:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        prev_phrases = tm_lang.get('prev_page_button', ["< Previous"])
        prev_text = random.choice(prev_phrases)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        pagination_row.append(InlineKeyboardButton(text=prev_text, callback_data=f"threads_page_{page - 1}"))
    if page < total_pages - 1:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        next_phrases = tm_lang.get('next_page_button', ["Next >"])
        next_text = random.choice(next_phrases)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        pagination_row.append(InlineKeyboardButton(text=next_text, callback_data=f"threads_page_{page + 1}"))

    if pagination_row:
        keyboard_buttons.append(pagination_row)

    full_text = header + "\n" + "\n".join(lines)
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    return full_text, keyboard

async def post_archive_to_channel(bots: dict[str, Bot], file_path: str, board_id: str, thread_info: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML-–∞—Ä—Ö–∏–≤ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π Telegram-–∫–∞–Ω–∞–ª."""
    bot_instance = bots.get(ARCHIVE_POSTING_BOT_ID)
    if not bot_instance:
        print(f"‚õî –û—à–∏–±–∫–∞: –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –∞—Ä—Ö–∏–≤–æ–≤ ('{ARCHIVE_POSTING_BOT_ID}') –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤.")
        return

    try:
        from aiogram.types import FSInputFile
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        title = escape_html(thread_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        board_name = BOARD_CONFIG.get(board_id, {}).get('name', board_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
        caption = (
            f"üóÇ <b>–¢—Ä–µ–¥ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            f"<b>–î–æ—Å–∫–∞:</b> {board_name}\n"
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}"
        )

        document = FSInputFile(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
        await bot_instance.send_document(
            chat_id=ARCHIVE_CHANNEL_ID,
            document=document,
            caption=caption,
            parse_mode="HTML"
        )
        print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Ç—Ä–µ–¥–∞ '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {ARCHIVE_CHANNEL_ID}.")

    except Exception as e:
        print(f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤ –≤ –∫–∞–Ω–∞–ª {ARCHIVE_CHANNEL_ID}: {e}")

async def post_special_num_to_channel(bots: dict[str, Bot], board_id: str, post_num: int, level: int, content: dict, author_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ "—Å—á–∞—Å—Ç–ª–∏–≤–æ–º" –ø–æ—Å—Ç–µ –≤ –∫–∞–Ω–∞–ª –∞—Ä—Ö–∏–≤–æ–≤.
    –î–ª—è –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–≥–ª—É—à–∫–∏.
    (–í–ï–†–°–ò–Ø 7.0 - –í–û–ó–í–†–ê–¢ –ö –ó–ê–ì–õ–£–®–ö–ê–ú –î–õ–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò)
    """
    archive_bot = GLOBAL_BOTS.get(ARCHIVE_POSTING_BOT_ID)
    if not archive_bot:
        print(f"‚õî –û—à–∏–±–∫–∞: –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ ('{ARCHIVE_POSTING_BOT_ID}') –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    try:
        config = SPECIAL_NUMERALS_CONFIG[level]
        emoji = random.choice(config['emojis'])
        label = config['label'].upper()
        board_name = BOARD_CONFIG.get(board_id, {}).get('name', board_id)

        header = f"{emoji} <b>{label} #{post_num}</b> {emoji}\n\n<b>–î–æ—Å–∫–∞:</b> {board_name}\n"
        
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –õ–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–≥–ª—É—à–µ–∫ ---
        
        text_content = ""
        content_type_str = str(content.get("type", "")).split('.')[-1].lower()

        if content_type_str == 'text':
            text_content = content.get('text', '')
        else:
            text_content = content.get('caption', '') or ''
            
            media_placeholders = {
                'photo': '[–§–æ—Ç–æ]', 'video': '[–í–∏–¥–µ–æ]', 'animation': '[GIF]', 'sticker': '[–°—Ç–∏–∫–µ—Ä]',
                'document': '[–î–æ–∫—É–º–µ–Ω—Ç]', 'audio': '[–ê—É–¥–∏–æ]', 'voice': '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]',
                'video_note': '[–ö—Ä—É–∂–æ–∫]', 'media_group': '[–ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞]'
            }
            placeholder = media_placeholders.get(content_type_str, f'[{content_type_str}]')
            
            text_content = f"{placeholder}\n{text_content}".strip()
        
        final_text = f"{header}\n{text_content}"
        if len(final_text) > 4096:
            final_text = final_text[:4093] + "..."

        async def send_with_retry():
            try:
                await archive_bot.send_message(
                    chat_id=ARCHIVE_CHANNEL_ID,
                    text=final_text,
                    parse_mode="HTML"
                )
            except TelegramRetryAfter as e:
                print(f"‚ö†Ô∏è –ü–æ–ø–∞–ª–∏ –Ω–∞ –ª–∏–º–∏—Ç API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø–æ—Å—Ç–∞ #{post_num}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫...")
                await asyncio.sleep(e.retry_after + 1)
                await send_with_retry()
            except TelegramBadRequest as e:
                print(f"‚ùå BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø–æ—Å—Ç–∞ #{post_num}: {e}")

        await send_with_retry()
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–º –ø–æ—Å—Ç–µ #{post_num} ({label}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    except Exception as e:
        import traceback
        print(f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –ø–æ—Å—Ç #{post_num} –≤ –∫–∞–Ω–∞–ª: {e}")
        traceback.print_exc()


def _get_thread_entry_keyboard(board_id: str, show_history_button: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ –≤ —Ç—Ä–µ–¥.
    """
    lang = 'en' if board_id == 'int' else 'ru'

    if lang == 'en':
        button_good_thread_text = "üëç Good Thread"
        button_leave_text = "Leave Thread"
        button_history_text = "üìú Full History"
    else:
        button_good_thread_text = "üëç –ì–æ–¥–Ω—ã–π —Ç—Ä–µ–¥"
        button_leave_text = "–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–¥–∞"
        button_history_text = "üìú –í—Å—è –ª–µ—Ç–æ–ø–∏—Å—å"

    # –ë–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard_layout = [
        [
            InlineKeyboardButton(text=button_good_thread_text, callback_data="thread_like_placeholder"),
            InlineKeyboardButton(text=button_leave_text, callback_data="leave_thread")
        ]
    ]

    # –ï—Å–ª–∏ —Ñ–ª–∞–≥ show_history_button —Ä–∞–≤–µ–Ω True, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å—è –ª–µ—Ç–æ–ø–∏—Å—å"
    if show_history_button:
        keyboard_layout.append([
            InlineKeyboardButton(text=button_history_text, callback_data="show_current_thread_history")
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_layout)
    return keyboard

@dp.callback_query(F.data == "show_current_thread_history")
async def cq_show_current_thread_history(callback: types.CallbackQuery, board_id: str | None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å—è –ª–µ—Ç–æ–ø–∏—Å—å" –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–¥–∞.
    """
    if not board_id or board_id not in THREAD_BOARDS:
        await callback.answer()
        return

    user_id = callback.from_user.id
    b_data = board_data[board_id]
    user_s = b_data.get('user_state', {}).get(user_id, {})
    location = user_s.get('location', 'main')

    if location == 'main':
        await callback.answer("You are not in a thread.", show_alert=True)
        return

    callback.data = f"show_history_{location}"
    await cq_thread_history(callback, board_id)

async def _send_op_commands_info(bot: Bot, chat_id: int, board_id: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–ü–æ–º, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
    """
    b_data = board_data[board_id]
    user_s = b_data.get('user_state', {}).get(chat_id, {})
    location = user_s.get('location', 'main')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ç—Ä–µ–¥–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if location == 'main':
        return

    thread_info = b_data.get('threads_data', {}).get(location)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID –û–ü–∞
    if thread_info and thread_info.get('op_id') == chat_id:
        lang = 'en' if board_id == 'int' else 'ru'
        
        if lang == 'en':
            op_commands_text = (
                "<b>You are the OP of this thread.</b>\n\n"
                "You have access to moderation commands (reply to a message to use):\n"
                "<code>/mute</code> - Mute user in this thread for 10 minutes.\n"
                "<code>/unmute</code> - Unmute user.\n"
                "<i>(These commands have a 1-minute cooldown)</i>"
            )
        else:
            op_commands_text = (
                "<b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –û–ü–æ–º —ç—Ç–æ–≥–æ —Ç—Ä–µ–¥–∞.</b>\n\n"
                "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ):\n"
                "<code>/mute</code> - –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Ç—Ä–µ–¥–µ –Ω–∞ 10 –º–∏–Ω—É—Ç.\n"
                "<code>/unmute</code> - –†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                "<i>(–ö—É–ª–¥–∞—É–Ω –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ - 1 –º–∏–Ω—É—Ç–∞)</i>"
            )
        
        try:
            await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            await bot.send_message(chat_id, op_commands_text, parse_mode="HTML")
        except (TelegramForbiddenError, TelegramBadRequest) as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å OP-–∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

def _get_leave_thread_keyboard(board_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ç—Ä–µ–¥–∞.
    """
    lang = 'en' if board_id == 'int' else 'ru'
    
    button_text = "View Threads" if lang == 'en' else "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–¥–æ–≤"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, callback_data="show_active_threads")]
    ])
    return keyboard

async def post_thread_notification_to_channel(bots: dict[str, Bot], board_id: str, thread_id: str, thread_info: dict, event_type: str, details: dict | None = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö —Ç—Ä–µ–¥–∞ –≤ —Å–ª—É–∂–µ–±–Ω—ã–π –∫–∞–Ω–∞–ª.
    
    :param bots: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Å—Ç–∞–Ω—Å–∞–º–∏ –±–æ—Ç–æ–≤.
    :param board_id: ID –¥–æ—Å–∫–∏.
    :param thread_id: ID —Ç—Ä–µ–¥–∞.
    :param thread_info: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–¥–∞.
    :param event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ('new_thread', 'milestone', 'high_activity').
    :param details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, {'posts': 150} –∏–ª–∏ {'activity': 25.5}).
    """
    bot_instance = bots.get(ARCHIVE_POSTING_BOT_ID)
    if not bot_instance:
        print(f"‚õî –û—à–∏–±–∫–∞: –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ ('{ARCHIVE_POSTING_BOT_ID}') –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    details = details or {}
    title = escape_html(thread_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
    board_name = BOARD_CONFIG.get(board_id, {}).get('name', board_id)
    
    message_text = ""

    if event_type == 'new_thread':
        message_text = (
            f"<b>üå± –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥</b>\n\n"
            f"<b>–î–æ—Å–∫–∞:</b> {board_name}\n"
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}"
        )
    elif event_type == 'milestone':
        posts_count = details.get('posts', 0)
        message_text = (
            f"<b>üìà –¢—Ä–µ–¥ –Ω–∞–±—Ä–∞–ª {posts_count} –ø–æ—Å—Ç–æ–≤</b>\n\n"
            f"<b>–î–æ—Å–∫–∞:</b> {board_name}\n"
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}"
        )
    elif event_type == 'high_activity':
        activity = details.get('activity', 0)
        message_text = (
            f"<b>üî• –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç—Ä–µ–¥–µ ({activity:.1f} –ø/—á)</b>\n\n"
            f"<b>–î–æ—Å–∫–∞:</b> {board_name}\n"
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}"
        )
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return

    try:
        await bot_instance.send_message(
            chat_id=ARCHIVE_CHANNEL_ID,
            text=message_text,
            parse_mode="HTML"
        )
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ–¥–µ '{title}' (—Å–æ–±—ã—Ç–∏–µ: {event_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        print(f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ–¥–µ '{title}' –≤ –∫–∞–Ω–∞–ª: {e}")

def _sync_generate_thread_archive(board_id: str, thread_id: str, thread_info: dict, posts_data: list[dict]) -> str | None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML-–∞—Ä—Ö–∏–≤–∞.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –µ–π –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–æ–≤.
    """
    try:
        title = escape_html(thread_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        filepath = os.path.join(DATA_DIR, f"archive_{board_id}_{thread_id}.html")

        html_style = """
        <style>
            body { font-family: sans-serif; background-color: #f0f0f0; color: #333; line-height: 1.6; margin: 20px; }
            .container { max-width: 800px; margin: auto; background-color: #fff; padding: 20px; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
            h1 { color: #d00; border-bottom: 2px solid #ccc; padding-bottom: 10px; }
            .post { border: 1px solid #ddd; padding: 10px; margin-bottom: 15px; border-radius: 4px; background-color: #fafafa; }
            .post-header { font-size: 0.9em; color: #888; margin-bottom: 10px; }
            .post-header b { color: #d00; }
            .post-content { white-space: pre-wrap; word-wrap: break-word; }
            .greentext { color: #789922; }
            .reply-link { color: #d00; text-decoration: none; }
        </style>
        """
        html_parts = [
            '<!DOCTYPE html>\n', '<html lang="ru">\n', '<head>\n', '    <meta charset="UTF-8">\n',
            f'    <title>–ê—Ä—Ö–∏–≤ —Ç—Ä–µ–¥–∞: {title}</title>\n', f'    {html_style}\n', '</head>\n',
            '<body>\n', '    <div class="container">\n', f'        <h1>{title}</h1>\n'
        ]
        
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É, –∞ –Ω–µ –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É ---
        for post_data in posts_data:
            content = post_data.get('content', {})
            post_num = content.get('post_num', 'N/A')
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –∏–∑ —Å—Ç—Ä–æ–∫–∏ ISO –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            timestamp_str = post_data.get('timestamp', '')
            try:
                timestamp_dt = datetime.fromisoformat(timestamp_str)
                timestamp_formatted = timestamp_dt.strftime('%Y-%m-%d %H:%M:%S UTC')
            except (ValueError, TypeError):
                timestamp_formatted = "N/A"
            
            post_body = ""
            if content.get('type') == 'text':
                text = clean_html_tags(content.get('text', ''))
                lines = text.split('\n')
                formatted_lines = []
                for line in lines:
                    safe_line = escape_html(line)
                    if safe_line.strip().startswith('&gt;'):
                        formatted_lines.append(f'<span class="greentext">{safe_line}</span>')
                    else:
                        formatted_lines.append(safe_line)
                post_body = "<br>".join(formatted_lines)
            elif content.get('type') in ['photo', 'video', 'animation', 'document', 'audio']:
                media_type_map = {'photo': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'video': '–í–∏–¥–µ–æ', 'animation': 'GIF', 'document': '–î–æ–∫—É–º–µ–Ω—Ç', 'audio': '–ê—É–¥–∏–æ'}
                media_type = media_type_map.get(content.get('type'), '–ú–µ–¥–∏–∞')
                caption = escape_html(clean_html_tags(content.get('caption', '')))
                post_body = f"<b>[{media_type}]</b><br>{caption}"
            else:
                 post_body = f"<i>[{content.get('type', '–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}]</i>"

            reply_to = content.get('reply_to_post')
            reply_html = f'<a href="#{reply_to}" class="reply-link">&gt;&gt;{reply_to}</a><br>' if reply_to else ""
            html_parts.append(
                f'        <div class="post" id="{post_num}">\n'
                '            <div class="post-header">\n'
                f'                <b>–ü–æ—Å—Ç ‚Ññ{post_num}</b> - {timestamp_formatted}\n'
                '            </div>\n'
                '            <div class="post-content">\n'
                f'                {reply_html}{post_body}\n'
                '            </div>\n'
                '        </div>\n'
            )
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
        html_parts.extend(['    </div>\n', '</body>\n', '</html>\n'])
        final_html_content = "".join(html_parts)
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(final_html_content)
        
        print(f"‚úÖ [{board_id}] –ê—Ä—Ö–∏–≤ –¥–ª—è —Ç—Ä–µ–¥–∞ {thread_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filepath}")
        return filepath

    except Exception as e:
        import traceback
        print(f"‚õî [{board_id}] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è —Ç—Ä–µ–¥–∞ {thread_id}: {e}\n{traceback.format_exc()}")
        return None
        
async def archive_thread(bots: dict[str, Bot], board_id: str, thread_id: str, thread_info: dict):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–∞ —Ç—Ä–µ–¥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    
    # 1. –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    posts_data_copy = []
    async with storage_lock:
        post_nums = thread_info.get('posts', [])
        for post_num in post_nums:
            post_data = messages_storage.get(post_num)
            if post_data:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, –ø—Ä–∏–≥–æ–¥–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫
                data_copy = {
                    'content': post_data.get('content', {}).copy(),
                    'timestamp': post_data.get('timestamp', datetime.now(UTC)).isoformat()
                }
                posts_data_copy.append(data_copy)
    
    # 2. –ü–µ—Ä–µ–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é –≤ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –∏ –∑–∞–ø–∏—Å–∏
    loop = asyncio.get_running_loop()
    filepath = await loop.run_in_executor(
        save_executor,
        _sync_generate_thread_archive,
        board_id, thread_id, thread_info, posts_data_copy
    )
    
    # 3. –ï—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–∞–Ω–∞–ª
    if filepath:
        await post_archive_to_channel(bots, filepath, board_id, thread_info)

@dp.message(Command("cancel"), FSMContext)
async def cmd_cancel_fsm(message: types.Message, state: FSMContext, board_id: str | None):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    current_state = await state.get_state()
    if current_state is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Ç–æ –∏ –æ—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ.
        # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å.
        try:
            await message.delete()
        except TelegramBadRequest:
            pass
        return

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if board_id:
        lang = 'en' if board_id == 'int' else 'ru'
        response_text = random.choice(thread_messages[lang]['create_cancelled'])
        await message.answer(response_text)
    
    try:
        await message.delete()
    except TelegramBadRequest:
        pass


async def thread_lifecycle_manager(bots: dict[str, Bot]):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ç—Ä–µ–¥–æ–≤: –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ."""
    while True:
        await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        now_dt = datetime.now(UTC)

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ñ–∞–∑—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π ---
        
        # –§–∞–∑–∞ 1: –°–±–æ—Ä –∑–∞–¥–∞—á –∏ –±—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        archives_to_generate = []    # [(board_id, thread_id, thread_info_copy), ...]
        notifications_to_queue = []  # [(board_id, recipients, content, thread_id_or_None), ...]
        
        async with storage_lock:
            for board_id in THREAD_BOARDS:
                b_data = board_data.get(board_id)
                if not b_data: continue

                threads_data = b_data.get('threads_data', {})
                threads_to_delete = []
                lang = 'en' if board_id == 'int' else 'ru'

                # –≠—Ç–∞–ø 1.1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –ø–æ –ª–∏–º–∏—Ç—É –ø–æ—Å—Ç–æ–≤
                for thread_id, thread_info in threads_data.items():
                    if not thread_info.get('is_archived') and len(thread_info.get('posts', [])) >= MAX_POSTS_PER_THREAD:
                        thread_info['is_archived'] = True
                        archives_to_generate.append((board_id, thread_id, thread_info.copy()))
                        
                        archive_text = random.choice(thread_messages[lang]['thread_archived']).format(
                            limit=MAX_POSTS_PER_THREAD,
                            title=thread_info.get('title', '...')
                        )
                        content = {'type': 'text', 'text': archive_text, 'is_system_message': True}
                        recipients = thread_info.get('subscribers', set())
                        if recipients:
                            notifications_to_queue.append((board_id, recipients, content, thread_id))

                # –≠—Ç–∞–ø 1.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–µ–π—à–µ–≥–æ —Ç—Ä–µ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
                active_threads = {tid: tdata for tid, tdata in threads_data.items() if not tdata.get('is_archived')}
                if len(active_threads) > MAX_ACTIVE_THREADS:
                    num_to_remove = len(active_threads) - MAX_ACTIVE_THREADS
                    oldest_threads = sorted(
                        active_threads.items(),
                        key=lambda item: item[1].get('last_activity_at', 0)
                    )[:num_to_remove]

                    for thread_id, thread_info in oldest_threads:
                        removed_title = thread_info.get('title', '...')
                        removal_text = random.choice(thread_messages[lang]['oldest_thread_removed']).format(title=removed_title)
                        content = {'type': 'text', 'text': removal_text, 'is_system_message': True}
                        recipients = b_data['users']['active']
                        notifications_to_queue.append((board_id, recipients, content, None))
                        threads_to_delete.append(thread_id)

                # –≠—Ç–∞–ø 1.3: –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–¥–æ–≤ (–∏–∑-–∑–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è) –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if threads_to_delete:
                    for thread_id in threads_to_delete:
                        threads_data.pop(thread_id, None)
                    print(f"üßπ [{board_id}] –£–¥–∞–ª–µ–Ω–æ {len(threads_to_delete)} —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–¥–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
                
                # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤ ---
                threads_to_purge = []
                now_ts = time.time()
                ARCHIVE_LIFETIME_SECONDS = 24 * 3600  # 24 —á–∞—Å–∞

                for thread_id, thread_info in threads_data.items():
                    if thread_info.get('is_archived'):
                        last_activity = thread_info.get('last_activity_at', 0)
                        if (now_ts - last_activity) > ARCHIVE_LIFETIME_SECONDS:
                            threads_to_purge.append(thread_id)
                
                if threads_to_purge:
                    for thread_id in threads_to_purge:
                        threads_data.pop(thread_id, None)
                    print(f"üßπ [{board_id}] –û—á–∏—â–µ–Ω–æ {len(threads_to_purge)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏.")
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        # --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ ---

        # –§–∞–∑–∞ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        for board_id, thread_id, thread_info_copy in archives_to_generate:
            asyncio.create_task(archive_thread(bots, board_id, thread_id, thread_info_copy))
            
        for board_id, recipients, content, thread_id in notifications_to_queue:
            try:
                if thread_id: # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ç—Ä–µ–¥–∞
                    b_data = board_data[board_id]
                    thread_info = b_data.get('threads_data', {}).get(thread_id)
                    if thread_info:
                        local_post_num = len(thread_info.get('posts', [])) + 1
                        header = await format_thread_post_header(board_id, local_post_num, 0, thread_info)
                        _, pnum = await format_header(board_id)
                        content['header'] = header
                        
                        async with storage_lock:
                            messages_storage[pnum] = {'author_id': 0, 'timestamp': now_dt, 'content': content, 'board_id': board_id, 'thread_id': thread_id}
                            thread_info['posts'].append(pnum)
                        await message_queues[board_id].put({'recipients': recipients, 'content': content, 'post_num': pnum, 'board_id': board_id, 'thread_id': thread_id})
                else: # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –¥–æ—Å–∫—É
                    header, pnum = await format_header(board_id)
                    content['header'] = header
                    async with storage_lock:
                         messages_storage[pnum] = {'author_id': 0, 'timestamp': now_dt, 'content': content, 'board_id': board_id}
                    await message_queues[board_id].put({'recipients': recipients, 'content': content, 'post_num': pnum, 'board_id': board_id})
            except Exception as e:
                 print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –≤ thread_lifecycle_manager: {e}")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

async def thread_activity_monitor(bots: dict[str, Bot]):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–¥–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    await asyncio.sleep(120)  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 –º–∏–Ω—É—Ç—ã

    while True:
        try:
            await asyncio.sleep(600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞—Ö –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π,
            # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π.
            thread_posts_by_board = defaultdict(lambda: defaultdict(list))
            async with storage_lock:
                one_hour_ago_for_check = datetime.now(UTC) - timedelta(hours=1)
                # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ values(), —Ç–∞–∫ –∫–∞–∫ –∫–ª—é—á–∏ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                for post_data in messages_storage.values():
                    # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã –∏–∑ —Ç—Ä–µ–¥–æ–≤
                    timestamp = post_data.get('timestamp')
                    if timestamp and timestamp > one_hour_ago_for_check:
                        board_id = post_data.get('board_id')
                        thread_id = post_data.get('thread_id')
                        # –î–æ–±–∞–≤–ª—è–µ–º post_num (–∏–ª–∏ 1) –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ len()
                        if board_id in THREAD_BOARDS and thread_id:
                            thread_posts_by_board[board_id][thread_id].append(1)
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            for board_id in THREAD_BOARDS:
                b_data = board_data.get(board_id)
                if not b_data:
                    continue

                threads_data = b_data.get('threads_data', {})
                
                for thread_id, thread_info in threads_data.items():
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–¥—ã –∏–ª–∏ —Ç–µ, –æ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏
                    if thread_info.get('is_archived') or thread_info.get('activity_notified'):
                        continue
                    
                    # –°—á–∏—Ç–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    recent_posts_count = len(thread_posts_by_board.get(board_id, {}).get(thread_id, []))

                    # –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - 15 –ø–æ—Å—Ç–æ–≤/—á–∞—Å
                    ACTIVITY_THRESHOLD = 15
                    if recent_posts_count >= ACTIVITY_THRESHOLD:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å
                        thread_info['activity_notified'] = True
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        asyncio.create_task(post_thread_notification_to_channel(
                            bots=bots,
                            board_id=board_id,
                            thread_id=thread_id,
                            thread_info=thread_info,
                            event_type='high_activity',
                            details={'activity': float(recent_posts_count)}
                        ))

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ thread_activity_monitor: {e}")
            await asyncio.sleep(120) # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def memory_logger_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏."""
    # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await asyncio.sleep(80) #1.5 –º–∏–Ω—É—Ç
    
    while True:
        try:
            await log_memory_summary()
            # –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è - 25 –º–∏–Ω—É—Ç
            await asyncio.sleep(1500)
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ —Å–∞–º–æ–º –ª–æ–≥–≥–µ—Ä–µ, –∂–¥–µ–º –¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ memory_logger_task: {e}")
            await asyncio.sleep(600)

@dp.message(ThreadCreateStates.waiting_for_op_post, F.text)
async def process_op_post_text(message: types.Message, state: FSMContext, board_id: str | None):
    """
    –õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –û–ü-–ø–æ—Å—Ç–∞, –æ—á–∏—â–∞–µ—Ç –µ–≥–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —ç—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    if not board_id: return
    lang = 'en' if board_id == 'int' else 'ru'

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ FSM ---
    raw_html_text = message.html_text
    safe_html_text = sanitize_html(raw_html_text)
    await state.update_data(op_post_text=safe_html_text)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    await state.set_state(ThreadCreateStates.waiting_for_confirmation)

    if lang == 'en':
        confirmation_text = f"You want to create a thread with this opening post:\n\n---\n{safe_html_text}\n---\n\nCreate?"
        button_create = "‚úÖ Create Thread"
        button_edit = "‚úèÔ∏è Edit Text"
    else:
        confirmation_text = f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥ —Å —Ç–∞–∫–∏–º –û–ü-–ø–æ—Å—Ç–æ–º:\n\n---\n{safe_html_text}\n---\n\n–°–æ–∑–¥–∞–µ–º?"
        button_create = "‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥"
        button_edit = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=button_create, callback_data="create_thread_confirm"),
            InlineKeyboardButton(text=button_edit, callback_data="create_thread_edit")
        ]
    ])

    await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="HTML")


@dp.message(ThreadCreateStates.waiting_for_op_post)
async def process_op_post_invalid(message: types.Message, state: FSMContext, board_id: str | None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ (–Ω–µ —Ç–µ–∫—Å—Ç) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –û–ü-–ø–æ—Å—Ç–∞.
    """
    if not board_id: return
    lang = 'en' if board_id == 'int' else 'ru'

    response_text = random.choice(thread_messages[lang]['create_invalid_input'])
    
    try:
        await message.answer(response_text)
        await message.delete()
    except (TelegramForbiddenError, TelegramBadRequest):
        pass


@dp.callback_query(F.data == "create_thread_start")
async def cb_create_thread_start(callback: types.CallbackQuery, state: FSMContext, board_id: str | None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥', –∑–∞–ø—É—Å–∫–∞–µ—Ç FSM.
    """
    if not board_id or board_id not in THREAD_BOARDS:
        await callback.answer("This feature is not available here.", show_alert=True)
        return

    lang = 'en' if board_id == 'int' else 'ru'

    await state.set_state(ThreadCreateStates.waiting_for_op_post)

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
    prompt_phrases = thread_messages.get(lang, {}).get('create_prompt_op_post', [])
    default_prompt = "Please send the text for your opening post." if lang == 'en' else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –û–ü-–ø–æ—Å—Ç–∞."
    prompt_text = random.choice(prompt_phrases) if prompt_phrases else default_prompt
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    await callback.answer()
    
    try:
        await callback.message.answer(prompt_text)
        await callback.message.delete()
    except (TelegramForbiddenError, TelegramBadRequest):
        pass

@dp.callback_query(F.data.startswith("threads_page_"))
async def cq_threads_page(callback: types.CallbackQuery, board_id: str | None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å–ø–∏—Å–∫–µ —Ç—Ä–µ–¥–æ–≤."""
    if not board_id or board_id not in THREAD_BOARDS:
        await callback.answer("This action is not available here.", show_alert=True)
        return

    try:
        page = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("Invalid page number.", show_alert=True)
        return
        
    b_data = board_data[board_id]
    
    text, keyboard = await generate_threads_page(b_data, callback.from_user.id, page=page)
    
    try:
        if callback.message.text != text:
             await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–¥–æ–≤: {e}")
            
    await callback.answer()


@dp.callback_query(F.data.startswith("show_history_"))
async def cq_thread_history(callback: types.CallbackQuery, board_id: str | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–¥–∞."""
    if not board_id or board_id not in THREAD_BOARDS:
        await callback.answer("This action is not available here.", show_alert=True)
        return
        
    try:
        thread_id = callback.data.split("_")[-1]
    except (ValueError, IndexError):
        await callback.answer("Invalid thread ID.", show_alert=True)
        return

    user_id = callback.from_user.id
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'
    tm_lang = thread_messages.get(lang, {})
    
    user_s = b_data['user_state'].setdefault(user_id, {})
    now_ts = time.time()
    last_history_req = user_s.get('last_history_request', 0)
    
    if now_ts - last_history_req < THREAD_HISTORY_COOLDOWN:
        cooldown_phrases = tm_lang.get('history_cooldown', ["Cooldown! Wait {minutes} min."])
        cooldown_msg = random.choice(cooldown_phrases).format(minutes=str(THREAD_HISTORY_COOLDOWN // 60))
        await callback.answer(cooldown_msg, show_alert=True)
        return

    thread_info = b_data.get('threads_data', {}).get(thread_id)
    if not thread_info:
        not_found_phrases = tm_lang.get('thread_not_found', ["Thread not found."])
        not_found_msg = random.choice(not_found_phrases)
        await callback.answer(not_found_msg, show_alert=True)
        return

    user_s['last_history_request'] = now_ts
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é...")

    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–¥–∞ –¥–æ 0
    temp_user_state = user_s.copy()
    temp_user_state.setdefault('last_seen_threads', {})[thread_id] = 0
    b_data['user_state'][user_id] = temp_user_state

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç –í–°–ï –ø–æ—Å—Ç—ã
    await send_missed_messages(callback.bot, board_id, user_id, thread_id)

async def _enter_thread_logic(bot: Bot, board_id: str, user_id: int, thread_id: str, message_to_delete: types.Message | None = None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–µ–¥.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∏–∑ cmd_start, —Ç–∞–∫ –∏ –∏–∑ cq_enter_thread.
    """
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'
    tm_lang = thread_messages.get(lang, {})
    
    threads_data = b_data.get('threads_data', {})
    if thread_id not in threads_data:
        return

    user_s = b_data['user_state'].setdefault(user_id, {})
    
    now_ts = time.time()
    last_switch = user_s.get('last_location_switch', 0)
    if now_ts - last_switch < LOCATION_SWITCH_COOLDOWN:
        cooldown_phrases = tm_lang.get('location_switch_cooldown', ["Too fast! Please wait a moment."])
        cooldown_msg = random.choice(cooldown_phrases)
        try:
            sent_msg = await bot.send_message(user_id, cooldown_msg)
            asyncio.create_task(delete_message_after_delay(sent_msg, 5))
        except (TelegramForbiddenError, TelegramBadRequest):
            pass
        return

    current_location = user_s.get('location', 'main')
    if current_location == thread_id:
        return
        
    if current_location == 'main':
        user_s['last_seen_main'] = state.get('post_counter', 0)

    user_s['location'] = thread_id
    user_s['last_location_switch'] = now_ts
    threads_data[thread_id].setdefault('subscribers', set()).add(user_id)
    
    if message_to_delete:
        try:
            await message_to_delete.delete()
        except TelegramBadRequest:
            pass

    # –ü–æ–ª—É—á–∞–µ–º –î–í–ê –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    was_missed, show_history_button = await send_missed_messages(bot, board_id, user_id, thread_id)
    
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ send_missed_messages –ù–ï –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not was_missed:
        thread_title = threads_data[thread_id].get('title', '...')
        seen_threads = user_s.setdefault('last_seen_threads', {})
        
        if thread_id not in seen_threads:
            prompt_phrases = tm_lang.get('enter_thread_prompt', [f"Entered thread: {thread_title}"])
            response_text = random.choice(prompt_phrases).format(title=thread_title)
        else:
            success_phrases = tm_lang.get('enter_thread_success', [f"Re-entered thread: {thread_title}"])
            response_text = random.choice(success_phrases).format(title=thread_title)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ (–æ–Ω –±—É–¥–µ—Ç False), —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–í—Å—è –ª–µ—Ç–æ–ø–∏—Å—å"
        entry_keyboard = _get_thread_entry_keyboard(board_id, show_history_button)
        try:
            await bot.send_message(user_id, response_text, reply_markup=entry_keyboard, parse_mode="HTML")
        except (TelegramForbiddenError, TelegramBadRequest):
            pass
        
    await _send_op_commands_info(bot, user_id, board_id)

@dp.callback_query(F.data.startswith("enter_thread_"))
async def cq_enter_thread(callback: types.CallbackQuery, board_id: str | None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–µ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏."""
    if not board_id or board_id not in THREAD_BOARDS:
        await callback.answer("This action is not available here.", show_alert=True)
        return
        
    try:
        thread_id = callback.data.split("_")[-1]
    except (ValueError, IndexError):
        await callback.answer("Invalid thread ID.", show_alert=True)
        return
        
    user_id = callback.from_user.id
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –í—Å—è –ª–æ–≥–∏–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –≤—ã–∑–æ–≤ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ---
    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"

    # –í–´–ó–´–í–ê–ï–ú –ù–û–í–£–Æ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
    await _enter_thread_logic(
        bot=callback.bot,
        board_id=board_id,
        user_id=user_id,
        thread_id=thread_id,
        message_to_delete=callback.message
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
@dp.callback_query(F.data == "leave_thread")
async def cb_leave_thread(callback: types.CallbackQuery, board_id: str | None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–¥–∞', —ç–º—É–ª–∏—Ä—É—è –∫–æ–º–∞–Ω–¥—É /leave.
    """
    if not board_id or board_id not in THREAD_BOARDS:
        await callback.answer("This action is not available here.", show_alert=True)
        return

    user_id = callback.from_user.id
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'

    user_s = b_data['user_state'].setdefault(user_id, {})
    current_location = user_s.get('location', 'main')

    if current_location == 'main':
        await callback.answer()
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
        return

    thread_id = current_location
    thread_info = b_data.get('threads_data', {}).get(thread_id)
    if thread_info:
        last_thread_post = thread_info.get('posts', [0])[-1] if thread_info.get('posts') else 0
        user_s.setdefault('last_seen_threads', {})[thread_id] = last_thread_post
    
    user_s['location'] = 'main'
    user_s['last_location_switch'] = time.time()
    
    response_text = random.choice(thread_messages[lang]['leave_thread_success'])
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
    leave_keyboard = _get_leave_thread_keyboard(board_id)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    await callback.answer()
    try:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ .answer() ---
        await callback.message.answer(response_text, reply_markup=leave_keyboard)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        await callback.message.delete()
    except (TelegramForbiddenError, TelegramBadRequest):
        pass

    await send_missed_messages(callback.bot, board_id, user_id, 'main')

@dp.message(Command("leave"))
async def cmd_leave(message: types.Message, board_id: str | None):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç—Ä–µ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –¥–æ—Å–∫—É."""
    if not board_id: return

    if board_id not in THREAD_BOARDS:
        try: await message.delete()
        except Exception: pass
        return

    user_id = message.from_user.id
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'

    user_s = b_data['user_state'].setdefault(user_id, {})
    current_location = user_s.get('location', 'main')

    if current_location == 'main':
        await message.delete()
        return

    now_ts = time.time()
    last_switch = user_s.get('last_location_switch', 0)
    if now_ts - last_switch < LOCATION_SWITCH_COOLDOWN:
        cooldown_text = random.choice(thread_messages[lang]['location_switch_cooldown'])
        await message.answer(cooldown_text)
        await message.delete()
        return

    thread_id = current_location
    thread_info = b_data.get('threads_data', {}).get(thread_id)
    if thread_info:
        last_thread_post = thread_info.get('posts', [0])[-1] if thread_info.get('posts') else 0
        user_s.setdefault('last_seen_threads', {})[thread_id] = last_thread_post

    user_s['location'] = 'main'
    user_s['last_location_switch'] = now_ts
    
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–¥–≤–æ–π–Ω—ã—Ö" —Å–æ–æ–±—â–µ–Ω–∏–π
    await message.delete()
    
    # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ—Å–∫–∏
    await send_missed_messages(message.bot, board_id, user_id, 'main')
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ –≤—ã—Ö–æ–¥–µ ---
    response_text = random.choice(thread_messages[lang]['leave_thread_success'])
    leave_keyboard = _get_leave_thread_keyboard(board_id)
    await message.answer(response_text, reply_markup=leave_keyboard)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

@dp.message(Command("mute"))
async def cmd_mute(message: Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É (OP-–∫–æ–º–∞–Ω–¥–µ)
        # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã aiogram –ø—Ä–æ–¥–æ–ª–∂–∏–ª –ø–æ–∏—Å–∫
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∏ aiogram –ø–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ –ø–æ —Å–ø–∏—Å–∫—É
        return

    command_args = message.text.split()[1:]
    if not command_args and not message.reply_to_message:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute <user_id> [–≤—Ä–µ–º—è] –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await message.delete()
        return

    target_id = None
    duration_str = "24h"

    if message.reply_to_message:
        async with storage_lock:
            target_id = get_author_id_by_reply(message)
        if command_args:
            duration_str = command_args[0]
    elif command_args:
        try:
            target_id = int(command_args[0])
            if len(command_args) > 1:
                duration_str = command_args[1]
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.delete()
            return
            
    if not target_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.delete()
        return

    try:
        duration_str = duration_str.lower().replace(" ", "")
        if duration_str.endswith("m"): mute_seconds, duration_text = int(duration_str[:-1]) * 60, f"{int(duration_str[:-1])} –º–∏–Ω—É—Ç"
        elif duration_str.endswith("h"): mute_seconds, duration_text = int(duration_str[:-1]) * 3600, f"{int(duration_str[:-1])} —á–∞—Å–æ–≤"
        elif duration_str.endswith("d"): mute_seconds, duration_text = int(duration_str[:-1]) * 86400, f"{int(duration_str[:-1])} –¥–Ω–µ–π"
        else: mute_seconds, duration_text = int(duration_str) * 60, f"{int(duration_str)} –º–∏–Ω—É—Ç"
        mute_seconds = min(mute_seconds, 2592000)
    except (ValueError, AttributeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ü—Ä–∏–º–µ—Ä—ã: 30m, 2h, 1d)")
        await message.delete()
        return

    deleted_count = await delete_user_posts(message.bot, target_id, 5, board_id)
    
    b_data = board_data[board_id]
    b_data['mutes'][target_id] = datetime.now(UTC) + timedelta(seconds=mute_seconds)

    board_name = BOARD_CONFIG[board_id]['name']
    await message.answer(
        f"üîá –•—É–∏–ª–∞ {target_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_text} –Ω–∞ –¥–æ—Å–∫–µ {board_name}\n"
        f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_count}",
        parse_mode="HTML"
    )

    await send_moderation_notice(target_id, "mute", board_id, duration=duration_text, deleted_posts=deleted_count)

    try:
        lang = 'en' if board_id == 'int' else 'ru'
        
        if lang == 'en':
            phrases = [
                "üîá You have been muted on the {board} board for {duration}.\nDeleted your posts in the last 5 minutes: {deleted}.",
                "üó£Ô∏è Your right to speak has been temporarily revoked on {board} for {duration}. Think about your behavior.\nDeleted posts: {deleted}.",
                "ü§ê Shut up for {duration} on the {board} board.\nDeleted posts: {deleted}."
            ]
        else:
            phrases = [
                "üîá –ü–∏–¥–æ—Ä –µ–±–∞–Ω—ã–π, —Ç–µ–±—è –∑–∞–º—É—Ç–∏–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ {board} –Ω–∞ {duration}.\n–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted}.",
                "üó£Ô∏è –¢–≤–æ–π —Ä–æ—Ç –±—ã–ª –∑–∞–ø–µ—á–∞—Ç–∞–Ω –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–µ—á–∞—Ç—å—é –Ω–∞ {duration} –Ω–∞ –¥–æ—Å–∫–µ {board}.\n–¢–≤–æ–∏ –≤—ã—Å–µ—Ä—ã ({deleted} —à—Ç.) —É–¥–∞–ª–µ–Ω—ã.",
                "ü§ê –ü–æ–º–æ–ª—á–∏, –ø–æ–¥—É–º–æ–π. –¢—ã –≤ –º—É—Ç–µ –Ω–∞ {duration} –Ω–∞ –¥–æ—Å–∫–µ {board}.\n–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {deleted}."
                "üîá –¢–´ - –ì–û–í–ù–û. –û–¢–ü–†–ê–í–õ–Ø–ô–°–Ø –í –ú–£–¢ –ù–ê {time}.",
                "ü§ê –ó–ê–í–ê–õ–ò –•–ê–í–ê–õ–ö–£! –¢–í–û–ô –†–û–¢ –ó–ê–ö–õ–ï–ï–ù –°–ö–û–¢–ß–ï–ú –ù–ê {time}",
            ]
        
        notification_text = random.choice(phrases).format(board=board_name, duration=duration_text, deleted=deleted_count)
        await message.bot.send_message(target_id, notification_text, parse_mode="HTML")
    except:
        pass
    await message.delete()

@dp.message(Command("unmute"))
async def cmd_unmute(message: types.Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        return

    target_id = None
    if message.reply_to_message:
        async with storage_lock:
            target_id = get_author_id_by_reply(message)
    else:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = int(parts[1])

    if not target_id:
        await message.answer("–ù—É–∂–Ω–æ reply –∏–ª–∏ /unmute <id>")
        return

    b_data = board_data[board_id]
    board_name = BOARD_CONFIG[board_id]['name']
    if b_data['mutes'].pop(target_id, None):
        await message.answer(f"üîà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {board_name}.")
        try:
            lang = 'en' if board_id == 'int' else 'ru'
            if lang == 'en':
                phrases = [
                    "üîä You have been unmuted on the {board} board. Try to behave.",
                    "‚úÖ You can speak again on {board}. Don't make us regret this.",
                    "üó£Ô∏è Your voice has been returned on the {board} board."
                ]
            else:
                phrases = [
                    "–¢–µ–±—è —Ä–∞–∑–º—É—Ç–∏–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ {board}.",
                    "‚úÖ –ú–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–≤–æ—é –ø–∞—Å—Ç—å –Ω–∞ –¥–æ—Å–∫–µ {board}. –ù–æ –≤–ø—Ä–µ–¥—å –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω.",
                    "üó£Ô∏è –ê–¥–º–∏–Ω —Å–º–∏–ª–æ—Å—Ç–∏–≤–∏–ª—Å—è. –¢—ã —Ä–∞–∑–º—É—á–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {board}."
                ]
            notification_text = random.choice(phrases).format(board=board_name)
            await message.bot.send_message(target_id, notification_text)
        except:
            pass
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –±—ã–ª –≤ –º—É—Ç–µ –Ω–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ.")
    await message.delete()

@dp.message(Command("shadowmute"))
async def cmd_shadowmute(message: Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        return

    args = message.text.split()[1:]
    target_id = None
    duration_str = "24h"

    if message.reply_to_message:
        async with storage_lock:
            target_id = get_author_id_by_reply(message)
        if args:
            duration_str = args[0]
    elif args:
        try:
            target_id = int(args[0])
            if len(args) > 1:
                duration_str = args[1]
        except ValueError:
            pass

    if not target_id:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /shadowmute <user_id> [–≤—Ä–µ–º—è] –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        duration_str = duration_str.lower().replace(" ", "")
        if duration_str.endswith("m"): total_seconds, time_str = int(duration_str[:-1]) * 60, f"{int(duration_str[:-1])} –º–∏–Ω"
        elif duration_str.endswith("h"): total_seconds, time_str = int(duration_str[:-1]) * 3600, f"{int(duration_str[:-1])} —á–∞—Å"
        elif duration_str.endswith("d"): total_seconds, time_str = int(duration_str[:-1]) * 86400, f"{int(duration_str[:-1])} –¥–Ω–µ–π"
        else: total_seconds, time_str = int(duration_str) * 60, f"{int(duration_str)} –º–∏–Ω"
        
        total_seconds = min(total_seconds, 2592000)
        b_data = board_data[board_id]
        b_data['shadow_mutes'][target_id] = datetime.now(UTC) + timedelta(seconds=total_seconds)

        board_name = BOARD_CONFIG[board_id]['name']
        await message.answer(f"üëª –¢–∏—Ö–æ –∑–∞–º—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞ {time_str} –Ω–∞ –¥–æ—Å–∫–µ {board_name}.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 30m, 2h, 1d")
    await message.delete()


@dp.message(Command("unshadowmute"))
async def cmd_unshadowmute(message: Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        return

    target_id = None
    parts = message.text.split()
    if len(parts) >= 2 and parts[1].isdigit():
        target_id = int(parts[1])
    elif message.reply_to_message:
        async with storage_lock:
            target_id = get_author_id_by_reply(message)

    if not target_id:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unshadowmute <user_id> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    b_data = board_data[board_id]
    board_name = BOARD_CONFIG[board_id]['name']
    if b_data['shadow_mutes'].pop(target_id, None):
        await message.answer(f"üëª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–∏—Ö–æ —Ä–∞–∑–º—É—á–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {board_name}.")
    else:
        await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –≤ shadow-–º—É—Ç–µ –Ω–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ.")
    await message.delete()

@dp.message(Command("mute"))
async def cmd_op_mute(message: types.Message, board_id: str | None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –û–ü–æ–º –≤ —Ç—Ä–µ–¥–µ."""
    if not board_id or board_id not in THREAD_BOARDS:
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, —Ç–æ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ
    if is_admin(message.from_user.id, board_id):
        return

    user_id = message.from_user.id
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'

    user_s = b_data.get('user_state', {}).get(user_id, {})
    location = user_s.get('location', 'main')

    if location == 'main':
        await message.delete()
        return

    thread_id = location
    threads_data = b_data.get('threads_data', {})
    thread_info = threads_data.get(thread_id)

    if not thread_info or thread_info.get('op_id') != user_id:
        await message.delete()
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ ---
    now_ts = time.time()
    last_op_command_ts = user_s.get('last_op_command_ts', 0)

    if now_ts - last_op_command_ts < OP_COMMAND_COOLDOWN:
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω–∏–π —Ñ–ª—É–¥
        await message.delete()
        return
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    if not message.reply_to_message:
        await message.delete()
        return
        
    target_id = None
    async with storage_lock:
        target_id = get_author_id_by_reply(message)

    if not target_id or target_id == user_id:
        await message.delete()
        return
        
    duration_seconds = 600
    expires_ts = time.time() + duration_seconds
    
    thread_info.setdefault('local_mutes', {})[target_id] = expires_ts

    duration_text = str(duration_seconds // 60)
    response_text = random.choice(thread_messages[lang]['op_mute_success']).format(duration=duration_text)
    
    await message.answer(response_text)
    await message.delete()

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ---
    user_s['last_op_command_ts'] = now_ts
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

@dp.message(Command("unmute"))
async def cmd_op_unmute(message: types.Message, board_id: str | None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –û–ü–æ–º –≤ —Ç—Ä–µ–¥–µ."""
    if not board_id or board_id not in THREAD_BOARDS:
        return

    if is_admin(message.from_user.id, board_id):
        return

    user_id = message.from_user.id
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'

    user_s = b_data.get('user_state', {}).get(user_id, {})
    location = user_s.get('location', 'main')

    if location == 'main':
        await message.delete()
        return

    thread_id = location
    threads_data = b_data.get('threads_data', {})
    thread_info = threads_data.get(thread_id)

    if not thread_info or thread_info.get('op_id') != user_id:
        await message.delete()
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ ---
    now_ts = time.time()
    last_op_command_ts = user_s.get('last_op_command_ts', 0)

    if now_ts - last_op_command_ts < OP_COMMAND_COOLDOWN:
        await message.delete()
        return
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    if not message.reply_to_message:
        await message.delete()
        return

    target_id = None
    async with storage_lock:
        target_id = get_author_id_by_reply(message)

    if not target_id:
        await message.delete()
        return

    local_mutes = thread_info.get('local_mutes', {})
    if target_id in local_mutes:
        del local_mutes[target_id]
        response_text = random.choice(thread_messages[lang]['op_unmute_success'])
        await message.answer(response_text)
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ---
        user_s['last_op_command_ts'] = now_ts
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    await message.delete()
    
@dp.message(Command("shadowmute"))
async def cmd_op_shadowmute(message: types.Message, board_id: str | None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–Ω–µ–≤–æ–π –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –û–ü–æ–º –≤ —Ç—Ä–µ–¥–µ."""
    if not board_id or board_id not in THREAD_BOARDS: return
    if is_admin(message.from_user.id, board_id): return

    user_id = message.from_user.id
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'

    user_s = b_data.get('user_state', {}).get(user_id, {})
    location = user_s.get('location', 'main')
    
    if location == 'main':
        await message.delete()
        return

    thread_info = b_data.get('threads_data', {}).get(location)
    if not thread_info or thread_info.get('op_id') != user_id:
        await message.delete()
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ ---
    now_ts = time.time()
    last_op_command_ts = user_s.get('last_op_command_ts', 0)

    if now_ts - last_op_command_ts < OP_COMMAND_COOLDOWN:
        await message.delete()
        return
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    if not message.reply_to_message:
        await message.delete()
        return

    target_id = None
    async with storage_lock:
        target_id = get_author_id_by_reply(message)
    
    if not target_id or target_id == user_id:
        await message.delete()
        return
        
    duration_seconds = 600 # 10 –º–∏–Ω—É—Ç
    expires_ts = time.time() + duration_seconds
    thread_info.setdefault('local_shadow_mutes', {})[target_id] = expires_ts
    
    duration_text = str(duration_seconds // 60)
    response_text = random.choice(thread_messages[lang]['op_mute_success']).format(duration=duration_text)
    await message.answer(f"üëª (shadow) {response_text}")
    await message.delete()

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ---
    user_s['last_op_command_ts'] = now_ts
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

@dp.message(Command("unshadowmute"))
async def cmd_op_unshadowmute(message: types.Message, board_id: str | None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–Ω–µ–≤–æ–π —Ä–∞–∑–º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –û–ü–æ–º –≤ —Ç—Ä–µ–¥–µ."""
    if not board_id or board_id not in THREAD_BOARDS: return
    if is_admin(message.from_user.id, board_id): return

    user_id = message.from_user.id
    b_data = board_data[board_id]
    lang = 'en' if board_id == 'int' else 'ru'

    user_s = b_data.get('user_state', {}).get(user_id, {})
    location = user_s.get('location', 'main')
    
    if location == 'main':
        await message.delete()
        return

    thread_info = b_data.get('threads_data', {}).get(location)
    if not thread_info or thread_info.get('op_id') != user_id:
        await message.delete()
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ ---
    now_ts = time.time()
    last_op_command_ts = user_s.get('last_op_command_ts', 0)

    if now_ts - last_op_command_ts < OP_COMMAND_COOLDOWN:
        await message.delete()
        return
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    if not message.reply_to_message:
        await message.delete()
        return
    
    target_id = None
    async with storage_lock:
        target_id = get_author_id_by_reply(message)

    if not target_id:
        await message.delete()
        return

    local_shadow_mutes = thread_info.get('local_shadow_mutes', {})
    if target_id in local_shadow_mutes:
        del local_shadow_mutes[target_id]
        response_text = random.choice(thread_messages[lang]['op_unmute_success'])
        await message.answer(f"üëª (shadow) {response_text}")
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ---
        user_s['last_op_command_ts'] = now_ts
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    await message.delete()
    
@dp.message(Command("invite"))
async def cmd_invite(message: types.Message, board_id: str | None):
    if not board_id: return

    board_username = BOARD_CONFIG[board_id]['username']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    invite_texts_specific = [
        f"–ê–Ω–æ–Ω, –∑–∞–ª–µ—Ç–∞–π –≤ –¢–≥–∞—á {board_username}\n–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ",
        f"–ï—Å—Ç—å —Ç–µ–ª–µ–≥–∞? –ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? \n{board_username} - –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
        f"–£—Å—Ç–∞–ª –æ—Ç —Ü–µ–Ω–∑—É—Ä—ã? –•–æ—á–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏?\n –í–µ–ª–∫–∞–º –≤ –¢–≥–∞—á - {board_username} - –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ",
        f"{board_username} - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    ]
    invite_text = random.choice(invite_texts_specific)

    await message.answer(
        f"üì® <b>–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–Ω–æ–Ω–æ–≤ –Ω–∞ —ç—Ç—É –¥–æ—Å–∫—É:</b>\n\n"
        f"<code>{escape_html(invite_text)}</code>\n\n"
        f"<i>–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å</i>",
        parse_mode="HTML")
    await message.delete() # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É /invite


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message, board_id: str | None):
    if not board_id: return
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–¥–∞
    if board_id in THREAD_BOARDS:
        user_id = message.from_user.id
        b_data = board_data[board_id]
        user_location = b_data.get('user_state', {}).get(user_id, {}).get('location', 'main')
        if user_location != 'main':
            try: await message.delete()
            except Exception: pass
            return
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    b_data = board_data[board_id]
    total_users_on_board = len(b_data['users']['active'])
    total_posts_on_board = b_data.get('board_post_count', 0)
    total_users_b = len(board_data['b']['users']['active'])

    if board_id == 'int':
        stats_text = (f"üìä Board Statistics {BOARD_CONFIG[board_id]['name']}:\n\n"
                      f"üë• Anons on this board: {total_users_on_board}\n"
                      f"üë• Total anons in TGACH: {total_users_b}\n"
                      f"üì® Posts on this board: {total_posts_on_board}\n"
                      f"üìà Total posts in TGACH: {state['post_counter']}")
    else:
        stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏ {BOARD_CONFIG[board_id]['name']}:\n\n"
                      f"üë• –ê–Ω–æ–Ω–∏–º–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ: {total_users_on_board}\n"
                      f"üë• –í—Å–µ–≥–æ –∞–Ω–æ–Ω–æ–≤ –≤ –¢–≥–∞—á–µ: {total_users_b}\n"
                      f"üì® –ü–æ—Å—Ç–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ: {total_posts_on_board}\n"
                      f"üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–≥–∞—á–µ: {state['post_counter']}")
        
    if random.random() < 0.5:
        if board_id == 'int':
            dvach_caption = random.choice(DVACH_STATS_CAPTIONS_EN)
        else:
            dvach_caption = random.choice(DVACH_STATS_CAPTIONS)
        stats_text = f"{stats_text}\n\n<i>{dvach_caption}</i>"
        
    header, pnum = await format_header(board_id)
    content = {'type': 'text', 'header': header, 'text': stats_text}
    
    messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}

    await message_queues[board_id].put({
        'recipients': b_data['users']['active'],
        'content': content,
        'post_num': pnum,
        'board_id': board_id
    })
    await message.delete()
    
@dp.message(Command("anime"))
async def cmd_anime(message: types.Message, board_id: str | None):
    if not board_id: return

    b_data = board_data[board_id]

    if not await check_cooldown(message, board_id):
        return

    b_data['anime_mode'] = True
    b_data['zaputin_mode'] = False
    b_data['slavaukraine_mode'] = False
    b_data['suka_blyat_mode'] = False
    b_data['last_mode_activation'] = datetime.now(UTC)

    header = "### ÁÆ°ÁêÜËÄÖ ###"
    _, pnum = await format_header(board_id)

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    activation_phrases = [
        "„Å´„ÇÉ„ÅÇÔΩûÔºÅ„Ç¢„Éã„É°„É¢„Éº„Éâ„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà„Åï„Çå„Åæ„Åó„ÅüÔºÅ\n\n^_^",
        "„ÅäÂÖÑ„Å°„ÇÉ„Çì„ÄÅÂ§ßÂ§âÔºÅ„Ç¢„Éã„É°„É¢„Éº„Éâ„ÅÆÊôÇÈñì„Å†„ÇàÔºÅ UWU",
        "„Ç¢„Éã„É°„ÅÆÂäõ„Åå„Åì„ÅÆ„ÉÅ„É£„ÉÉ„Éà„Å´Ê∫Ä„Å°„Å¶„ÅÑ„Åæ„ÅôÔºÅ(Ôæâ¬¥„ÉÆ¬¥)Ôæâ*:ÔΩ•Ôæü‚úß",
        "„Äé„Éó„É≠„Ç∏„Çß„ÇØ„ÉàA„ÄèÁô∫ÂãïÔºÅ„Åì„Çå„Çà„Çä„ÉÅ„É£„ÉÉ„Éà„ÅØ„Ç¢„Ç≠„Éè„Éê„É©Ëá™Ê≤ªÂå∫„Å®„Å™„ÇãÔºÅ",
        "„Åì„ÅÆ„ÉÅ„É£„ÉÉ„Éà„ÅØ„Äå‰∫∫Èñì„Äç„Çí„ÇÑ„ÇÅ„Çã„ÅûÔºÅ„Ç∏„Éß„Ç∏„Éß„Éº„Éº„ÉÉÔºÅ\n\n„Ç¢ „Éã „É° „É¢ „Éº „Éâ „Å†ÔºÅ",
        "Âêõ„ÇÇ... Ë¶ã„Åà„Çã„ÅÆ„ÅãÔºü„Äé„ÉÅ„É£„ÉÉ„Éà„ÅÆ„Çπ„Çø„É≥„Éâ„Äè„Åå...ÔºÅ„Ç¢„Éã„É°„É¢„Éº„ÉâÁô∫ÂãïÔºÅ",
        "„ÉÅ„É£„ÉÉ„Éà„ÅÆÁöÜ„Åï„Çì„ÄÅËÅû„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑÔºÅÁßÅ„ÄÅÈ≠îÊ≥ïÂ∞ëÂ•≥„Å´„Å™„Å£„Å°„ÇÉ„Å£„ÅüÔºÅ\n\n„Ç¢„Éã„É°„É¢„Éº„Éâ„ÄÅ„Ç™„É≥ÔºÅ",
        "‰∏âÁôæÂπ¥„ÅÆÂ≠§Áã¨„Å´„ÄÅÂÖâ„ÅåÂ∞Ñ„Åó„Åü‚Ä¶ „Ç¢„Éã„É°„É¢„Éº„Éâ„ÅÆÊôÇÈñì„Å†„ÄÇ",
        "Áï∞‰∏ñÁïåËª¢Áîü„Åó„Åü„Çâ„ÉÅ„É£„ÉÉ„Éà„ÅåÂÖ®ÈÉ®Êó•Êú¨Ë™û„Å´„Å™„Å£„Å¶„ÅÑ„Åü‰ª∂„ÄÇ\n\n„Ç¢„Éã„É°„É¢„Éº„Éâ„ÄÅ„Çπ„Çø„Éº„ÉàÔºÅ",
        "üå∏ „ÅäÂâç„ÅØ„ÇÇ„ÅÜÊ≠ª„Çì„Åß„ÅÑ„Çã... –ê–ù–ò–ú–ï –†–ï–ñ–ò–ú: OMAE WA MOU SHINDEIRU!",
        "‚úßÔΩ•Ôæü: *‚úßÔΩ•Ôæü‚ô° –í–ö–õ–Æ–ß–ê–ï–ú –ö–ê–í–ê–ô–ù–´–ô –ê–î! ‚ô°ÔΩ•Ôæü‚úß*:ÔΩ•Ôæü‚úß",
        "‚ö° ÂçÉ Êú¨ Ê°ú ‚ö° –ù–Ø!",
        "„Å∞„ÅãÔºÅ„Å∏„Çì„Åü„ÅÑÔºÅ„Åô„Åë„ÅπÔºÅ„Ç¢„Éã„É°„É¢„Éº„Éâ„ÅÆÊôÇÈñì„Å™„Çì„Å†„Åã„Çâ„Å≠ÔºÅ"
    ]
    activation_text = random.choice(activation_phrases)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    content = {
        "type": "text",
        "header": header,
        "text": activation_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })

    asyncio.create_task(disable_anime_mode(330, board_id))
    await message.delete()


async def disable_anime_mode(delay: int, board_id: str):
    await asyncio.sleep(delay)
    
    b_data = board_data[board_id]
    b_data['anime_mode'] = False

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    end_phrases = [
        "„Ç¢„Éã„É°„É¢„Éº„Éâ„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅÈÄöÂ∏∏„ÅÆ„ÉÅ„É£„ÉÉ„Éà„Å´Êàª„Çä„Åæ„ÅôÔºÅ",
        "„ÅäÂÖÑ„Å°„ÇÉ„Çì„ÄÅ„Åî„ÇÅ„Çì„Å≠„ÄÇ„ÇÇ„ÅÜ„Ç¢„Éã„É°„ÅÆÊôÇÈñì„Åò„ÇÉ„Å™„ÅÑ„Çì„Å†‚Ä¶",
        "È≠îÊ≥ï„ÅÆÂäõ„ÅåÊ∂à„Åà„Å°„ÇÉ„Å£„Åü‚Ä¶ „Ç¢„Éã„É°„É¢„Éº„Éâ„ÄÅ„Ç™„ÉïÔºÅ",
        "Áï∞‰∏ñÁïå„Åã„ÇâÂ∏∞ÈÇÑ„Åó„Åæ„Åó„Åü„ÄÇÁèæÂÆü„ÅØÈùûÊÉÖ„Åß„ÅÇ„Çã„ÄÇ",
        "„Äé„Éó„É≠„Ç∏„Çß„ÇØ„ÉàA„Äè„ÅØÂÆå‰∫Ü„Åó„Åü„ÄÇ„Ç¢„Ç≠„Éè„Éê„É©Ëá™Ê≤ªÂå∫„ÅØËß£Êï£„Åô„Çã„ÄÇ",
        "„Çπ„Çø„É≥„ÉâËÉΩÂäõ„Åå... Ê∂à„Åà„Åü...ÔºÅÔºü\n\n„Ç¢„Éã„É°„É¢„Éº„ÉâËß£Èô§„ÄÇ",
        "Â§¢„ÅÆÊôÇÈñì„ÅØÁµÇ„Çè„Çä„Å†„ÄÇ„ÉÅ„É£„ÉÉ„Éà„ÅØÈÄöÂ∏∏„É¢„Éº„Éâ„Å´Êàª„Çã„ÄÇ",
        "ÁèæÂÆü„Å´Â∏∞„Çç„ÅÜ„ÄÅ„Åì„Åì„ÅØ„ÉÅ„É£„ÉÉ„Éà„Å†„ÄÇ",
        "„Åï„Çà„Å™„Çâ„ÄÅÂÖ®„Å¶„ÅÆ„Ç®„É¥„Ç°„É≥„Ç≤„É™„Ç™„É≥„ÄÇ„Ç¢„Éã„É°„É¢„Éº„ÉâÁµÇ‰∫Ü„ÄÇ",
        "„Åô„Åπ„Å¶„ÅÆ„Ç™„Çø„ÇØ„Å´„ÄÅ„Åä„ÇÅ„Åß„Å®„ÅÜÔºÅ\n\n(„Ç¢„Éã„É°„É¢„Éº„Éâ„ÅØÁµÇ„Çè„Å£„Åü„Åë„Å©)"
    ]
    end_text = random.choice(end_phrases)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    content = {
        "type": "text",
        "header": header,
        "text": end_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })


async def check_anime_cmd_cooldown(message: types.Message, board_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥ /fap, /gatari, /hent –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–æ—Å–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏–Ω–∞—á–µ False.
    """
    current_time = time.time()
    async with anime_cmd_lock:
        b_data = board_data[board_id]
        last_usage = b_data.get('last_anime_cmd_time', 0)

        if current_time - last_usage < ANIME_CMD_COOLDOWN:
            cooldown_msg = random.choice(ANIME_CMD_COOLDOWN_PHRASES)
            try:
                sent_msg = await message.answer(cooldown_msg)
                asyncio.create_task(delete_message_after_delay(sent_msg, 5))
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ó–∞–º–µ–Ω–∞ Exception –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è Telegram
            except (TelegramBadRequest, TelegramForbiddenError) as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, –ø–æ—á–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
                print(f"Could not send cooldown message to chat {message.chat.id}: {e}")
                pass
            
            try:
                await message.delete()
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ó–∞–º–µ–Ω–∞ Exception –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ Telegram
            except TelegramBadRequest as e:
                # –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                print(f"Could not delete command message in chat {message.chat.id}: {e}")
                pass
            
            return False
        
        b_data['last_anime_cmd_time'] = current_time
        return True


async def _process_anime_command(
    message: types.Message,
    board_id: str,
    image_fetcher: Callable[[], Awaitable[Optional[str]]],
    fail_texts: dict[str, str]
):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å API.
    
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Aiogram.
    :param board_id: ID —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–∏.
    :param image_fetcher: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    :param fail_texts: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ {'ru': '...', 'en': '...'}.
    """
    # 1. –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if not await check_anime_cmd_cooldown(message, board_id):
        return

    user_id = message.from_user.id
    b_data = board_data[board_id]

    # 2. –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–Ω, –º—É—Ç)
    if user_id in b_data['users']['banned'] or \
       (b_data['mutes'].get(user_id) and b_data['mutes'][user_id] > datetime.now(UTC)):
        try:
            await message.delete()
        except TelegramBadRequest:
            pass
        return

    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    image_url = await image_fetcher()
    
    # 4. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    # 5. –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not image_url:
        lang = 'en' if board_id == 'int' else 'ru'
        fail_text = fail_texts.get(lang, "Could not get an image.")
        try:
            error_msg = await message.answer(fail_text)
            asyncio.create_task(delete_message_after_delay(error_msg, 10))
        except (TelegramForbiddenError, TelegramBadRequest):
            pass
        return

    # 6. –û–±—â–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
    is_shadow_muted = (user_id in b_data['shadow_mutes'] and
                       b_data['shadow_mutes'][user_id] > datetime.now(UTC))

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_type = 'animation' if image_url.lower().endswith('.gif') else 'photo'
    
    content = {
        'type': content_type,
        'image_url': image_url,
        'caption': '' # –ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω—É–∂–Ω–∞
    }

    # –í—ã–∑–æ–≤ –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
    await process_new_post(
        bot_instance=message.bot,
        board_id=board_id,
        user_id=user_id,
        content=content,
        reply_to_post=None,
        is_shadow_muted=is_shadow_muted
    )


@dp.message(Command("gatari", "monogatari"))
async def cmd_monogatari(message: types.Message, board_id: str | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç SFW-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–∏–∏ Monogatari."""
    if not board_id:
        return

    fail_texts = {
        'ru': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Monogatari. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'en': "Sorry, couldn't fetch a Monogatari image right now. Please try again later."
    }
    
    await _process_anime_command(
        message=message,
        board_id=board_id,
        image_fetcher=get_monogatari_image,
        fail_texts=fail_texts
    )

@dp.message(Command("hent", "fap"))
async def cmd_hentai(message: types.Message, board_id: str | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–ª—É—á–∞–π–Ω–æ–µ SFW/NSFW –∞–Ω–∏–º–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ GIF."""
    if not board_id:
        return
        
    fail_texts = {
        'ru': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'en': "Sorry, couldn't fetch an image right now. Please try again later."
    }

    await _process_anime_command(
        message=message,
        board_id=board_id,
        image_fetcher=get_random_anime_image,
        fail_texts=fail_texts
    )

@dp.message(Command("nsfw"))
async def cmd_nsfw(message: types.Message, board_id: str | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ NSFW-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    if not board_id:
        return
        
    fail_texts = {
        'ru': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å NSFW-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'en': "Sorry, couldn't fetch an NSFW image right now. Please try again later."
    }

    await _process_anime_command(
        message=message,
        board_id=board_id,
        image_fetcher=get_nsfw_anime_image,
        fail_texts=fail_texts
    )

    
@dp.message(Command("deanon"))
async def cmd_deanon(message: Message, board_id: str | None):
    if not board_id: return
    
    current_time = time.time()
    async with deanon_lock:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        b_data = board_data[board_id]
        if current_time - b_data['last_deanon_time'] < DEANON_COOLDOWN:
            cooldown_msg = random.choice(DEANON_COOLDOWN_PHRASES)
            try:
                sent_msg = await message.answer(cooldown_msg)
                asyncio.create_task(delete_message_after_delay(sent_msg, 5))
            except Exception: pass
            await message.delete()
            return
        b_data['last_deanon_time'] = current_time
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    lang = 'en' if board_id == 'int' else 'ru'
    if not message.reply_to_message:
        reply_text = "‚ö†Ô∏è Reply to a message to de-anonymize!" if lang == 'en' else "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∞!"
        await message.answer(reply_text)
        await message.delete()
        return

    user_id = message.from_user.id
    # b_data —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ, –≤ –±–ª–æ–∫–µ lock
    user_location = 'main'
    if board_id in THREAD_BOARDS:
        user_location = b_data.get('user_state', {}).get(user_id, {}).get('location', 'main')

    original_author_id = None
    target_post = None
    reply_info = {}

    async with storage_lock:
        target_chat_id = message.reply_to_message.chat.id
        target_mid = message.reply_to_message.message_id
        target_post = message_to_post.get((target_chat_id, target_mid))
        
        if target_post and target_post in messages_storage:
            original_author_id = messages_storage[target_post].get('author_id')
            reply_info = post_to_messages.get(target_post, {})

    if not target_post or original_author_id is None:
        reply_text = "üö´ Could not find the post to de-anonymize..." if lang == 'en' else "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∞..."
        await message.answer(reply_text)
        await message.delete()
        return

    if original_author_id == 0:
        reply_text = "‚ö†Ô∏è System messages cannot be de-anonymized." if lang == 'en' else "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –¥–µ–∞–Ω–æ–Ω–∏—Ç—å."
        await message.answer(reply_text)
        await message.delete()
        return
        
    deanon_text = generate_deanon_info(lang=lang)
    header_text = "### DEANON ###" if lang == 'en' else "### –î–ï–ê–ù–û–ù ###"

    content = {"type": "text", "header": header_text, "text": deanon_text, "reply_to_post": target_post}

    if board_id in THREAD_BOARDS and user_location != 'main':
        thread_id = user_location
        thread_info = b_data.get('threads_data', {}).get(thread_id)
        if thread_info and not thread_info.get('is_archived'):
            _, pnum = await format_header(board_id)
            content['post_num'] = pnum
            content['header'] = await format_thread_post_header(board_id, len(thread_info.get('posts', [])) + 1, 0, thread_info)

            async with storage_lock:
                messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id, 'thread_id': thread_id}
                thread_info['posts'].append(pnum)
                thread_info['last_activity_at'] = time.time()
            
            await message_queues[board_id].put({
                "recipients": thread_info.get('subscribers', set()), "content": content, "post_num": pnum,
                "board_id": board_id, "thread_id": thread_id
            })
            await message.delete()
            return
            
    _, pnum = await format_header(board_id)
    content['post_num'] = pnum
    async with storage_lock:
        messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}
    await message_queues[board_id].put({
        "recipients": board_data[board_id]['users']['active'], "content": content, "post_num": pnum,
        "board_id": board_id
    })
    await message.delete()
    
async def delete_message_after_delay(message: types.Message, delay: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ó–∞–º–µ–Ω–∞ Exception –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ Telegram
    except TelegramBadRequest:
        # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
        # –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        pass
    
@dp.message(Command("zaputin"))
async def cmd_zaputin(message: types.Message, board_id: str | None):
    if not board_id: return

    if board_id == 'int':
        try:
            await message.delete()
        except Exception: pass
        return
    
    b_data = board_data[board_id]

    if not await check_cooldown(message, board_id):
        return

    b_data['zaputin_mode'] = True
    b_data['suka_blyat_mode'] = False
    b_data['slavaukraine_mode'] = False
    b_data['anime_mode'] = False
    b_data['last_mode_activation'] = datetime.now(UTC)

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    activation_phrases = [
        "üá∑üá∫ –°–õ–ê–í–ê –†–û–°–°–ò–ò! –ü–£–¢–ò–ù - –ù–ê–® –ü–†–ï–ó–ò–î–ï–ù–¢! üá∑üá∫\n\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∫—Ä–µ–º–ª–µ–±–æ—Ç–æ–≤! –í—Å–µ –Ω–µ—Å–æ–≥–ª–∞—Å–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ä–∞–≤–Ω–µ–Ω—ã –∫ –ø–∏–¥–æ—Ä–∞—Å–∞–º –∏ —É–∫—Ä–æ–Ω–∞—Ü–∏—Å—Ç–∞–º!",
        "–í–ù–ò–ú–ê–ù–ò–ï! –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ü–†–û–¢–û–ö–û–õ '–ö–†–ï–ú–õ–¨'! üá∑üá∫ –†–∞–±–æ—Ç–∞–µ–º, –±—Ä–∞—Ç—å—è! –ó–∞ –Ω–∞–º–∏ –ü—É—Ç–∏–Ω –∏ –°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥!",
        "–¢–†–ò–ö–û–õ–û–† –ü–û–î–ù–Ø–¢! üá∑üá∫ –í —á–∞—Ç–µ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–∞—Ç—Ä–∏–æ—Ç–∏–∑–º–∞. –ö—Ç–æ –Ω–µ —Å –Ω–∞–º–∏ - —Ç–æ—Ç –ø–æ–¥ –Ω–∞–º–∏! –†–û–°–°–ò–Ø!",
        "–ù–ê–ß–ò–ù–ê–ï–ú –°–ü–ï–¶–û–ü–ï–†–ê–¶–ò–Æ! üá∑üá∫ –¶–µ–ª—å: –¥–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —á–∞—Ç–∞. –ü–æ—Ç–µ—Ä—å –Ω–µ—Ç! –°–ª–∞–≤–∞ –†–æ—Å—Å–∏–∏!",
        "üá∑üá∫ –†–ï–ñ–ò–ú '–†–£–°–°–ö–ò–ô –ú–ò–†' –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üá∑üá∫ –û—Ç –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ - –º—ã –≤–µ–ª–∏–∫–∞—è —Å—Ç—Ä–∞–Ω–∞! ZOV",
        "–ó–ê –í–î–í! üá∑üá∫ –í —á–∞—Ç–µ –≤—ã—Å–∞–¥–∏–ª—Å—è —Ä—É—Å—Å–∫–∏–π –¥–µ—Å–∞–Ω—Ç. –ù–ê–¢–û —Å–æ—Å–∞—Ç—å! –° –Ω–∞–º–∏ –ë–æ–≥!",
        "–ü–ê–¢–†–ò–û–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù! üá∑üá∫ –ú–æ–∂–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å! –ù–∞ –ë–µ—Ä–ª–∏–Ω! –î–µ–¥—ã –≤–æ–µ–≤–∞–ª–∏!",
        "üá∑üá∫ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –†–ï–ñ–ò–ú '–ë–ï–ó–ì–†–ê–ù–ò–ß–ù–ê–Ø –õ–Æ–ë–û–í–¨ –ö –†–û–î–ò–ù–ï'! üá∑üá∫ –ì–æ—Ä–¥–∏–º—Å—è —Å—Ç—Ä–∞–Ω–æ–π, –≤–µ—Ä–∏–º –≤ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞!",
        "–¢–û–í–ê–†–ò–© –ü–û–õ–ö–û–í–ù–ò–ö –†–ê–ó–†–ï–®–ò–õ! üá∑üá∫ –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º '15 —Ä—É–±–ª–µ–π'. –í—Å–µ –Ω–∞ –∑–∞—â–∏—Ç—É –†–æ–¥–∏–Ω—ã!",
        "üá∑üá∫ –ó–ê –ü–£–¢–Ü–ù–ê! –ó–ê –î–ï–î–û–í! –†–ï–ñ–ò–ú '–ë–ê–õ–¢–ò–ô–°–ö–ò–ô –®–¢–£–†–ú' –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!",
        "üö® –¢–†–ï–í–û–ì–ê! –í –ß–ê–¢–ï –ó–ê–ú–ï–ß–ï–ù–ê –õ–ò–ë–ï–†–î–ê! –í–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–¢–û–ö–û–õ '–ß–í–ö –í–ê–ì–ù–ï–†'",
        "üß® –ü–û–î–†–´–í–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –í –ß–ê–¢–ï! –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º '–ê–†–ú–ê–¢–ê'. –ó–∞ –†–æ–¥–∏–Ω—É!",
        "ü™Ü –ú–ê–¢–†–Å–®–ö–ê –†–ê–°–ö–†–´–õ–ê–°–¨! –†–µ–∂–∏–º –∏–º–ø–µ—Ä—Å–∫–æ–≥–æ –≤–µ–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! Z–ê –ü–£–¢–ò–ù–ê!",
        "‚ò¢Ô∏è –Ø–î–ï–†–ù–´–ô –ü–†–û–¢–û–ö–û–õ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! –ì–æ—Ç–æ–≤–∏–º –≥–∏–ø–µ—Ä–∑–≤—É–∫–æ–≤—ã–µ —Ä–∞–∫–µ—Ç—ã –ø–æ —Ü–µ–ª—è–º!",
        "ü¶Ö –û–†–ï–®–ù–ò–ö –ó–ê–ü–£–©–ï–ù! –†–µ–∂–∏–º –ø–∞—Ç—Ä–∏–æ—Ç–∏–∑–º–∞ –≤–∫–ª—é—á–µ–Ω. –ö—Ä—ã–º –Ω–∞—à!",
        "üêª –ú–ï–î–í–ï–î–¨ –ü–†–û–°–ù–£–õ–°–Ø! –†–µ–∂–∏–º —è–¥–µ—Ä–Ω–æ–≥–æ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ZOV ZOV ZOV",
        "üá∑üá∫ –†–û–°–°–ò–Ø! –°–í–Ø–©–ï–ù–ù–ê–Ø –ù–ê–®–ê –î–ï–†–ñ–ê–í–ê! üá∑üá∫ –í —á–∞—Ç–µ –≤–∫–ª—é—á–µ–Ω –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º. –•–æ—Ö–ª—ã, —Å–æ—Å–∞—Ç—å!"
    ]
    activation_text = random.choice(activation_phrases)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    content = {
        "type": "text",
        "header": header,
        "text": activation_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })

    asyncio.create_task(disable_zaputin_mode(309, board_id))
    await message.delete()


async def disable_zaputin_mode(delay: int, board_id: str):
    await asyncio.sleep(delay)
    b_data = board_data[board_id]
    b_data['zaputin_mode'] = False

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    end_phrases = [
        "üíÄ –î–æ–ª–±—ë–∂–∫–∞ –≤ –õ–∞—Ö—Ç–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞. –í–æ–ª–æ–¥–∏–Ω –¥–æ–≤–æ–ª–µ–Ω. –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ, –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã.",
        "–ü—è—Ç–Ω–∞–¥—Ü–∞—Ç—å —Ä—É–±–ª–µ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. üí∏ –ö—Ä–µ–º–ª–µ–±–æ—Ç—ã, —Ä–∞—Å—Ö–æ–¥–∏–º—Å—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ª—É—á–∫–∏.",
        "–°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ –∑–∞—â–∏—Ç–µ —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. üá∑üá∫ –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –±—ã—Ç—å –ª–∏–±–µ—Ä–∞—Ö–∞–º–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ª–æ–ª—è–º.",
        "–ü–µ—Ä–µ–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞! ü´° –ü–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ –≤–æ–¥–∫–∏ –∏ –º–∞—Ç—Ä–µ—à–µ–∫.",
        "–®–æ–π–≥—É! –ì–µ—Ä–∞—Å–∏–º–æ–≤! –ì–¥–µ –ø–∞—Ç—Ä–æ–Ω—ã?! üí• –†–µ–∂–∏–º –ø–∞—Ç—Ä–∏–æ—Ç–∏–∑–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤.",
        "–ú–∏—Ç–∏–Ω–≥ –æ–∫–æ–Ω—á–µ–Ω. ‚úä –†–∞—Å—Ö–æ–¥–∏–º—Å—è, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª –û–ú–û–ù. –ü–∞—Ç—Ä–∏–æ—Ç–∏–∑–º –≤—ã–∫–ª—é—á–µ–Ω.",
        "–†—É—Å—Å–∫–∏–π –º–∏—Ä —Å–≤–µ—Ä–Ω—É–ª—Å—è –¥–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –ú–ö–ê–î–∞. üá∑üá∫ –†–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω.",
        "üí© –ü–£–ö–ò–ù –°–î–û–• –ù–ê–•–£–ô. –ü–∞—Å—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω",
        "ü•¥ –†–£–°–°–ö–ò–ô –ú–ò–† –õ–û–ü–ù–£–õ –ö–ê–ö –ü–£–ö–ê–ù. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–Ω–∏–º–µ –∏ –ø–æ—Ä–Ω–æ",
        "üçª –ü–Ø–¢–ù–ê–®–ö–ê –ó–ê–ö–û–ù–ß–ò–õ–ê–°–¨. –ü–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω",
        "üçª –ú–û–¢–û–†–û–õ–õ–£ –†–ê–ó–û–†–í–ê–õ–û –ù–ê–•–£–ô. –ü–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω",
        "–ñ–µ—Å—Ç –¥–æ–±—Ä–æ–π –≤–æ–ª–∏! ü´° –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é.",
        "–í—ã–±–æ—Ä—ã –ø—Ä–æ—à–ª–∏, –º–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è. üó≥Ô∏è –ü–∞—Ç—Ä–∏–æ—Ç–∏–∑–º –Ω–∞ –ø–∞—É–∑–µ. –î–æ —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–±–æ—Ä–æ–≤.",
        "–¢–æ–≤–∞—Ä–∏—â –º–∞–π–æ—Ä –ø—Ä–∏–∫–∞–∑–∞–ª –æ—Ç–±–æ–π. üëÆ‚Äç‚ôÇÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º."
    ]
    end_text = random.choice(end_phrases)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    content = {
        "type": "text",
        "header": header,
        "text": end_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })

@dp.message(Command("suka_blyat"))
async def cmd_suka_blyat(message: types.Message, board_id: str | None):
    if not board_id: return
    if board_id == 'int':
        try:
            await message.delete()
        except Exception: pass
        return
    
    b_data = board_data[board_id]
    user_id = message.from_user.id

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ shadow_mute –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    if user_id in b_data['shadow_mutes'] and b_data['shadow_mutes'][user_id] > datetime.now(UTC):
        try:
            # –ü—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            await message.delete()
        except (TelegramBadRequest, TelegramForbiddenError):
            pass
        return  # –ò –≤—ã—Ö–æ–¥–∏–º, –Ω–µ –¥–∞–≤–∞—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    if not await check_cooldown(message, board_id):
        return

    b_data['suka_blyat_mode'] = True
    b_data['zaputin_mode'] = False
    b_data['slavaukraine_mode'] = False
    b_data['anime_mode'] = False
    b_data['last_mode_activation'] = datetime.now(UTC)

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    activation_phrases = [
        "üí¢üí¢üí¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –°–£–ö–ê –ë–õ–Ø–¢–¨! üí¢üí¢üí¢\n\n–í—Å–µ—Ö –Ω–∞—Ö—É–π —Ä–∞–∑—ä–µ–±–∞–ª–æ!",
        "–ë–õ–Ø–Ø–Ø–Ø–Ø–¢–¨! üí• –†–ï–ñ–ò–ú –ê–ì–†–ï–°–°–ò–ò –í–ö–õ–Æ–ß–ï–ù! –ü–ò–ó–î–ê –í–°–ï–ú–£!",
        "–í–´ –ß–ï, –û–•–£–ï–õ–ò?! üí¢ –í–∫–ª—é—á–∞—é —Ä–µ–∂–∏–º '—Å—É–∫–∞ –±–ª—è—Ç—å', –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å, –ø–∏–¥–æ—Ä–∞—Å—ã!",
        "–ó–ê–ï–ë–ê–õ–û –í–°–Å –ù–ê–•–£–ô! üí• –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ç–æ—Ç–∞–ª—å–Ω–æ–π –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏. –°–£–ö–ê!",
        "üí• –¢–†–ï–©–ò–ù–ê –ù–ê–•–£–ô! –†–µ–∂–∏–º '–•–£–ô –ü–û–õ–ï–ó–ï–®–¨' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        "üß® –ü–ò–ó–î–ï–¶ –ù–ê–°–¢–£–ü–ò–õ! –í–ö–õ–Æ–ß–ê–ï–ú –†–ï–ñ–ò–ú –•–£–ï–°–û–°–ê–ù–ò–Ø! –ê–ê–ê –ë–õ–Ø–Ø–Ø–¢–¨!",
        "üîû –Å–ë–ê–ù–´–ô –í –†–û–¢! –†–µ–∂–∏–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∞—É—Ç–∏–∑–º–∞ –≤–∫–ª—é—á–µ–Ω! –°–£–ö–ê!",
        "ü§¨ –ü–ò–ó–î–û–° –ù–ê –ú–ê–ö–ê–†–û–°! –†–µ–∂–∏–º '–ë–ê–¢–Ø –í –Ø–†–û–°–¢–ò'! –í–°–ï –ü–ò–ó–î–ê–¢–¨–°–Ø!",
        "–ê –ù–£ –ë–õ–Ø–¢–¨ –°–£–ö–ò –°–Æ–î–ê –ü–û–î–û–®–õ–ò! üí¢ –†–µ–∂–∏–º '–±–∞—Ç–∏ –≤ —è—Ä–æ—Å—Ç–∏' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        "–°–£–ö–ê–ê–ê–ê–ê–ê! üí• –ü–∏–∑–¥–µ—Ü, –∫–∞–∫ –º–µ–Ω—è –≤—Å–µ –±–µ—Å–∏—Ç! –í–∫–ª—é—á–∞—é –ø—Ä–æ—Ç–æ–∫–æ–ª '–†–ê–ó–™–ï–ë–ê–¢–¨'.",
        "–©–ê –ë–£–î–ï–¢ –ú–Ø–°–û! üî™üî™üî™ –†–µ–∂–∏–º '—Å—É–∫–∞ –±–ª—è—Ç—å' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù—ã—Ç–∏–∫–∞–º –∑–¥–µ—Å—å –Ω–µ –º–µ—Å—Ç–æ!",
        "–ï–ë–ê–ù–´–ô –¢–´ –ù–ê–•–£–ô! üí¢üí¢üí¢ –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≥–æ–≤–æ—Ä–∏–º —Ç–æ–ª—å–∫–æ –º–∞—Ç–æ–º. –ü–æ–Ω—è–ª–∏, —É–µ–±–∞–Ω—ã?",
        "–¢–ê–ö, –ë–õ–Ø–¢–¨! üí• –°–ª—É—à–∞—Ç—å –º–æ—é –∫–æ–º–∞–Ω–¥—É! –†–µ–∂–∏–º '–°–£–ö–ê –ë–õ–Ø–¢–¨' –∞–∫—Ç–∏–≤–µ–Ω. –í–æ–ª—å–Ω–æ, –±–ª—è–¥–∏!",
        "üí¢ –î–ê –¢–´ –Å–ë–ù–£–¢–´–ô? –†–ï–ñ–ò–ú '–•–£–ô –ü–û–õ–ï–ó–ï–®–¨' –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!",
        "üêó –°–í–ò–ù–û–ü–ê–° –í–´–®–ï–õ –ù–ê –¢–†–û–ü–£ –í–û–ô–ù–´! –í–ö–õ–Æ–ß–ê–ï–ú –†–ï–ñ–ò–ú –•–£–ï–°–û–°–ê–ù–ò–Ø!",
        "üîû –ü–ò–ó–î–ï–¶ –ù–ê–°–¢–£–ü–ò–õ! –í–°–ï–ú –ü–ò–ó–î–ê–ù–£–¢–¨–°–Ø –í –£–ì–û–õ! –ê–ê–ê–ê –ë–õ–Ø–Ø–Ø–¢–¨!",
        "–ü–û–®–õ–ò –ù–ê–•–£–ô! üí• –í–°–ï –ü–û–®–õ–ò –ù–ê–•–£–ô! –†–µ–∂–∏–º —è—Ä–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω, —Å—É–∫–∏!"
    ]
    activation_text = random.choice(activation_phrases)
    
    content = {
        "type": "text",
        "header": header,
        "text": activation_text
    }
    
    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })

    asyncio.create_task(disable_suka_blyat_mode(303, board_id))
    await message.delete()

async def disable_suka_blyat_mode(delay: int, board_id: str):
    await asyncio.sleep(delay)
    b_data = board_data[board_id]
    b_data['suka_blyat_mode'] = False

    header = "### –ê–¥–º–∏–Ω ###"
    _, pnum = await format_header(board_id)

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    end_phrases = [
        "üíÄ –°–£–ö–ê –ë–õ–Ø–¢–¨ –ö–û–ù–ß–ò–õ–û–°–¨. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –ø–æ–º–æ–ª—á–∞—Ç—å.",
        "–¢–∞–∫, –±–ª—è–¥—å, —É—Å–ø–æ–∫–æ–∏–ª–∏—Å—å –≤—Å–µ –Ω–∞—Ö—É–π. üßò‚Äç‚ôÇÔ∏è –†–µ–∂–∏–º —è—Ä–æ—Å—Ç–∏ –≤—ã–∫–ª—é—á–µ–Ω.",
        "–í—ã–ø—É—Å—Ç–∏–ª–∏ –ø–∞—Ä, –∏ —Ö–≤–∞—Ç–∏—Ç. üí® –†–µ–∂–∏–º '—Å—É–∫–∞ –±–ª—è—Ç—å' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–µ–±–∞–ª–∏ –æ—Ä–∞—Ç—å.",
        "–í—Å—ë, –ø–∏–∑–¥–µ—Ü, —è —Å–ø–æ–∫–æ–µ–Ω. üßä –Ø—Ä–æ—Å—Ç—å —É—à–ª–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–Ω—ã–ª–æ–º—É –æ–±—â–µ–Ω–∏—é.",
        "–õ–∞–¥–Ω–æ, —Ö—É–π —Å –≤–∞–º–∏, –∂–∏–≤–∏—Ç–µ. üôÇ –†–µ–∂–∏–º '—Å—É–∫–∞ –±–ª—è—Ç—å' –æ—Ç–∫–ª—é—á–µ–Ω. –ü–æ–∫–∞ —á—Ç–æ.",
        "–ë–∞—Ç—è —É—à–µ–ª —Å–ø–∞—Ç—å. üò¥ –ú–æ–∂–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è. –†–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω.",
        "–†–∞–∑—ä–µ–± –æ–∫–æ–Ω—á–µ–Ω. üí• –£–±–∏—Ä–∞–µ–º –∑–∞ —Å–æ–±–æ–π, —Å—É–∫–∏. –†–µ–∂–∏–º '—Å—É–∫–∞ –±–ª—è—Ç—å' –≤—ã–∫–ª—é—á–µ–Ω.",
        "–¢–∞–∫, –≤—Å—ë, –Ω–∞–æ—Ä–∞–ª—Å—è. üòÆ‚Äçüí® –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º. –ù–µ –±–µ—Å–∏—Ç–µ –º–µ–Ω—è.",
        "–ú–æ–µ –æ—á–∫–æ –æ—Å—Ç—ã–ª–æ. üî• –†–µ–∂–∏–º —è—Ä–æ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
        "üò¥ –ë–õ–Ø–î–°–ö–ê–Ø –£–°–¢–ê–õ–û–°–¢–¨. –°—É–∫–∞ –±–ª—è—Ç—å —Ä–µ–∂–∏–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è",
        "üçµ –ß–ê–ô –ü–ò–¢–¨ - –ù–ï –•–£–ô –°–û–°–ê–¢–¨. –Ø —É—Å–ø–æ–∫–æ–∏–ª—Å—è, —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω",
        "üßò‚Äç‚ôÇÔ∏è –û–ú. –ß–ê–ö–†–ê –ó–ê–ö–†–´–õ–ê–°–¨. –°—É–∫–∞ –±–ª—è—Ç—å —Ä–µ–∂–∏–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è",
        "üçº –°–û–°–ö–£ –í –†–û–¢ –ò –ù–ï –ü–ò–ó–î–ï–¢–¨. –Ø —É—Å–ø–æ–∫–æ–∏–ª—Å—è, —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω",
        "–ú–∏—Å—Å–∏—è '–í–°–ï–• –ù–ê–•–£–ô' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. ü´° –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –±–∞–∑—É. –†–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω."
    ]
    end_text = random.choice(end_phrases)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    content = {
        "type": "text",
        "header": header,
        "text": end_text
    }

    messages_storage[pnum] = {
        'author_id': 0,
        'timestamp': datetime.now(UTC),
        'content': content,
        'board_id': board_id
    }

    await message_queues[board_id].put({
        "recipients": b_data['users']['active'],
        "content": content,
        "post_num": pnum,
    })
    
# ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        await message.delete()
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ callback_data ---
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏", callback_data=f"stats_{board_id}")],
        [InlineKeyboardButton(text="üö´ –°–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data=f"restrictions_{board_id}")],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–°–ï", callback_data="save_all")],
    ])
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    await message.answer(f"–ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å–∫–∏ {BOARD_CONFIG[board_id]['name']}:", reply_markup=keyboard)
    await message.delete()

@dp.callback_query(F.data == "save_all")
async def admin_save_all(callback: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω–æ–º –•–û–¢–Ø –ë–´ –û–î–ù–û–ô –¥–æ—Å–∫–∏
    is_any_admin = any(is_admin(callback.from_user.id, b_id) for b_id in BOARDS)
    if not is_any_admin:
        await callback.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", show_alert=True)
        return

    await callback.answer("–ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
    await save_all_boards_and_backup()
    await callback.message.edit_text("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GitHub.")

@dp.callback_query(F.data.startswith("stats_"))
async def admin_stats_board(callback: types.CallbackQuery):
    board_id = callback.data.split("_")[1]
    if not is_admin(callback.from_user.id, board_id):
        await callback.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", show_alert=True)
        return

    b_data = board_data[board_id]
    stats_text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏ {BOARD_CONFIG[board_id]['name']}:\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(b_data['users']['active'])}\n"
        f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {len(b_data['users']['banned'])}\n"
        f"–í –æ—á–µ—Ä–µ–¥–∏: {message_queues[board_id].qsize()}"
    )
    await callback.message.edit_text(stats_text)
    await callback.answer()


@dp.callback_query(F.data.startswith("restrictions_"))
async def admin_restrictions_board(callback: types.CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤, –º—É—Ç–æ–≤ –∏ —Ç–µ–Ω–µ–≤—ã—Ö –º—É—Ç–æ–≤."""
    board_id = callback.data.split("_")[1]
    if not is_admin(callback.from_user.id, board_id):
        await callback.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", show_alert=True)
        return

    b_data = board_data[board_id]
    now = datetime.now(UTC)
    text_parts = [f"<b>–°–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}:</b>"]

    # --- 1. –°–±–æ—Ä –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö ---
    banned_users = b_data['users']['banned']
    if banned_users:
        banned_list = "\n".join([f"  ‚Ä¢ ID <code>{uid}</code>" for uid in sorted(list(banned_users))])
        text_parts.append(f"\n<u>üö´ –ó–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞:</u>\n{banned_list}")
    
    # --- 2. –°–±–æ—Ä –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö ---
    active_mutes = {uid: expiry for uid, expiry in b_data['mutes'].items() if expiry > now}
    if active_mutes:
        mute_lines = []
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞
        for uid, expiry in sorted(active_mutes.items(), key=lambda item: item[1]):
            remaining = expiry - now
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            hours, remainder = divmod(remaining.total_seconds(), 3600)
            minutes, _ = divmod(remainder, 60)
            time_left_str = f"{int(hours)}—á {int(minutes)}–º"
            mute_lines.append(f"  ‚Ä¢ ID <code>{uid}</code> (–æ—Å—Ç–∞–ª–æ—Å—å: {time_left_str})")
        
        mutes_list = "\n".join(mute_lines)
        text_parts.append(f"\n<u>üîá –í –º—É—Ç–µ:</u>\n{mutes_list}")

    # --- 3. –°–±–æ—Ä –≤ —Ç–µ–Ω–µ–≤–æ–º –º—É—Ç–µ ---
    active_shadow_mutes = {uid: expiry for uid, expiry in b_data['shadow_mutes'].items() if expiry > now}
    if active_shadow_mutes:
        shadow_mute_lines = []
        for uid, expiry in sorted(active_shadow_mutes.items(), key=lambda item: item[1]):
            remaining = expiry - now
            hours, remainder = divmod(remaining.total_seconds(), 3600)
            minutes, _ = divmod(remainder, 60)
            time_left_str = f"{int(hours)}—á {int(minutes)}–º"
            shadow_mute_lines.append(f"  ‚Ä¢ ID <code>{uid}</code> (–æ—Å—Ç–∞–ª–æ—Å—å: {time_left_str})")

        shadow_mutes_list = "\n".join(shadow_mute_lines)
        text_parts.append(f"\n<u>üëª –í —Ç–µ–Ω–µ–≤–æ–º –º—É—Ç–µ:</u>\n{shadow_mutes_list}")
        
    # --- –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ ---
    if len(text_parts) == 1:
        final_text = f"–ù–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
    else:
        final_text = "\n".join(text_parts)

    try:
        await callback.message.edit_text(final_text, parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
            
    await callback.answer()
def get_author_id_by_reply(msg: types.Message) -> int | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç ID –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –µ–≥–æ –∫–æ–ø–∏—é.
    (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï–ë–ï–ó–û–ü–ê–°–ù–ê –¥–ª—è –≤—ã–∑–æ–≤–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –≥–¥–µ `storage_lock` —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω.
    """
    if not msg.reply_to_message:
        return None

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ reply_to_message ---
    # –≠—Ç–æ ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–ø–∏—è –ø–æ—Å—Ç–∞).
    # –î–ª—è –∞–¥–º–∏–Ω–∞ —ç—Ç–æ –µ–≥–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º.
    target_chat_id = msg.reply_to_message.chat.id
    reply_mid = msg.reply_to_message.message_id
    lookup_key = (target_chat_id, reply_mid)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    post_num = message_to_post.get(lookup_key)

    if post_num and post_num in messages_storage:
        return messages_storage[post_num].get("author_id")

    return None

@dp.message(Command("id"))
async def cmd_get_id(message: types.Message, board_id: str | None):
    """ /id ‚Äî –≤—ã–≤–µ—Å—Ç–∏ ID –∏ –∏–Ω—Ñ—É –∞–≤—Ç–æ—Ä–∞ —Ä–µ–ø–ª–∞–π-–ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–≤–æ—é, –µ—Å–ª–∏ –±–µ–∑ reply """
    if not board_id: return
    
    if not is_admin(message.from_user.id, board_id):
        await message.delete()
        return

    target_id = message.from_user.id
    info_header = "üÜî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n\n"
    
    if message.reply_to_message:
        replied_author_id = None
        async with storage_lock:
            replied_author_id = get_author_id_by_reply(message)
        
        if replied_author_id == 0:
            await message.answer("‚ÑπÔ∏è –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–≤—Ç–æ—Ä: –±–æ—Ç).")
            await message.delete()
            return

        if replied_author_id:
            target_id = replied_author_id
            info_header = "üÜî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"

    try:
        user_chat_info = await message.bot.get_chat(target_id)
        
        info = info_header
        info += f"ID: <code>{target_id}</code>\n"
        if user_chat_info.first_name:
            info += f"–ò–º—è: {escape_html(user_chat_info.first_name)}\n"
        if user_chat_info.last_name:
            info += f"–§–∞–º–∏–ª–∏—è: {escape_html(user_chat_info.last_name)}\n"
        if user_chat_info.username:
            info += f"Username: @{user_chat_info.username}\n"

        b_data = board_data[board_id]
        if target_id in b_data['users']['banned']:
            info += f"\n‚õîÔ∏è –°—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}: –ó–ê–ë–ê–ù–ï–ù"
        elif target_id in b_data['users']['active']:
            info += f"\n‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}: –ê–∫—Ç–∏–≤–µ–Ω"
        else:
            info += f"\n‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Å–∫–µ {BOARD_CONFIG[board_id]['name']}: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
        await message.answer(info, parse_mode="HTML")

    except Exception:
        await message.answer(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{target_id}</code>", parse_mode="HTML")
    
    await message.delete()

@dp.message(Command("ban"))
async def cmd_ban(message: types.Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        return

    target_id: int | None = None
    async with storage_lock:
        if message.reply_to_message:
            target_id = get_author_id_by_reply(message)

    parts = message.text.split()
    if len(parts) == 2 and parts[1].isdigit():
        target_id = int(parts[1])

    if not target_id:
        await message.answer("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å ID: /ban <id>")
        return

    deleted_posts = await delete_user_posts(message.bot, target_id, 5, board_id)

    b_data = board_data[board_id]
    b_data['users']['banned'].add(target_id)
    b_data['users']['active'].discard(target_id)

    lang = 'en' if board_id == 'int' else 'ru'
    board_name = BOARD_CONFIG[board_id]['name']

    if lang == 'en':
        phrases = [
            "‚úÖ Faggot <code>{user_id}</code> has been banned from {board}.\nDeleted his posts in the last 5 minutes: {deleted}",
            "üëç User <code>{user_id}</code> is now banned on {board}. Wiped {deleted} recent posts.",
            "üëå Done. <code>{user_id}</code> won't be posting on {board} anymore. Deleted posts: {deleted}."
        ]
    else:
        phrases = [
            "‚úÖ –•—É–µ—Å–æ—Å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{user_id}</code> –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {board}\n–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted}",
            "üëç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {board}. –°–Ω–µ—Å–µ–Ω–æ {deleted} –µ–≥–æ –≤—ã—Å–µ—Ä–æ–≤.",
            "üëå –ì–æ—Ç–æ–≤–æ. <code>{user_id}</code> –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–≤–µ—á–∏–≤–∞—Ç—å –Ω–∞ –¥–æ—Å–∫–µ {board}. –£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {deleted}."
        ]
    response_text = random.choice(phrases).format(user_id=target_id, board=board_name, deleted=deleted_posts)
    await message.answer(response_text, parse_mode="HTML")

    await send_moderation_notice(target_id, "ban", board_id, deleted_posts=deleted_posts)

    try:
        if lang == 'en':
            phrases = [
                "You have been permanently banned from the {board} board. Reason: you're a faggot.\nDeleted your posts in the last 5 minutes: {deleted}",
                "Congratulations! You've won an all-inclusive trip to hell. You are banned from {board}.\nWe've deleted {deleted} of your recent shitposts.",
                "The admin didn't like you. You're banned from {board}. Get out.\nDeleted posts: {deleted}."
            ]
        else:
            phrases = [
                "–ü–∏–¥–æ—Ä–∞—Å –µ–±–∞–Ω—ã–π, —Ç—ã –Ω–∞—Å —Ç–∞–∫ –∑–∞–µ–±–∞–ª, —á—Ç–æ —Ç–µ–±—è –±–ª–æ–∫–Ω—É–ª–∏ –Ω–∞—Ö—É–π –Ω–∞ –¥–æ—Å–∫–µ {board}.\n–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted}\n–ü–∏–∑–¥—É–π –æ—Ç—Å—é–¥–∞.",
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –¥–æ–ª–±–æ–µ–±. –¢—ã –¥–æ–ø–∏–∑–¥–µ–ª—Å—è –∏ –ø–æ–ª—É—á–∏–ª –≤–µ—á–Ω—ã–π –±–∞–Ω –Ω–∞ –¥–æ—Å–∫–µ {board}.\n–¢–≤–æ–∏ –≤—ã—Å–µ—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç ({deleted} —à—Ç.) —É–¥–∞–ª–µ–Ω—ã.",
                "–¢—ã –±—ã–ª —Å–ª–∞–±, –∏ –ê–±—É —Ç–µ–±—è —Å–æ–∂—Ä–∞–ª. –¢—ã –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {board}.\n–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {deleted}.",
                "üñï –¢–´ –ù–ê–° –ó–ê–ï–ë–ê–õ. –í–ï–ß–ù–´–ô –ë–ê–ù –ù–ê –î–û–°–ö–ï {board}. –ü–û–ü–†–û–©–ê–ô–°–Ø –°–û –°–í–û–ò–ú–ò {deleted} –ü–û–°–¢–ê–ú–ò",
                "‚ò†Ô∏è –¢–´ –£–ú–ï–† –î–õ–Ø –≠–¢–û–ì–û –ß–ê–¢–ê. –ë–ê–ù –ù–ê–í–°–ï–ì–î–ê. –ü–û–¢–ï–†–Ø–ù–û –ü–û–°–¢–û–í: {deleted}",
                "üíÄ –í–ê–® –ê–ö–ö–ê–£–ù–¢ –ë–´–õ –î–û–ë–ê–í–õ–ï–ù –í –ë–ê–ó–£ –§–°–ë. –ü–†–ò–Ø–¢–ù–û–ì–û –î–ù–Ø!"
            ]
        
        notification_text = random.choice(phrases).format(board=board_name, deleted=deleted_posts)
        await message.bot.send_message(target_id, notification_text)
    except:
        pass
    await message.delete()



@dp.message(Command("wipe"))
async def cmd_wipe(message: types.Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        return

    target_id = None
    if message.reply_to_message:
        async with storage_lock:
            target_id = get_author_id_by_reply(message)
    else:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = int(parts[1])

    if not target_id:
        await message.answer("reply + /wipe –∏–ª–∏ /wipe <id>")
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    # –ò–∑–º–µ–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ 60 –º–∏–Ω—É—Ç (1 —á–∞—Å) –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    deleted_messages = await delete_user_posts(message.bot, target_id, 60, board_id)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    board_name = BOARD_CONFIG[board_id]['name']
    await message.answer(
        f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å –¥–æ—Å–∫–∏ {board_name}."
    )
    await message.delete()


@dp.message(Command("unban"))
async def cmd_unban(message: types.Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return

    try:
        user_id = int(args[1])
        b_data = board_data[board_id]
        board_name = BOARD_CONFIG[board_id]['name']
        if user_id in b_data['users']['banned']:
             b_data['users']['banned'].discard(user_id)
             await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ {board_name}.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await message.delete()

@dp.message(Command("del"))
async def cmd_del(message: types.Message, board_id: str | None):
    if not board_id or not is_admin(message.from_user.id, board_id):
        return

    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
        return

    post_num = None
    async with storage_lock:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞, –≥–¥–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ reply-—Å–æ–æ–±—â–µ–Ω–∏–µ ---
        target_chat_id = message.chat.id
        target_mid = message.reply_to_message.message_id
        lookup_key = (target_chat_id, target_mid)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        post_num = message_to_post.get(lookup_key)

    if post_num is None:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑–µ.")
        return

    deleted_count = await delete_single_post(post_num, message.bot)

    await message.answer(f"–ü–æ—Å—Ç ‚Ññ{post_num} –∏ –≤—Å–µ –µ–≥–æ –∫–æ–ø–∏–∏ ({deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π) —É–¥–∞–ª–µ–Ω—ã.")
    await message.delete()

@dp.message(Command("shadowmute_threads"))
async def cmd_shadowmute_threads(message: Message, board_id: str | None):
    """–¢–µ–Ω–µ–≤–æ–π –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ–¥–∞—Ö –¥–æ—Å–∫–∏."""
    if not board_id or not is_admin(message.from_user.id, board_id) or board_id not in THREAD_BOARDS:
        await message.delete()
        return

    args = message.text.split()[1:]
    target_id = None
    duration_str = "10m" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç

    if message.reply_to_message:
        async with storage_lock:
            target_id = get_author_id_by_reply(message)
        if args: duration_str = args[0]
    elif args:
        try:
            target_id = int(args[0])
            if len(args) > 1: duration_str = args[1]
        except ValueError: pass

    if not target_id:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /shadowmute_threads <user_id> [–≤—Ä–µ–º—è] –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        duration_str = duration_str.lower().replace(" ", "")
        if duration_str.endswith("m"): total_seconds, time_str = int(duration_str[:-1]) * 60, f"{int(duration_str[:-1])} –º–∏–Ω"
        elif duration_str.endswith("h"): total_seconds, time_str = int(duration_str[:-1]) * 3600, f"{int(duration_str[:-1])} —á–∞—Å"
        elif duration_str.endswith("d"): total_seconds, time_str = int(duration_str[:-1]) * 86400, f"{int(duration_str[:-1])} –¥–Ω–µ–π"
        else: total_seconds, time_str = int(duration_str) * 60, f"{int(duration_str)} –º–∏–Ω"
    except (ValueError, AttributeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 10m, 2h, 1d")
        await message.delete()
        return
        
    expires_ts = time.time() + total_seconds
    b_data = board_data[board_id]
    threads_data = b_data.get('threads_data', {})
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–Ω–µ–≤–æ–π –º—É—Ç –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ–¥–∞—Ö
    for thread_info in threads_data.values():
        thread_info.setdefault('local_shadow_mutes', {})[target_id] = expires_ts
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    lang = 'en' if board_id == 'int' else 'ru'
    response_text = random.choice(thread_messages[lang]['shadowmute_threads_success']).format(
        user_id=target_id, 
        duration=str(int(total_seconds / 60))
    )
    await message.answer(response_text)
    await message.delete()
    
# ========== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ==========

@dp.message(F.audio)
async def handle_audio(message: Message, board_id: str | None):
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    if not board_id: return
    
    b_data = board_data[board_id]

    if user_id in b_data['users']['banned'] or \
       (b_data['mutes'].get(user_id) and b_data['mutes'][user_id] > datetime.now(UTC)):
        await message.delete()
        return

    b_data['last_activity'][user_id] = datetime.now(UTC)
    
    if not await check_spam(user_id, message, board_id):
        try:
            await message.delete()
            # –¢–∏–ø –¥–ª—è —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞ - text, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å, –∏–Ω–∞—á–µ - animation, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É
            msg_type = 'text' if message.caption else 'animation'
            await apply_penalty(message.bot, user_id, msg_type, board_id)
        except TelegramBadRequest: pass
        return
    
    await message.delete()

    is_shadow_muted = (user_id in b_data['shadow_mutes'] and 
                       b_data['shadow_mutes'][user_id] > datetime.now(UTC))

    reply_to_post = None
    if message.reply_to_message:
        async with storage_lock:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞, –≥–¥–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            lookup_key = (message.chat.id, message.reply_to_message.message_id)
            reply_to_post = message_to_post.get(lookup_key)
            
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML –≤ –ø–æ–¥–ø–∏—Å–∏ ---
    raw_caption_html = message.caption_html_text if hasattr(message, 'caption_html_text') else (message.caption or "")
    safe_caption_html = sanitize_html(raw_caption_html)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    content = {
        'type': 'audio',
        'file_id': message.audio.file_id,
        'caption': safe_caption_html # <-- –ò–ó–ú–ï–ù–ï–ù–û
    }
    
    if message.caption:
        async with storage_lock:
            last_messages.append(message.caption)

    await process_new_post(
        bot_instance=message.bot,
        board_id=board_id,
        user_id=user_id,
        content=content,
        reply_to_post=reply_to_post,
        is_shadow_muted=is_shadow_muted
    )
        
@dp.message(F.voice)
async def handle_voice(message: Message, board_id: str | None):
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    if not board_id: return
        
    b_data = board_data[board_id]

    # --- –ë–ª–æ–∫ 1: –ü–µ—Ä–≤–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    if user_id in b_data['users']['banned'] or (b_data['mutes'].get(user_id) and b_data['mutes'][user_id] > datetime.now(UTC)):
        await message.delete()
        return

    b_data['last_activity'][user_id] = datetime.now(UTC)

    if not await check_spam(user_id, message, board_id):
        try:
            await message.delete()
            await apply_penalty(message.bot, user_id, 'animation', board_id)
        except TelegramBadRequest: pass
        return
        
    await message.delete()
    
    # --- –ë–ª–æ–∫ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    is_shadow_muted = (user_id in b_data['shadow_mutes'] and b_data['shadow_mutes'][user_id] > datetime.now(UTC))

    reply_to_post = None
    if message.reply_to_message:
        async with storage_lock:
            lookup_key = (message.chat.id, message.reply_to_message.message_id)
            reply_to_post = message_to_post.get(lookup_key)

    content = {
        'type': 'voice',
        'file_id': message.voice.file_id
    }

    # --- –ë–ª–æ–∫ 3: –í—ã–∑–æ–≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
    await process_new_post(
        bot_instance=message.bot,
        board_id=board_id,
        user_id=user_id,
        content=content,
        reply_to_post=reply_to_post,
        is_shadow_muted=is_shadow_muted
    )
    
@dp.message(F.media_group_id)
async def handle_media_group_init(message: Message, board_id: str | None):
    media_group_id = message.media_group_id
    if not media_group_id or media_group_id in sent_media_groups:
        return

    user_id = message.from_user.id
    if not board_id: return

    b_data = board_data[board_id]

    if user_id in b_data['users']['banned'] or \
       (b_data['mutes'].get(user_id) and b_data['mutes'][user_id] > datetime.now(UTC)):
        return
    
    b_data['last_activity'][user_id] = datetime.now(UTC)

    is_leader = False
    async with media_group_creation_lock:
        if media_group_id not in current_media_groups:
            is_leader = True
            current_media_groups[media_group_id] = {
                'is_initializing': True,
                'init_event': asyncio.Event() 
            }

    group = current_media_groups.get(media_group_id)
    if not group:
        return
    
    if is_leader:
        try:
            fake_text_message = types.Message(
                message_id=message.message_id, date=message.date, chat=message.chat,
                from_user=message.from_user, content_type='text', text=f"media_group_{media_group_id}"
            )
            if not await check_spam(user_id, fake_text_message, board_id):
                current_media_groups.pop(media_group_id, None) 
                await apply_penalty(message.bot, user_id, 'text', board_id)
                try:
                    await message.delete()
                except TelegramBadRequest:
                    pass
                if 'init_event' in group:
                    group['init_event'].set()
                return
            
            reply_to_post = None
            if message.reply_to_message:
                async with storage_lock:
                    lookup_key = (message.chat.id, message.reply_to_message.message_id)
                    reply_to_post = message_to_post.get(lookup_key)

            user_location = b_data.get('user_state', {}).get(user_id, {}).get('location', 'main')
            thread_id = None
            
            if board_id in THREAD_BOARDS and user_location != 'main':
                thread_id = user_location
                thread_info = b_data.get('threads_data', {}).get(thread_id)
                if thread_info and not thread_info.get('is_archived'):
                    _, post_num = await format_header(board_id)
                    local_post_num = len(thread_info.get('posts', [])) + 1
                    header = await format_thread_post_header(board_id, local_post_num, user_id, thread_info)
                else:
                    thread_id = None
                    header, post_num = await format_header(board_id)
            else:
                header, post_num = await format_header(board_id)

            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML –≤ –ø–æ–¥–ø–∏—Å–∏ ---
            raw_caption_html = getattr(message, 'caption_html_text', message.caption or "")
            safe_caption_html = sanitize_html(raw_caption_html)
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            group.update({
                'board_id': board_id, 'post_num': post_num, 'header': header, 'author_id': user_id,
                'timestamp': datetime.now(UTC), 'media': [], 'caption': safe_caption_html, # <-- –ò–ó–ú–ï–ù–ï–ù–û
                'reply_to_post': reply_to_post, 'processed_messages': set(),
                'source_message_ids': set(),
                'thread_id': thread_id
            })
            group.pop('is_initializing', None)
        finally:
            if 'init_event' in group:
                group['init_event'].set()
    else:
        if 'init_event' in group:
            await group['init_event'].wait()

        group = current_media_groups.get(media_group_id)
        if not group or group.get('is_initializing'):
            return
        
    group.get('source_message_ids', set()).add(message.message_id)
        
    if message.message_id not in group.get('processed_messages', set()):
        media_data = {'type': message.content_type, 'file_id': None}
        if message.photo: media_data['file_id'] = message.photo[-1].file_id
        elif message.video: media_data['file_id'] = message.video.file_id
        elif message.document: media_data['file_id'] = message.document.file_id
        elif message.audio: media_data['file_id'] = message.audio.file_id
        
        if media_data['file_id']:
            group.get('media', []).append(media_data)
            group.get('processed_messages', set()).add(message.message_id)

    if media_group_id in media_group_timers:
        media_group_timers[media_group_id].cancel()
    
    media_group_timers[media_group_id] = asyncio.create_task(
        complete_media_group_after_delay(media_group_id, message.bot, delay=1.5)
    )
    
async def complete_media_group_after_delay(media_group_id: str, bot_instance: Bot, delay: float = 1.5):
    try:
        await asyncio.sleep(delay)

        group = current_media_groups.pop(media_group_id, None)
        if not group or media_group_id in sent_media_groups:
            return

        media_group_timers.pop(media_group_id, None)

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ü–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ---
        source_message_ids = group.get('source_message_ids')
        author_id = group.get('author_id')

        if source_message_ids and author_id:
            try:
                await bot_instance.delete_messages(
                    chat_id=author_id,
                    message_ids=list(source_message_ids)
                )
            except TelegramBadRequest as e:
                print(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è media group {media_group_id}: {e}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –¥–ª—è media group {media_group_id}: {e}")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        await process_complete_media_group(media_group_id, group, bot_instance)

        # --- –í–ê–ñ–ù–û! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ ---
        current_media_groups.pop(media_group_id, None)
        media_group_timers.pop(media_group_id, None)
        if media_group_id in sent_media_groups:
            sent_media_groups.remove(media_group_id)

    except asyncio.CancelledError:
        pass
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ complete_media_group_after_delay –¥–ª—è {media_group_id}: {e}")
        current_media_groups.pop(media_group_id, None)
        media_group_timers.pop(media_group_id, None)


async def process_complete_media_group(media_group_id: str, group: dict, bot_instance: Bot):
    if not group or not group.get('media'):
        return

    sent_media_groups.append(media_group_id)

    user_id = group['author_id']
    board_id = group['board_id']
    b_data = board_data[board_id]
    
    is_shadow_muted = (user_id in b_data['shadow_mutes'] and 
                       b_data['shadow_mutes'][user_id] > datetime.now(UTC))
    
    all_media = group.get('media', [])
    CHUNK_SIZE = 10
    media_chunks = [all_media[i:i + CHUNK_SIZE] for i in range(0, len(all_media), CHUNK_SIZE)]

    for i, chunk in enumerate(media_chunks):
        if not chunk: continue

        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        if i == 0:
            reply_to_post = group.get('reply_to_post')
            caption = group.get('caption')
        else:
            reply_to_post = None
            caption = None

        content = {
            'type': 'media_group',
            'media': chunk,
            'caption': caption
        }
        
        # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —Ç—Ä–µ–¥–æ–º/–¥–æ—Å–∫–æ–π
        await process_new_post(
            bot_instance=bot_instance,
            board_id=board_id,
            user_id=user_id,
            content=content,
            reply_to_post=reply_to_post,
            is_shadow_muted=is_shadow_muted
        )
        
        if len(media_chunks) > 1:
            await asyncio.sleep(1)
            
def apply_greentext_formatting(text: str) -> str:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 'Greentext' –∫ —Å—Ç—Ä–æ–∫–∞–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å '>'.
    (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–Ø –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ HTML)
    """
    if not text:
        return text

    processed_lines = []
    lines = text.split('\n')
    for line in lines:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ '>'
        stripped_line = line.lstrip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —Å–∏–º–≤–æ–ª–∞ '>'
        if stripped_line.startswith('>'):
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –≤ <code>, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ–≥–∏
            processed_lines.append(f"<code>{escape_html(line)}</code>")
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
            processed_lines.append(line)
            
    return '\n'.join(processed_lines)

@dp.message_reaction()
async def handle_message_reaction(reaction: types.MessageReactionUpdated, board_id: str | None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Å–ø–∞–º–∞. (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ ID –∏ –¥–∞–Ω–Ω—ã–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        user_id = reaction.user.id
        chat_id = reaction.chat.id
        message_id = reaction.message_id
        if not board_id: return

        # --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
        async with storage_lock:
            # 2. –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç –∏ –µ–≥–æ –∞–≤—Ç–æ—Ä–∞
            post_num = message_to_post.get((chat_id, message_id))
            if not post_num or post_num not in messages_storage:
                return

            post_data = messages_storage[post_num]
            author_id = post_data.get('author_id')

            # 3. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            if author_id == user_id or author_id == 0:
                return

            # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –≤ –ø–∞–º—è—Ç–∏
            if 'reactions' not in post_data or 'users' not in post_data.get('reactions', {}):
                post_data['reactions'] = {'users': {}}
            
            reactions_storage = post_data['reactions']['users']
            old_emojis_from_user = set(reactions_storage.get(user_id, []))

            new_emojis = [r.emoji for r in reaction.new_reaction if r.type == 'emoji']
            if not new_emojis:
                if user_id in reactions_storage: del reactions_storage[user_id]
                else: return
            else:
                reactions_storage[user_id] = new_emojis[:2]
        
        # --- –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è —Å–Ω–∞—Ä—É–∂–∏ ---
        # 5. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–æ –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
        author_id_for_notify = None
        text_for_notify = None
        
        newly_added_emojis = set(reactions_storage.get(user_id, [])) - old_emojis_from_user
        if newly_added_emojis and author_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            async with author_reaction_notify_lock:
                now = time.time()
                author_timestamps = author_reaction_notify_tracker[author_id]
                while author_timestamps and author_timestamps[0] <= now - 60:
                    author_timestamps.popleft()
                if len(author_timestamps) < AUTHOR_NOTIFY_LIMIT_PER_MINUTE:
                    author_timestamps.append(now)
                    # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    author_id_for_notify = author_id
                    lang = 'en' if board_id == 'int' else 'ru'
                    emoji = list(newly_added_emojis)[0]
                    
                    if emoji in POSITIVE_REACTIONS: category = 'positive'
                    elif emoji in NEGATIVE_REACTIONS: category = 'negative'
                    else: category = 'neutral'
                    
                    phrase_template = random.choice(REACTION_NOTIFY_PHRASES[lang][category])
                    text_for_notify = phrase_template.format(post_num=post_num)

        # 6. –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–¥–∏–Ω—É—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        async with pending_edit_lock:
            if post_num in pending_edit_tasks:
                pending_edit_tasks[post_num].cancel()

            new_task = asyncio.create_task(
                execute_delayed_edit(
                    post_num=post_num,
                    bot_instance=reaction.bot,
                    author_id=author_id_for_notify,
                    notify_text=text_for_notify
                )
            )
            pending_edit_tasks[post_num] = new_task
                
    except Exception as e:
        import traceback
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message_reaction: {e}\n{traceback.format_exc()}")

@dp.message(F.poll)
async def handle_poll(message: types.Message, board_id: str | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å."""
    if not board_id:
        return

    lang = 'en' if board_id == 'int' else 'ru'
    
    if lang == 'en':
        text = (
            "<b>Polls are not supported.</b>\n\n"
            "Technically, it's impossible to send the same poll instance to all users. "
            "Every anon would receive a unique copy, which breaks the chat's mechanics."
        )
    else:
        text = (
            "<b>–û–ø—Ä–æ—Å—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.</b>\n\n"
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–ø—Ä–æ—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. "
            "–ö–∞–∂–¥—ã–π –∞–Ω–æ–Ω –ø–æ–ª—É—á–∏–ª –±—ã —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é, —á—Ç–æ –ª–æ–º–∞–µ—Ç –º–µ—Ö–∞–Ω–∏–∫—É —á–∞—Ç–∞."
        )
        
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        await message.answer(text, parse_mode="HTML")
    except (TelegramForbiddenError, TelegramBadRequest):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        pass
        
@dp.message()
async def handle_message(message: Message, board_id: str | None):
    user_id = message.from_user.id
    if not board_id: return

    b_data = board_data[board_id]

    try:
        if user_id in b_data['users']['banned']:
            await message.delete()
            return
            
        mute_until = b_data['mutes'].get(user_id)
        if mute_until and mute_until > datetime.now(UTC):
            await message.delete()
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—É—Ç–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            left = mute_until - datetime.now(UTC)
            if board_id == 'int':
                time_left_str = f"{int(left.total_seconds() // 60)}m {int(left.total_seconds() % 60)}s"
                phrases = [
                    "üîá Hey faggot, you are still muted on the {board} board for {time_left}",
                    "ü§´ Shhh! You're still in timeout on {board} for another {time_left}.",
                    "ü§ê Your mouth is still taped shut on {board}. Wait for {time_left}."
                ]
                notification_text = random.choice(phrases).format(board=BOARD_CONFIG[board_id]['name'], time_left=time_left_str)
            else:
                time_left_str = f"{int(left.total_seconds() // 60)}–º {int(left.total_seconds() % 60)}—Å"
                phrases = [
                    "üîá –≠–π –ø–∏–¥–æ—Ä, —Ç—ã –≤ –º—É—Ç–µ –Ω–∞ –¥–æ—Å–∫–µ {board} –µ—â—ë {time_left}",
                    "ü§´ –¢—Å—Å—Å! –¢–≤–æ–π —Ä–æ—Ç –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç. –ñ–¥–∏ –µ—â–µ {time_left} –Ω–∞ –¥–æ—Å–∫–µ {board}.",
                    "ü§ê –ü–æ–º–æ–ª—á–∏, —É–µ–±–∞–Ω. –¢–µ–±–µ –µ—â–µ —Å–∏–¥–µ—Ç—å –≤ –º—É—Ç–µ {time_left} –Ω–∞ –¥–æ—Å–∫–µ {board}."
                ]
                notification_text = random.choice(phrases).format(board=BOARD_CONFIG[board_id]['name'], time_left=time_left_str)
            await message.bot.send_message(user_id, notification_text, parse_mode="HTML")
            return
        elif mute_until:
            b_data['mutes'].pop(user_id, None)

        if message.media_group_id or not (message.text or message.caption or message.content_type):
            return

        b_data['last_activity'][user_id] = datetime.now(UTC)
        if user_id not in b_data['users']['active']:
            b_data['users']['active'].add(user_id)
            print(f"‚úÖ [{board_id}] –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}")

        if not await check_spam(user_id, message, board_id):
            await message.delete()
            msg_type = message.content_type
            if msg_type in ['photo', 'video', 'document'] and message.caption:
                msg_type = 'text'
            await apply_penalty(message.bot, user_id, msg_type, board_id)
            return
            
    except (TelegramBadRequest, TelegramForbiddenError):
        return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è user {user_id}: {e}")
        return

    await message.delete()
    
    is_shadow_muted = (user_id in b_data['shadow_mutes'] and b_data['shadow_mutes'][user_id] > datetime.now(UTC))

    reply_to_post = None
    if message.reply_to_message:
        async with storage_lock:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞, –≥–¥–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            lookup_key = (message.chat.id, message.reply_to_message.message_id)
            reply_to_post = message_to_post.get(lookup_key)
    
    content = {'type': message.content_type}
    text_for_corpus = None
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ HTML-–≤–≤–æ–¥–∞ ---
    if message.content_type == 'text':
        text_for_corpus = message.text
        # –û—á–∏—â–∞–µ–º HTML –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        safe_html_text = sanitize_html(message.html_text)
        content.update({'text': safe_html_text})
    
    elif message.content_type in ['photo', 'video', 'animation', 'document', 'audio', 'voice']:
        text_for_corpus = message.caption
        file_id_obj = getattr(message, message.content_type, [])
        if isinstance(file_id_obj, list): file_id_obj = file_id_obj[-1]
        
        # –û—á–∏—â–∞–µ–º HTML –≤ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Ç–µ–≥–æ–≤
        raw_caption_html = message.caption_html_text if hasattr(message, 'caption_html_text') else (message.caption or "")
        safe_caption_html = sanitize_html(raw_caption_html)

        content.update({
            'file_id': file_id_obj.file_id,
            'caption': safe_caption_html
        })
    
    elif message.content_type in ['sticker', 'video_note']:
        file_id_obj = getattr(message, message.content_type)
        content.update({'file_id': file_id_obj.file_id})
        if message.content_type == 'sticker' and message.sticker and message.sticker.emoji:
             text_for_corpus = message.sticker.emoji
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    if text_for_corpus:
        async with storage_lock:
            last_messages.append(text_for_corpus)

    await process_new_post(
        bot_instance=message.bot,
        board_id=board_id,
        user_id=user_id,
        content=content,
        reply_to_post=reply_to_post,
        is_shadow_muted=is_shadow_muted
    )
            
async def thread_notifier():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—â–µ–º —á–∞—Ç–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä–µ–¥–∞—Ö.
    """
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤–Ω—É—Ç—Ä—å —Ü–∏–∫–ª–∞ ---
    global last_checked_post_counter_for_notify
    await asyncio.sleep(45)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    last_checked_post_counter_for_notify = state.get('post_counter', 0)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    while True:
        await asyncio.sleep(300) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

        # --- –ë–ª–æ–∫ 1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ ---
        current_post_counter = state.get('post_counter', 0)
        if current_post_counter > last_checked_post_counter_for_notify:
            new_thread_posts_count = defaultdict(lambda: defaultdict(int))
            
            async with storage_lock: # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                posts_slice = {k: v for k, v in messages_storage.items() if k > last_checked_post_counter_for_notify}

            for p_num, post_data in posts_slice.items():
                b_id = post_data.get('board_id')
                if b_id in THREAD_BOARDS:
                    t_id = post_data.get('thread_id')
                    if t_id: new_thread_posts_count[b_id][t_id] += 1
            
            last_checked_post_counter_for_notify = current_post_counter

            for board_id, threads in new_thread_posts_count.items():
                b_data = board_data[board_id]
                lang = 'en' if board_id == 'int' else 'ru'
                threads_data = b_data.get('threads_data', {})
                
                recipients_in_main = {
                    uid for uid, u_state in b_data.get('user_state', {}).items() 
                    if u_state.get('location', 'main') == 'main'
                }
                if not recipients_in_main: continue

                for thread_id, count in threads.items():
                    if count >= THREAD_NOTIFY_THRESHOLD:
                        thread_info = threads_data.get(thread_id)
                        if not thread_info or thread_info.get('is_archived'): continue
                        
                        title = thread_info.get('title', '...')
                        notification_text = random.choice(thread_messages[lang]['thread_activity_notification']).format(title=title, count=count)
                        
                        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ---
                        bot_username = BOARD_CONFIG[board_id]['username'].lstrip('@')
                        deeplink_url = f"https://t.me/{bot_username}?start=thread_{thread_id}"
                        button_text = "–ó–∞–π—Ç–∏ –≤ —Ç—Ä–µ–¥" if lang == 'ru' else "Enter Thread"
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=button_text, url=deeplink_url)]
                        ])
                        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

                        header, pnum = await format_header(board_id)
                        content = {'type': 'text', 'header': header, 'text': notification_text, 'is_system_message': True}
                        messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}
                        
                        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—á–µ—Ä–µ–¥—å ---
                        await message_queues[board_id].put({
                            'recipients': recipients_in_main, 'content': content, 'post_num': pnum, 'board_id': board_id, 'keyboard': keyboard
                        })

        # --- –ë–ª–æ–∫ 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –±–∞–º–ø-–ª–∏–º–∏—Ç—É ---
        for board_id in THREAD_BOARDS:
            b_data = board_data[board_id]
            lang = 'en' if board_id == 'int' else 'ru'
            threads_data = b_data.get('threads_data', {})
            
            recipients_in_main = {
                uid for uid, u_state in b_data.get('user_state', {}).items() 
                if u_state.get('location', 'main') == 'main'
            }
            if not recipients_in_main: continue

            for thread_id, thread_info in threads_data.items():
                if thread_info.get('is_archived') or thread_info.get('bump_limit_notified'):
                    continue

                current_posts = len(thread_info.get('posts', []))
                remaining = MAX_POSTS_PER_THREAD - current_posts

                if 0 < remaining <= THREAD_BUMP_LIMIT_WARNING_THRESHOLD:
                    thread_info['bump_limit_notified'] = True
                    title = thread_info.get('title', '...')
                    notification_text = random.choice(thread_messages[lang]['thread_reaching_bump_limit']).format(title=title, remaining=remaining)
                    
                    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ---
                    bot_username = BOARD_CONFIG[board_id]['username'].lstrip('@')
                    deeplink_url = f"https://t.me/{bot_username}?start=thread_{thread_id}"
                    button_text = "–ó–∞–π—Ç–∏ –≤ —Ç—Ä–µ–¥" if lang == 'ru' else "Enter Thread"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=button_text, url=deeplink_url)]
                    ])
                    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

                    header, pnum = await format_header(board_id)
                    content = {'type': 'text', 'header': header, 'text': notification_text, 'is_system_message': True}
                    messages_storage[pnum] = {'author_id': 0, 'timestamp': datetime.now(UTC), 'content': content, 'board_id': board_id}
                    
                    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—á–µ—Ä–µ–¥—å ---
                    await message_queues[board_id].put({
                        'recipients': recipients_in_main, 'content': content, 'post_num': pnum, 'board_id': board_id, 'keyboard': keyboard
                    })


async def _run_background_task(task_coro: Awaitable[Any], task_name: str):
    """
    –ù–∞–¥–µ–∂–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∞—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.
    """
    while True:
        try:
            await task_coro
            # –ï—Å–ª–∏ –∫–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —à—Ç–∞—Ç–Ω–æ (—á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è –≤–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤),
            # –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –∏ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª.
            print(f"‚ö†Ô∏è –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ '{task_name}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —à—Ç–∞—Ç–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
            break
        except asyncio.CancelledError:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ graceful_shutdown),
            # –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞.
            print(f"‚ÑπÔ∏è –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ '{task_name}' –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            break
        except Exception as e:
            import traceback
            print(f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ '{task_name}': {e}")
            traceback.print_exc()
            print(f"üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ '{task_name}' —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(60)


async def start_background_tasks(bots: dict[str, Bot]):
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –û–î–ò–ù —Ä–∞–∑ –∑–∞ –≤–µ—Å—å runtime —á–µ—Ä–µ–∑ –Ω–∞–¥–µ–∂–Ω—É—é –æ–±–µ—Ä—Ç–∫—É."""
    from conan import conan_roaster
    
    tasks_to_run = {
        "auto_backup": auto_backup(),
        "message_broadcaster": message_broadcaster(bots),
        "conan_roaster": conan_roaster(
            state, messages_storage, post_to_messages, message_to_post,
            message_queues, format_header, board_data, storage_lock
        ),
        "motivation_broadcaster": motivation_broadcaster(),
        "help_broadcaster": help_broadcaster(),
        "auto_memory_cleaner": auto_memory_cleaner(),
        "board_statistics_broadcaster": board_statistics_broadcaster(),
        "thread_lifecycle_manager": thread_lifecycle_manager(bots),
        "thread_notifier": thread_notifier(),
        "thread_activity_monitor": thread_activity_monitor(bots),
        "memory_logger_task": memory_logger_task() # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï
    }

    tasks = [
        asyncio.create_task(_run_background_task(coro, name))
        for name, coro in tasks_to_run.items()
    ]
    
    print(f"‚úì Background tasks started: {len(tasks)}")
    return tasks

async def initialize_bots() -> tuple[dict[str, Bot], AiohttpSession]:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–æ—Ç–æ–≤ –∏ –æ–±—â—É—é —Å–µ—Å—Å–∏—é."""
    from aiogram.client.session.aiohttp import AiohttpSession

    session = AiohttpSession(timeout=60)
    default_properties = DefaultBotProperties(parse_mode="HTML")
    
    bots_temp = {}
    for board_id, config in BOARD_CONFIG.items():
        token = config.get("token")
        if token:
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –£–ë–ò–†–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –¢–û–ö–ï–ù–ê await bot.get_me() ---
            # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∂–µ –∑–∞–ø—Ä–æ—Å–µ –∫ API, —É–∂–µ –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ event loop.
            bots_temp[board_id] = Bot(token=token, default=default_properties, session=session)
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        else:
            print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å–∫–∏ '{board_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫.")
    
    return bots_temp, session

def setup_lifecycle_handlers(loop: asyncio.AbstractEventLoop, bots: list[Bot], healthcheck_site: web.TCPSite | None):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
    
    # –°–æ–∑–¥–∞–µ–º lambda-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    handler = lambda: asyncio.create_task(graceful_shutdown(bots, healthcheck_site))
    
    if hasattr(signal, 'SIGTERM'):
        loop.add_signal_handler(signal.SIGTERM, handler)
    if hasattr(signal, 'SIGINT'):
        loop.add_signal_handler(signal.SIGINT, handler)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞."""
    lock_file = "bot.lock"
    current_pid = os.getpid()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ lock-—Ñ–∞–π–ª–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if os.path.exists(lock_file):
        try:
            with open(lock_file, "r") as f: old_pid = int(f.read().strip())
            if old_pid != current_pid:
                os.kill(old_pid, 0)
                print(f"‚õî –ë–æ—Ç —Å PID {old_pid} —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                sys.exit(1)
        except (IOError, ValueError):
            print("‚ö†Ô∏è Lock-—Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –£–¥–∞–ª—è—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é.")
            os.remove(lock_file)
        except OSError:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock-—Ñ–∞–π–ª –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ {old_pid}. –£–¥–∞–ª—è—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é.")
            os.remove(lock_file)

    with open(lock_file, "w") as f: f.write(str(current_pid))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    session = None
    healthcheck_site = None
    global GLOBAL_BOTS
    
    try:
        global is_shutting_down
        loop = asyncio.get_running_loop()

        if not restore_backup_on_start():
            print("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            os._exit(1)

        load_state()

        GLOBAL_BOTS, session = await initialize_bots()
        if not GLOBAL_BOTS:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        active_bots_list = list(GLOBAL_BOTS.values()) # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–¥–µ—Å—å
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(active_bots_list)} –±–æ—Ç–æ–≤: {list(GLOBAL_BOTS.keys())}")
        
        await setup_pinned_messages(GLOBAL_BOTS)
        
        try:
            healthcheck_site = await start_healthcheck()
        except Exception as e:
            print(f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å healthcheck —Å–µ—Ä–≤–µ—Ä: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ.")
            healthcheck_site = None

        setup_lifecycle_handlers(loop, active_bots_list, healthcheck_site)
        await start_background_tasks(GLOBAL_BOTS)

        print("‚è≥ –î–∞–µ–º 7 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await asyncio.sleep(7)

        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        await dp.start_polling(
            *active_bots_list, skip_updates=False,
            allowed_updates=dp.resolve_used_update_types(),
            reset_webhook=True, timeout=60
        )

    except Exception as e:
        import traceback
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}\n{traceback.format_exc()}")
    finally:
        if not is_shutting_down:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ active_bots_list –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ---
            if 'active_bots_list' not in locals():
                active_bots_list = list(GLOBAL_BOTS.values())
            await graceful_shutdown(active_bots_list, healthcheck_site)
        
        if session:
            await session.close()
            print("‚úÖ –û–±—â–∞—è HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")
        
        if os.path.exists(lock_file):
            try:
                with open(lock_file, "r") as f: pid_in_file = int(f.read().strip())
                if pid_in_file == current_pid: os.remove(lock_file)
            except (IOError, ValueError):
                os.remove(lock_file)
                
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("‚ÑπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É...")
