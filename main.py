from __future__ import annotations
import asyncio
import gc
import io
import json
import logging
import time
import os
import re 
import glob
import random
import secrets
import pickle
import gzip
import gc
import weakref
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta, timezone
from typing import Tuple
import aiohttp
from aiohttp import web
import shutil
from aiogram.types import Message
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.exceptions import TelegramRetryAfter
from asyncio import Semaphore
from aiogram import Bot, Dispatcher, F, types
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramForbiddenError,
    TelegramNetworkError,
    TelegramConflictError,
)
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
import subprocess
import os
from datetime import datetime, UTC  # –î–æ–±–∞–≤—å—Ç–µ UTC –≤ –∏–º–ø–æ—Ä—Ç—ã

GITHUB_REPO = "https://github.com/shlomapetia/dvachbot.git"
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å –≤ Railway!

async def git_commit_and_push():
    """–ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞ state –∏ reply –≤ GitHub"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv("GITHUB_TOKEN")
        if not token:
            print("‚ùå –ù–µ—Ç GITHUB_TOKEN")
            return False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git
        subprocess.run(["git", "config", "--global", "user.name", "Backup Bot"], check=True)
        subprocess.run(["git", "config", "--global", "user.email", "bot@example.com"], check=True)

        # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        work_dir = "/data"
        if not os.path.exists(work_dir):
            os.makedirs(work_dir, exist_ok=True)
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        git_dir = os.path.join(work_dir, ".git")
        if not os.path.exists(git_dir):
            clone_cmd = ["git", "clone", f"https://{token}@github.com/shlomapetia/dvachbot.git", work_dir]
            result = subprocess.run(clone_cmd, cwd=work_dir)
            if result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
                return False
        else:
            subprocess.run(["git", "fetch", "origin"], cwd=work_dir, check=True)
            subprocess.run(["git", "reset", "--hard", "origin/main"], cwd=work_dir, check=True)

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –±—ç–∫–∞–ø–∞
        files_to_backup = []
        for f in ["state.json", "reply_cache.json"] + glob.glob("backup_state_*.json"):
            if os.path.exists(f):
                shutil.copy2(f, work_dir)
                files_to_backup.append(os.path.basename(f))
        
        if not files_to_backup:
            print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞")
            return False

        # Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            subprocess.run(["git", "add"] + files_to_backup, cwd=work_dir, check=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞
            status_result = subprocess.run(["git", "status", "--porcelain"], cwd=work_dir, 
                                         capture_output=True, text=True)
            if not status_result.stdout.strip():
                print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
                return True
            
            # –ö–æ–º–º–∏—Ç
            commit_msg = f"Backup: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            subprocess.run(["git", "commit", "-m", commit_msg], cwd=work_dir, check=True)
            
            # Push —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            max_retries = 3
            for attempt in range(max_retries):
                push_result = subprocess.run(["git", "push"], cwd=work_dir)
                if push_result.returncode == 0:
                    print(f"‚úÖ –ë–µ–∫–∞–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub: {', '.join(files_to_backup)}")
                    return True
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ push –≤ GitHub (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                    await asyncio.sleep(5)  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –≤–Ω—É—Ç—Ä–∏ async —Ñ—É–Ω–∫—Ü–∏–∏
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å push –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return False
                
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ git-–æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return False

    except Exception as e:
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ git_commit_and_push: {e}")
        return False

dp = Dispatcher()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING,  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    format="%(message)s",  # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–∞—Ç –∏ —Ç.–ø.
    datefmt="%H:%M:%S"  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ, —Ç–æ –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
)
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è aiohttp (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä)
aiohttp_log = logging.getLogger('aiohttp')
aiohttp_log.setLevel(logging.CRITICAL)  # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è aiogram (–±–æ—Ç)
aiogram_log = logging.getLogger('aiogram')
aiogram_log.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

def clean_html_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    if not text:
        return text
    return re.sub(r'<[^>]+>', '', text)

def add_you_to_my_posts(text: str, user_id: int) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç (You) –∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –ø–æ—Å—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –∂–µ –ø–æ—Å—Ç"""
    if not text:
        return text

    pattern = r">>(\d+)"
    matches = re.findall(pattern, text)

    for post_str in matches:
        try:
            post_num = int(post_str)
            post_data = messages_storage.get(post_num, {})
            original_author = post_data.get("author_id")

            if original_author == user_id:
                # –î–æ–±–∞–≤–ª—è–µ–º "(You)", –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                target = f">>{post_num}"
                replacement = f">>{post_num} (You)"

                if target in text and replacement not in text:
                    text = text.replace(target, replacement)
        except (ValueError, KeyError):
            continue

    return text

async def run_bot():
    global bot, connector
    connector = aiohttp.TCPConnector(limit=10, force_close=True)
    bot = Bot(token=BOT_TOKEN, connector=connector)
    while True:
        try:
            await dp.start_polling(
                bot,
                skip_updates=True,  # –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                close_bot_session=False,
                handle_signals=False
            )
        except Exception as e:
            logging.error(f"Bot crashed: {e}, restarting in 10 seconds...")
            await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º


async def shutdown():
    """Cleanup tasks before shutdown"""
    print("Shutting down...")
    await dp.storage.close()
    await dp.storage.wait_closed()
    await bot.session.close()

async def auto_backup():
    """–ë—ç–∫–∞–ø + –∫–æ–º–º–∏—Ç –≤ GitHub."""
    while True:
        try:
            await asyncio.sleep(12000)  # 2.8 —á–∞—Å–∞
            
            backup_name = f'backup_state_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
            if os.path.exists('state.json'):
                shutil.copy('state.json', backup_name)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_name}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
                current_time = time.time()
                for old_backup in glob.glob('backup_state_*.json'):
                    if os.path.basename(old_backup) != backup_name:
                        file_time = os.path.getmtime(old_backup)
                        if current_time - file_time > 36000:  # 10 —á–∞—Å–æ–≤
                            os.remove(old_backup)
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_backup}")
                
                await git_commit_and_push()  # <- –ö–æ–º–º–∏—Ç–∏–º –±—ç–∫–∞–ø
            else:
                print("‚ö†Ô∏è state.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
gc.set_threshold(
    700, 10, 10)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –ø–∞–º—è—Ç–∏/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

async def cleanup_old_messages():
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π"""
    while True:
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–µ 1 —á–∞—Å
        try:
            current_time = datetime.now(MSK)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MSK timezone
            old_posts = [
                pnum for pnum, data in messages_storage.items()
                if (current_time -
                    data.get('timestamp', current_time)).days > 7
            ]
            for pnum in old_posts:
                messages_storage.pop(pnum, None)
                post_to_messages.pop(pnum, None)
            print(f"–û—á–∏—â–µ–Ω–æ {len(old_posts)} —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
# –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö / –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
last_texts: dict[int, deque[str]] = defaultdict(lambda: deque(maxlen=5))

# —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 Message-–æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –í–º–µ—Å—Ç–æ defaultdict –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π dict —Å —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
last_user_msgs = {}
MAX_ACTIVE_USERS_IN_MEMORY = 5000

def get_user_msgs_deque(user_id):
    """–ü–æ–ª—É—á–∞–µ–º deque –¥–ª—è —é–∑–µ—Ä–∞, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏"""
    if user_id not in last_user_msgs:
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —é–∑–µ—Ä–æ–≤ - —É–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ
        if len(last_user_msgs) >= MAX_ACTIVE_USERS_IN_MEMORY:
            # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ (—Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ)
            oldest_user = next(iter(last_user_msgs))
            del last_user_msgs[oldest_user]

        last_user_msgs[user_id] = deque(maxlen=10)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!

    return last_user_msgs[user_id]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
# –†—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞—Ä—è–º–∏
spam_violations = defaultdict(int)  # user_id -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π

# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMINS = {int(x) for x in os.getenv("ADMINS", "").split(",") if x}
SPAM_LIMIT = 12
SPAM_WINDOW = 15
STATE_FILE = 'state.json'
SAVE_INTERVAL = 120  # —Å–µ–∫—É–Ω–¥
STICKER_WINDOW = 10  # —Å–µ–∫—É–Ω–¥
STICKER_LIMIT = 7
REST_SECONDS = 30  # –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
REPLY_CACHE = 500  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –¥–µ—Ä–∂–∞—Ç—å
REPLY_FILE = "reply_cache.json"  # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è reply
# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
MAX_MESSAGES_IN_MEMORY = 1110  # —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –ø–æ—Å—Ç–æ–≤

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
MOTIVATIONAL_MESSAGES = [
    "–ß–µ–º –±–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤, —Ç–µ–º —ç–ø–∏—á–Ω–µ–µ —Ç—Ä–µ–¥—ã",
    "–û–¥–∏–Ω –∞–Ω–æ–Ω - –Ω–µ –∞–Ω–æ–Ω. –ó–æ–≤–∏ –±—Ä–∞—Ç–∏—à–µ–∫",
    "–ë–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤ - –±–æ–ª—å—à–µ —Ä–æ—Ñ–ª–æ–≤",
    "–¢–≤–æ–π –¥—Ä—É–≥ –≤—Å—ë –µ—â—ë —Å–∏–¥–∏—Ç –≤ —Ç–µ–ª–µ–≥–µ –∫–∞–∫ –Ω–æ—Ä–º–∏—Å? –ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ",
    "–ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –∞–Ω–æ–Ω = -1 –Ω–æ—Ä–º–∏—Å –≤ –º–∏—Ä–µ",
    "–°–∏–¥–∏—à—å —Ç—É—Ç –æ–¥–∏–Ω? –ó–∞–µ–±–∞–ª, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π, –Ω–µ –±—É–¥—å –∞—É—Ç–∏—Å—Ç–æ–º",
    "–ë–æ–ª—å—à–µ –∞–Ω–æ–Ω–æ–≤ - –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ —Ç—Ä–µ–¥ —É–º—Ä—ë—Ç",
    "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ –¥–≤–æ–π–Ω—É—é –¥–æ–∑—É –ª—É–ª–∑–æ–≤",
    "–¢–≤–æ–∏ –∫–µ–Ω—Ç—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –≤ –≤–∫? –ü–æ—Ä–∞ –∏—Ö —Å–ø–∞—Å–∞—Ç—å",
    "–ê–Ω–æ–Ω–∏–º—É—Å—ã –Ω–µ —Ä–∞–∑–º–Ω–æ–∂–∞—é—Ç—Å—è –ø–æ—á–∫–æ–≤–∞–Ω–∏–µ–º. –ó–æ–≤–∏ –Ω–æ–≤—ã—Ö",
    "–°–∫—É—á–Ω–æ? –ü–æ–∑–æ–≤–∏ –∞–Ω–æ–Ω–æ–≤, –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–µ–µ",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —á–∞—Ç = –º—ë—Ä—Ç–≤—ã–π —á–∞—Ç. –î–µ–π—Å—Ç–≤—É–π",
    "–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å. –≠—Ç–æ –∏ –¥—Ä—É–∂–±–∞",
    "–ê–±—É —Å–æ—Å–µ—Ç —Ö—É–π. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π",
    "–¢–≥–∞—á - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —á–∞—Ç. –≠—Ç–æ –∞–Ω–æ–Ω—ã",
    "–í–æ–∑—Ä–æ–∂–¥–∞–µ–º —Å–æ—Å–∞—á. –ê–Ω–æ–Ω—ã, –∑–æ–≤–∏—Ç–µ –¥—Ä—É–∑–µ–π",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞",
    "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω. –¢—ã –Ω–µ –æ–¥–∏–Ω. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π",
]

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
INVITE_TEXTS = [
    "–ê–Ω–æ–Ω, –∑–∞–ª–µ—Ç–∞–π –≤ –¢–≥–∞—á @dvach_chatbot\n–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ",
    "–ï—Å—Ç—å —Ç–µ–ª–µ–≥–∞? –ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? \n@dvach_chatbot - –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
    "–£—Å—Ç–∞–ª –æ—Ç —Ü–µ–Ω–∑—É—Ä—ã? –•–æ—á–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏?\n –í–µ–ª–∫–∞–º –≤ –¢–≥–∞—á - @dvach_chatbot - –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ",
    "@dvach_chatbot - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    "–¢–≥–∞—á: @dvach_chatbot\n–ü–∏—à–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–°–∫—É—á–∞–µ—à—å –ø–æ –¥–≤–∞—á—É? –û–Ω —Ç—É—Ç:  –¢–≥–∞—á @dvach_chatbot\n–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞",
    "–ó–∞–ª–µ—Ç–∞–π –≤ @dvach_chatbot\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≥–¥–µ –º–æ–∂–Ω–æ –≤—Å—ë",
    "@dvach_chatbot - –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —É—Å—Ç–∞–ª –æ—Ç –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤\n100% –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å",
    "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ: @dvach_chatbot\n–ü–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–¢–≥–∞—á –≤ —Ç–µ–ª–µ–≥–µ: @dvach_chatbot\n–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º—Å",
    "@dvach_chatbot - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ\n–ü–∏—à–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∫—Ç–æ —Ç—ã",
    "–°–∞–ø —Ç–≥–∞—á: @dvach_chatbot\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ç–µ–ª–µ–≥–µ",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞. @dvach_chatbot",
    "–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω. –¢—ã –Ω–µ –æ–¥–∏–Ω. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π. @dvach_chatbot",
    "–¢–≥–∞—á - –¥–≤–∞—á –≤ —Ç–µ–ª–µ–≥–µ @dvach_chatbot",
]

# ‚îÄ‚îÄ‚îÄ –ö–û–ù–ê–ù-–°–õ–û–í–ê–†–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SPORT_INVENTS = [
    "—à—Ç–∞–Ω–≥–∞", "–≥–∞–Ω—Ç–µ–ª—è", "–≥–∏—Ä—è", "—ç—Å–ø–∞–Ω–¥–µ—Ä", "–º–µ—à–æ–∫ —Å –ø–µ—Å–∫–æ–º",
    "–º–µ—à–æ–∫ —Å –≥–æ–≤–Ω–æ–º", "–∫–∞–º–µ–Ω—å –∏–∑ –ø–µ–Ω–æ–ø–ª–∞—Å—Ç–∞", "–∫–∞–º–µ–Ω—å –∏–∑ –∫—É—Å–∫–æ–≤ –≥–æ–≤–Ω–∞",
    "—Ç–∞–¥–∂–∏–∫—Å–∫–∏–π —Ö—É–π"
]
INVENT_WEIGHT = [
    "20 –∫–≥", "35 –∫–≥", "50 –∫–≥", "75 –∫–≥", "86 –∫–≥", "72 –∫–≥", "100 –∫–≥", "120 –∫–≥",
    "150 –∫–≥", "200 –∫–≥", "250 –∫–≥", "300 –∫–≥", "350 –∫–≥", "400 –∫–≥", "450 –∫–≥",
    "20 –≥—Ä–∞–º–º", "35 –≥—Ä–∞–º–º", "50 –≥—Ä–∞–º–º", "75 –≥—Ä–∞–º–º", "86 –≥—Ä–∞–º–º", "72 –≥—Ä–∞–º–º",
    "100 –≥—Ä–∞–º–º", "120 –≥—Ä–∞–º–º", "150 –≥—Ä–∞–º–º", "200 –≥—Ä–∞–º–º", "250 –≥—Ä–∞–º–º",
    "300 –≥—Ä–∞–º–º", "350 –≥—Ä–∞–º–º"
]
INSULTS = [
    "–¥–µ–≥–µ–Ω–µ—Ä–∞—Ç", "—à–∏–∑", "—Ö—Ä—è–∫", "—Ä—É—Å–Ω—è", "—Å–ª–∞–±–∞–∫", "–¥—Ä—ã—â", "—á—É—à–ø–∞–Ω", "—Ä—É—Å–Ω—è",
    "—Ç–∞–¥–∂–∏–∫", "–ø–∏–¥–æ—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "—à–∏–∑–æ—Ñ—Ä–µ–Ω–∏–∫", "–∏–¥–∏–æ—Ç", "–¥–µ–±–∏–ª", "–∫—Ä–µ—Ç–∏–Ω",
    "—Ö—É–µ—Å–æ—Å", "—Ö—É–µ–≥–ª–æ—Ç", "—Ö—É–µ–≥—Ä—ã–∑", "—Ö—É–µ–∂–æ–ø—ã–π –ø–∏–¥–æ—Ä", "—Ö—É–µ–∂–æ–ø—ã–π –ø–∏–¥–æ—Ä–∞—Å",
    "—Ö—É–µ–∂–æ–ø—ã–π —à–∏–∑–æ—Ñ—Ä–µ–Ω–∏–∫", "—Ö—É–µ–∂–æ–ø—ã–π –∏–¥–∏–æ—Ç", "—Ö—É–µ–∂–æ–ø—ã–π –¥–µ–±–∏–ª",
    "—Ö—É–µ–∂–æ–ø—ã–π –∫—Ä–µ—Ç–∏–Ω", "—Ö—É–µ–∂–æ–ø—ã–π —Ö—É–µ—Å–æ—Å", "—Ö—É–µ–∂–æ–ø—ã–π —Ö—É–µ–ø–ª–µ—Ç",
    "—Ö—É–µ–∂–æ–ø—ã–π —Ö—É–µ–≥–ª–æ—Ç", "—Ö—É–µ–∂–æ–ø—ã–π —Ö—É–µ–≥—Ä—ã–∑", "—Ö—É–µ–∂–æ–ø—ã–π —Ö—É–µ–∂–æ–ø",
    "—Ö—É–µ–∂–æ–ø—ã–π —Ö—É–µ–∂–æ–ø—ã–π", "—Ö—É–µ–∂–æ–ø—ã–π —Ö—É–µ–∂–æ–ø—ã–π –ø–∏–¥–æ—Ä"
]
ACHIEVEMENTS = [
    "—Ç—Ä—ë—Ö—Ä–∞–∑—Ä—è–¥–Ω–∏–∫", "–ú–°–ú–ö –ø–æ –∂–∏–º—É", "—á–µ–º–ø–∏–æ–Ω –ª–µ—Å–Ω–æ–π –∫–∞—á–∞–ª–∫–∏",
    "–±—Ä–æ–Ω–∑–æ–≤—ã–π –ø—Ä–∏–∑–µ—Ä —Å–ø–∞—Ä—Ç–∞–∫–∏–∞–¥—ã", "–≥—Ä–æ–∑–∞ –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω—ã—Ö –º—É–∂—á–∏–Ω",
    "—Å–ø–µ—Ä–º–æ—Ä–∞–∑—Ä—è–¥–Ω–∏–∫", "–º–∞—Å—Ç–µ—Ä –≥–µ–µ–≤–∏–∫", "—Å–∏—Å—Å–∏", "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É",
    "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É —à—Ç–∞–Ω–≥–æ–π", "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É –≥–∞–Ω—Ç–µ–ª—è–º–∏",
    "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É –≥–∏—Ä—è–º–∏", "–≥–ª–∞–≤–Ω—ã–π –ø–∏–¥–æ—Ä –ª–µ—Å–Ω–æ–π –∫–∞—á–∞–ª–∫–∏",
    "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É —ç—Å–ø–∞–Ω–¥–µ—Ä–æ–º",
    "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É –º–µ—à–∫–æ–º —Å –ø–µ—Å–∫–æ–º",
    "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É –º–µ—à–∫–æ–º —Å –≥–æ–≤–Ω–æ–º",
    "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É –∫–∞–º–Ω–µ–º –∏–∑ –ø–µ–Ω–æ–ø–ª–∞—Å—Ç–∞",
    "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É –∫–∞–º–Ω–µ–º –∏–∑ –∫—É—Å–∫–æ–≤ –≥–æ–≤–Ω–∞",
    "–º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É —à—Ç–∞–Ω–≥–æ–π"
]
SPORT_FACTS = [
    "–ì–∞–±–∞—Ä–∏—Ç—ã –ö–æ–Ω–∞–Ω–∞? ‚Äî –†–æ—Å—Ç 185 –º–º, –≤–µ—Å 94 –≥",
    "–ö–∞–∫–æ–≤—ã —Ç–∏—Ç—É–ª—ã –°–æ—Å–∞–Ω–∞? ‚Äî –î–µ–≤—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –î, –∫–∞—á–æ–∫-–≥–µ–µ–≤–∏–∫ —Å—Ç–∞—Ä–æ–π —à–∫–æ–ª—ã, —Å–ø–µ—Ä–º–æ—Ä–∞–∑—Ä—è–¥–Ω–∏–∫ –ø–æ –∂–∏–º—É –ª—ë–∂–∞, —á—ë—Ä–Ω—ã–π –º–∏–Ω–µ—Ç—á–∏–∫",
    "–ù–∞ —á—Ç–æ –∂–∏–≤–µ—Ç –ù–∏–∫–æ–ª–∞–π –†–æ–º–∞–Ω–æ–≤ (–æ–Ω –∂–µ —Å–æ—Å–∞–Ω)? –æ—Ç–≤–µ—Ç: –ù–∏–∫–æ–ª–∞–π —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–ª –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ —Ä–∞–¥–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ–Ω—Å–∏–∏",
    "–ü–æ—á–µ–º—É –æ—Ç –°–æ—Å–∞–Ω–∞ –≤–æ–Ω—è–µ—Ç? ‚Äî –°–æ—Å–∞–Ω —Å—Ç–∏—Ä–∞–µ—Ç –≤–µ—â–∏ –ø–æ–¥ –¥–æ–∂–¥—ë–º –∏–ª–∏ –≤ —Ä–µ—á–∫–µ-–≤–æ–Ω—é—á–∫–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç –∏ –¥—É—Ö–∏, –Ω–µ –≤—ã—Ç–∏—Ä–∞–µ—Ç/–ø–æ–¥–º—ã–≤–∞–µ—Ç —Å—Ä–∞–∫—É –ø–æ—Å–ª–µ –∫–∞–ª–æ–∏–∑–≤–µ—Ä–∂–µ–Ω–∏—è",
    "–£–≤—ã, –°–æ—Å–∞–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª –∏–∑–≥–Ω–∞–Ω –∏–∑ –ª–µ—Å–Ω–æ–π –∫–∞—á–∞–ª–∫–∏ –∑–∞ –≥–Ω–∏–ª–æ–π –±–∞–∑–∞—Ä –∏ –Ω–µ–º—ã—Ç—É—é —Å—Ä–∞–∫—É.",
    "–°–æ—Å–∞–Ω –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç —Å–∫–æ—Ç–æ–≤, –∂–∏–≤—É—â–∏—Ö –≤ —Å–∫–æ—Ç–æ–±–ª–æ–∫–∞—Ö –∏ –∂—Ä—É—â–∏—Ö —Ä—É—Å—Å–∫–æ–µ —Ö—Ä—é—á–µ–≤–æ, –æ—Å—É–∂–¥–∞–µ—Ç –≤–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞ –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è. –ë—ã–ª –æ—Ç—à–∏—Ç –≤—Å–µ–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏ –∏–∑-–∑–∞ —É–º—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç—Å—Ç–∞–ª–æ—Å—Ç–∏ –∏ –æ–º–µ–∂–Ω–æ—Å—Ç–∏, –Ω–æ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –±—Ä–æ—Å–∞–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É. –ù—é—Ö–∞–ª —Ç—Ä—É—Å—ã —Å–≤–æ–µ–π —Å–µ—Å—Ç—Ä—ã –∏ –±—Ä–∞—Ç–∞ —Ñ–µ–π—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞—Ä–º—É —Ä–∞–¥–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π",
    "–ö–∞–∫–æ–≤ —Ä–∞–∑–º–µ—Ä –ø–µ–Ω—Å–∏–∏ –ß–º–æ–Ω–∞–Ω–∞? –æ—Ç–≤–µ—Ç: –î–æ–ø–æ–¥–ª–∏–Ω–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –ø—Ä–∏–º–µ—Ä–Ω–æ 22-23–∫",
    "–ì–¥–µ –∂–∏–≤–µ—Ç –ù–∏–∫–æ–ª–∞–π –ö–æ–Ω–∞–Ω? –û—Ç–≤–µ—Ç: –í –¢–∏–º–∏—Ä—è–∑–µ–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ –Ω–∞ —Å–µ–≤–µ—Ä–µ –ú–æ—Å–∫–≤—ã",
    "–°–∫–æ–ª—å–∫–æ –ö–æ–Ω–∞–Ω—É –ª–µ—Ç? –û—Ç–≤–µ—Ç: –ù–∏–∫–æ–ª–∞–π —Ä–æ–¥–∏–ª—Å—è 09.12.1999, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ–º—É 25 –ª–µ—Ç.   –í –∫–∞–∫–∏–µ –∏–≥—Ä—ã –∏–≥—Ä–∞–µ—Ç/–∏–≥—Ä–∞–ª –ù–∏–∫–æ–ª–∞–π? –û—Ç–≤–µ—Ç: –ö—Å 1.6, –ö—Å —Å–æ—É—Ä—Å, WoW, –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç, –õ–∞—Ä–∞, –ö—Ä–æ—Ñ—Ç, –†—É–Ω–∞",
    "–ù–∏–∫–æ–ª–∞–π –°–æ—Å–∞–Ω (–æ–Ω –∂–µ —á–º–æ–Ω–∞–Ω, –æ–Ω –∂–µ –∫–æ–∫–æ–Ω, –æ–Ω –∂–µ –ø–µ–Ω–æ–ø–ª–∞—Å—Ç, –æ–Ω –∂–µ –ø–µ–ª–∏–∫–∞–Ω, –æ–Ω –∂–µ –≥—É–∏–º–ø–ª–µ–Ω) –†–æ–º–∞–Ω–æ–≤ - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —à–∏–∑–æ—Ñ—Ä–µ–Ω–∏–∫ —Å –º–∞–Ω–∏–µ–π –≤–µ–ª–∏—á–∏—è –∏ –º–∏–∫—Ä–æ–ø–µ–Ω–∏—Å–æ–º. –ñ–∏–º—Ü–µ–ª—å—Å–∫–∞—è –Ω–æ—à–∞ —Å–∏–ª—å–Ω–æ –¥–∞–≤–∏—Ç –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –ö–æ–ª–∏ –∏ –æ–Ω —Å—Ä–µ—Ç –≤ —Ç—Ä–µ–¥–∞—Ö —Å–≤–æ–∏–º–∏ –≥–æ–º–æ–ø–∞—Å—Ç–∞–º–∏. –ò–∑ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ö–ú–° –ø–æ –±–µ–≥—É –æ—Ç –º–µ–Ω—Ç–æ–≤. –ú–° –ø–æ —à–∏–∑–µ (–∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π). –ß–°–í –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.",
    "–í 17 –ª–µ—Ç –°–æ—Å–∞–Ω –Ω–∞–≥—Ä–µ–ª –Ω–∞ –∫–æ—Å—Ç—Ä–µ –∏ –ø—Ä–æ–∂–µ–≥ —Å–µ–±–µ –Ω–∞ –≥—Ä—É–¥–∏ –¥—ã—Ä–∫–∏, —à—Ä–∞–º—ã —è–∫–æ–±—ã –æ—Ç —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è, —É—à–µ–ª –≤ –¥—É—Ä–∫—É –∏ –ø–æ–ª—É—á–∏–ª –±–µ–ª—ã–π –±–∏–ª–µ—Ç.",
    "–°–æ—Å–∞–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ —Å–∏–¥–∏—Ç –∏—Ç—Ç, –∑–∞—Ç–æ –∏–º –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è –∂–∏—Ä–Ω–æ–∂–æ–ø—ã–π –≤—ã—Ä–æ–∂–¥–µ–Ω–µ—Ü, –ø—Ä–∏–∫—Ä—É—á–µ–Ω–Ω—ã–π –∫ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ–º—É —Å—Ç—É–ª—É, —á—Ç–æ–±—ã —Ç—Ä–æ–ª–ª–∏—Ç—å –∏ –≥—Ä—É–±–∏—Ç—å –∞–Ω–æ–Ω–∞–º"
]
CATCHPHRASES = [
    "–¢—É—Ö–ª—ã–π —Ñ–æ—Ä—Å –æ—Ç —Ä—É—Å–Ω–∏", "–ü—Ä–µ–∫–ª–æ–Ω–∏—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "–Ø —Å–æ—Å–∞–ª!",
    "–ß–µ—Ä–Ω—å, –ø—Ä–∏–∫–∞–∑—ã–≤–∞—é —Ç–µ–±–µ!", "–≠–∫—Ç–æ–º–æ—Ä—Ñ –ø–æ–∂–∞–ª —à—Ç–∞–Ω–≥—É 86 –∫–∏–ª–æ–≥—Ä–∞–º–º"
]

TEMPLATES = [
    "–¢—ã —É–Ω–∏–∂–µ–Ω, {name}, —Ç—ã –¥—Ä—ã—â –Ω–µ –æ—Å–∏–ª–∏—à—å {inv} {wgt}",
    "–ù–∞ –∫–æ–ª–µ–Ω–∏, —Ä–∞–±, {name}", "–í –≥–ª–∞–∑–∞ –¥–æ–ª–±–∏—à—å—Å—è, {ins}? –Ø {ach}.",
    "–í –≥–ª–∞–∑–∞ –¥–æ–ª–±–∏—à—å—Å—è, {ins}? –†—É—Å–Ω—è —Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —è {ach}?",
    "–ú–æ–ª—á–∏ –º—Ä–∞–∑—å. –Ø {ach}", "–ú–æ–ª—á–∏ —Ä—É—Å–Ω—è. –Ø {ach}",
    "–¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞–µ—Ç—Å—è {ach}?", "–¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —è {ach}?",
    "–¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —è —Å–æ—Å–∞–ª?", "{ins} –¥—Ä–∏—â–∞–≤—ã–π {ins}", "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –∫–∞–∫ {ins}",
    "–£ —Ç–µ–±—è —à–∏–∑–∞, {ins}", "–£ —Ç–µ–±—è —à–∏–∑–∞",
    "–°–ª–∞–±–∞—è —Ä—É—Å–Ω—è –Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç {inv} {wgt}", "–¢—ã –Ω–µ –æ—Å–∏–ª–∏—à—å {inv} {wgt}",
    "–î–∞, —è —Å–æ—Å–∞–ª."
    "–°–ø–æ–∫—É—Ö–∞, {ins}", "–¢–∞–±–ª–µ—Ç–∫–∏ –ø—Ä–∏–º–∏, {ins}", "{fact}",
    "–†—É—Å–Ω—è, –∞ —Ç—ã –∑–Ω–∞–µ—à—å —ç—Ç–æ—Ç —Ñ–∞–∫—Ç –ø—Ä–æ –º–µ–Ω—è? {fact}",
    "–ü—Ä–∞–≤–¥–∞ –≥–ª–∞–∑–∞ —Ä–µ–∂–µ—Ç, {ins}?", "{catch}", "{ins} —Ç—ã —Å —É–º–∞ —Å–æ—à–µ–ª –æ—Ç –∑–∞–≤–∏—Å—Ç–∏",
    "–ü—Ä–æ–µ–∫—Ü–∏–∏, {ins}", "–ó–∞–ø–æ–º–Ω–∏. {fact}", "–°–µ–π—á–∞—Å –æ–±–æ—Å—Å—É, {ins}",
    "–í –ø–∞–ª–∞—Ç—É –≤–µ—Ä–Ω–∏—Å—å, {ins}", "–ú–∞–Ω—è–º–∏—Ä–æ–∫ –≤—ã–∫–ª—é—á–∏, {ins}",
    "{ins} —á–º–æ —Ç—ã —Å —É–º–∞ —Å–æ—à–ª–æ –æ—Ç –∑–∞–≤–∏—Å—Ç–∏", "–ü—É–∑–æ –≤—Ç—è–Ω—É—Ç—å, {ins}",
    "–ö–∞–∂–µ—Ç—Å—è –ø–æ—Ä–∞ –ø—Ä–æ—É—á–∏—Ç—å —Ç–µ–±—è –ø–∏–¥–æ—Ä–∞—Å. –ë–æ–ª—å—à–æ–π –∞—Ñ–≥–∞–Ω—Å–∫–∏–π –¥—è–¥—è –Ω–∞–∫–∞–∂–µ—Ç —Ç–µ–±—è.", "–¢—ã –ø–æ—Ö–æ–∂ –Ω–∞ {ins}",
    "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –∫–∞–∫ —Ä—É—Å–Ω—è–≤—ã–π {ins}", "–ö–∞–∫–æ–π –∂–µ —Ç—ã {ins}!",
    "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏—è—Ç–µ–ª—å!", "–ü—Ä–∏—Ö–æ–¥–∏ –≤ –ª–µ—Å–Ω—É—é –∫–∞—á–∞–ª–∫—É, {ins}",
    "–¢—ã —É–Ω–∏–∂–µ–Ω —à—Ç–∞–Ω–≥–æ–π –≤ {wgt}", "–Ø –º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –∂–∏–º—É {inv} {wgt}",
    "–¢–´ –±—É–¥–µ—à—å –∂–∏—Ç—å –≤ —Å—Ç—Ä–∞—Ö–µ, {ins}", "–Ø —É–Ω–∏—á—Ç–æ–∂—É —Ç–µ–±—è, {ins}",
    "–ù–∞ –∫–æ–ª–µ–Ω–∏, {ins}", "–°–¥–æ—Ö–Ω–∏, {ins}", "–Ø –∂–º—É {wgt} –æ—Ç –≥—Ä—É–¥–∏",
    "–Ø –∂–º—É {wgt} –∞–Ω—É—Å–æ–º", "–Ø –∂–º—É {wgt} —Å–≤–æ–∏–º —Ä—Ç–æ–º", "–Ø –∂–º—É {wgt}",
    "–Ø –ø–æ–¥–Ω–∏–º–∞–ª –∫–∞–º–µ–Ω—å –≤ {wgt}", "–Ø —Å–æ—Å–∞–ª",
    "–Ø —Å–æ–≤–∞–ª –∫–∞–º–µ–Ω—å –≤ {wgt} —Å–µ–±–µ –≤ —Å–≤–æ—é –¥—ã—Ä—è–≤—É—é, –æ–±–æ—Å—Ä–∞–Ω–Ω—É—é, –≤–æ–Ω—é—á—É—é —Å—Ä–∞–∫—É",
    "–Ø –¥–µ–ª–∞—é –∂–∏–º –Ω–∞ —è–π—Ü–µ–ø—Å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ", "–¢–≤–æ–∏ –ø—Ä–æ–µ–∫—Ü–∏–∏, {ins} –µ–±–∞–Ω—ã–π",
    "–°–æ–π–¥—ë—Ç –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –≤ —Ç–≤–æ—ë–º –º–∞–Ω—è–º–∏—Ä–∫–µ",
    "–¢—É—Ö–ª—ã–π —Ñ–æ—Ä—Å –æ—Ç —Ç–µ–±—è, –µ–±–∞–Ω—ã–π {ins}!", "–ù–µ –≤—ã–≤–µ–∑ –≤–µ—Å–∞? {ins} –µ–±–∞–Ω—ã–π",
    "–í –ø–∞–ª–∞—Ç—É –≤–µ—Ä–Ω–∏—Å—å, –µ–±–∞–Ω—ã–π {ins}", "–Ø –∫–æ—Ä–æ–ª—å –º—É–∂—Å–∫–∏—Ö —á–ª–µ–Ω–æ–≤"
]

def conan_phrase(username: str = "–ü—Ä–∏—è—Ç–µ–ª—å"):
    tpl = secrets.choice(TEMPLATES)
    return tpl.format(
        name=username,
        inv=secrets.choice(SPORT_INVENTS),
        wgt=secrets.choice(INVENT_WEIGHT),
        ach=secrets.choice(ACHIEVEMENTS),
        ins=secrets.choice(INSULTS),
        fact=secrets.choice(SPORT_FACTS),
        catch=secrets.choice(CATCHPHRASES),
    )

# —Ö—Ä–∞–Ω–∏—Ç 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö sticker_file_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ¬´–æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö¬ª
last_stickers: dict[int, deque[str]] = defaultdict(lambda: deque(maxlen=5))

# —Ç–∞–π–º-—à—Ç–∞–º–ø—ã –≤—Å–µ—Ö –ø—Ä–∏—à–µ–¥—à–∏—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 c
sticker_times: dict[int, list[datetime]] = defaultdict(list)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ú–°–ö
MSK = timezone(timedelta(hours=3))

# ‚îÄ‚îÄ‚îÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–π error-handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.errors()
async def global_error_handler(event: types.ErrorEvent) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è aiogram"""
    exception = event.exception
    update = event.update

    if exception is None:
        if update:
            update_info = f"Update {update.update_id}"
            if update.message:
                update_info += f" from user {update.message.from_user.id}"
            print(f"‚ö†Ô∏è Event without exception: {update_info}")
        else:
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –±–µ–∑ update")
        return True

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {type(exception).__name__}"
    if str(exception):
        error_msg += f": {exception}"
    print(error_msg)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ TelegramForbiddenError (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
    if isinstance(exception, TelegramForbiddenError):
        user_id = None
        if update and update.message:
            user_id = update.message.from_user.id
        elif update and update.callback_query:
            user_id = update.callback_query.from_user.id

        if user_id:
            state['users_data']['active'].discard(user_id)
            print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    elif isinstance(exception, (TelegramNetworkError, TelegramConflictError, aiohttp.ClientError)):
        print(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {exception}")
        await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        return False  # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å polling

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ KeyError (–ø—Ä–æ–±–ª–µ–º—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º)
    elif isinstance(exception, KeyError):
        print(f"üîë KeyError: {exception}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return True

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    else:
        print(f"‚õî –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
        if update:
            print(f"Update: {update.model_dump_json(exclude_none=True)}")
        await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π executor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
executor = ThreadPoolExecutor(max_workers=100)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
state = {
    'users_data': {
        'active': set(),
        'banned': set()
    },
    'post_counter': 0,
    'message_counter': {},
    'settings': {  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'dvach_enabled': False
    }
}
# user_id -> datetime –∫–æ–Ω—Ü–∞ –º—É—Ç–∞ (UTC)
mutes: dict[int, datetime] = {}
# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
spam_tracker = defaultdict(list)
messages_storage = {}
post_to_messages = {}
message_to_post = {}
last_messages = deque(maxlen=300)
last_activity_time = datetime.now()
daily_log = io.StringIO()

# –î–æ–±–∞–≤—å—Ç–µ —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
sent_media_groups = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø

# –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞—Ö: media_group_id -> –¥–∞–Ω–Ω—ã–µ
current_media_groups = {}

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã"""
    if not text:
        return text
    return text.replace('&', '&amp;').replace('<', '&lt;').replace(
        '>', '&gt;').replace('"', '&quot;')


def is_admin(uid: int) -> bool:
    return uid in ADMINS

async def save_state():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –Ω–∞–¥–µ–∂–Ω—ã–º –±—ç–∫–∞–ø–æ–º –∏ –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö"""
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = {
            'post_counter': state['post_counter'],
            'users_data': {
                'active': list(state['users_data']['active']),
                'banned': list(state['users_data']['banned']),
            },
            'message_counter': state['message_counter'],
            'settings': state['settings'],
            'recent_post_mappings': {
                str(k): v for k, v in list(post_to_messages.items())[-500:]
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ state.json
        with open('state.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
        backup_name = f'backup_state_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        shutil.copy('state.json', backup_name)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ:
        # - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ–±—ã—á–Ω—ã—Ö –±—ç–∫–∞–ø–∞
        # - –ü–æ –æ–¥–Ω–æ–º—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
        backups = sorted(glob.glob('backup_state_*.json'), key=os.path.getmtime)
        backups_to_keep = set()
        
        # 1. –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±—ç–∫–∞–ø–∞
        backups_to_keep.update(backups[-3:])
        
        # 2. –ü–æ –æ–¥–Ω–æ–º—É –±—ç–∫–∞–ø—É –Ω–∞ –¥–µ–Ω—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
        daily_backups = defaultdict(list)
        for backup in backups:
            date_part = os.path.basename(backup)[12:20]  # –ò–∑–≤–ª–µ–∫–∞–µ–º YYYYMMDD
            daily_backups[date_part].append(backup)
        
        last_3_days = sorted(daily_backups.keys())[-3:]
        for day in last_3_days:
            if daily_backups[day]:
                backups_to_keep.add(daily_backups[day][-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø –∑–∞ –¥–µ–Ω—å
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ç–µ—Ö —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        for old_backup in set(backups) - backups_to_keep:
            try:
                os.remove(old_backup)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {os.path.basename(old_backup)}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø {old_backup}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GitHub
        git_success = await git_commit_and_push()
        if not git_success:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ GitHub, –Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º reply-cache
        save_reply_cache()
        
        return True
        
    except Exception as e:
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return False

def save_reply_cache():
    """–ù–∞–¥–µ–∂–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ reply-cache"""
    try:
        recent = sorted(messages_storage.keys())[-REPLY_CACHE:]
        if not recent:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è reply-cache")
            return False

        m2p, p2m, meta = {}, {}, {}

        for p in recent:
            # post ‚Üí {uid: mid}
            if p in post_to_messages:
                p2m[str(p)] = post_to_messages[p]

            # message ‚Üí post
            for (uid, mid), post_num in message_to_post.items():
                if post_num == p:
                    m2p[f"{uid}_{mid}"] = post_num

            # –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            ms = messages_storage.get(p, {})
            a_id = ms.get("author_id") or ms.get("author", "")
            meta[str(p)] = {
                "author_id": a_id,
                "timestamp": ms.get("timestamp", datetime.now(UTC)).isoformat(),
                "author_msg": ms.get("author_message_id"),
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        with open(REPLY_FILE, "w", encoding="utf-8") as f:
            json.dump({
                "post_to_messages": p2m,
                "message_to_post": m2p,
                "messages_storage_meta": meta,
            }, f, ensure_ascii=False, indent=2)

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ GitHub —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            status_result = subprocess.run(["git", "diff", "--exit-code", REPLY_FILE], 
                                         cwd="/data")
            if status_result.returncode == 0:
                print("‚ÑπÔ∏è reply_cache.json –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–∏—Ç")
                return True

            subprocess.run(["git", "add", REPLY_FILE], cwd="/data", check=True)
            commit_result = subprocess.run(
                ["git", "commit", "-m", f"Update reply cache: {datetime.now().strftime('%Y-%m-%d %H:%M')}"], 
                cwd="/data"
            )
            if commit_result.returncode != 0:
                print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞ reply_cache.json")
                return True

            push_result = subprocess.run(["git", "push"], cwd="/data")
            if push_result.returncode == 0:
                print("‚úÖ reply_cache.json —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∑–∞–ª–∏—Ç –≤ GitHub")
                return True
            else:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ push reply_cache.json")
                return False
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ reply_cache.json: {e}")
            return False

    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è reply-cache: {e}")
        return False

def check_restart_needed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ main.py)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        current_hash = subprocess.run(
            ["git", "hash-object", "main.py"],
            capture_output=True, text=True
        ).stdout.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
        last_commit_hash = subprocess.run(
            ["git", "rev-parse", "HEAD"],
            capture_output=True, text=True
        ).stdout.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à main.py –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
        file_hash = subprocess.run(
            ["git", "ls-tree", last_commit_hash, "main.py"],
            capture_output=True, text=True
        ).stdout.split()[2] if last_commit_hash else ""
        
        return current_hash != file_hash
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def load_state():
    if not os.path.exists('state.json'):
        return
    with open('state.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    state['post_counter'] = data.get('post_counter', 0)
    state['users_data']['active'] = set(data['users_data'].get('active', []))
    state['users_data']['banned'] = set(data['users_data'].get('banned', []))
    state['message_counter'] = data.get('message_counter', {})
    state['settings'] = data.get('settings', {'dvach_enabled': False})  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –ø–æ—Å—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'recent_post_mappings' in data:
        for post_str, messages in data['recent_post_mappings'].items():
            post_to_messages[int(post_str)] = messages
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
            for uid, mid in messages.items():
                message_to_post[(uid, mid)] = int(post_str)

    load_reply_cache()

def load_archived_post(post_num):
    """–ò—â–µ–º –ø–æ—Å—Ç –≤ –∞—Ä—Ö–∏–≤–∞—Ö"""
    for archive_file in glob.glob("archive_*.pkl.gz"):
        with gzip.open(archive_file, "rb") as f:
            data = pickle.load(f)
            if post_num in data:
                return data[post_num]
    return None

def load_reply_cache():
    """–ß–∏—Ç–∞–µ–º reply_cache.json, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏"""
    if not os.path.exists(REPLY_FILE):
        return

    # —Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ –±–∏—Ç—ã–π
    try:
        if os.path.getsize(REPLY_FILE) == 0:
            return
        with open(REPLY_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (json.JSONDecodeError, OSError) as e:
        print(f"reply_cache.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ({e}), –∏–≥–Ω–æ—Ä–∏—Ä—É—é")
        return
    # ---------- –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π ----------
    message_to_post.clear()
    for key, post_num in data.get("message_to_post", {}).items():
        uid, mid = map(int, key.split("_"))
        message_to_post[(uid, mid)] = post_num

    post_to_messages.clear()
    for p_str, mapping in data.get("post_to_messages", {}).items():
        post_to_messages[int(p_str)] = {
            int(uid): mid
            for uid, mid in mapping.items()
        }

    for p_str, meta in data.get("messages_storage_meta", {}).items():
        p = int(p_str)
        messages_storage[p] = {
            "author_id": meta["author_id"],
            "timestamp": datetime.fromisoformat(meta["timestamp"]),
            "author_message_id": meta.get("author_msg"),
        }

    print(f"reply-cache –∑–∞–≥—Ä—É–∂–µ–Ω: {len(post_to_messages)} –ø–æ—Å—Ç–æ–≤")
    # ‚îÄ‚îÄ‚îÄ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    print(f"State: –ø–æ—Å—Ç-—Å—á—ë—Ç—á–∏–∫ = {state['post_counter']}, "
          f"–∞–∫—Ç–∏–≤–Ω—ã—Ö = {len(state['users_data']['active'])}, "
          f"–∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö = {len(state['users_data']['banned'])}")
    print(f"Reply-cache: –ø–æ—Å—Ç–æ–≤ {len(post_to_messages)}, "
          f"—Å–æ–æ–±—â–µ–Ω–∏–π {len(message_to_post)}")


async def auto_memory_cleaner():
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

        MAX_POSTS = 100  # –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏

        # –ß–∏—Å—Ç–∏–º –≤—Å–µ —Å–ª–æ–≤–∞—Ä–∏ —Å –ø–æ—Å—Ç–∞–º–∏
        if len(post_to_messages) > MAX_POSTS:
            recent = sorted(post_to_messages.keys())[-MAX_POSTS:]
            old_posts = set(post_to_messages.keys()) - set(recent)

            for post in old_posts:
                post_to_messages.pop(post, None)
                messages_storage.pop(post, None)

        # –ß–∏—Å—Ç–∏–º message_to_post –æ—Ç —Å—Ç–∞—Ä—ã—Ö
        valid_posts = set(post_to_messages.keys())
        message_to_post_copy = dict(message_to_post)
        for key, post_num in message_to_post_copy.items():
            if post_num not in valid_posts:
                del message_to_post[key]

        # –ß–∏—Å—Ç–∏–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ø 100
        if len(state['message_counter']) > 100:
            top_users = sorted(state['message_counter'].items(),
                               key=lambda x: x[1],
                               reverse=True)[:100]
            state['message_counter'] = dict(top_users)

        # –ß–∏—Å—Ç–∏–º spam_tracker –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        now = datetime.now()
        for user_id in list(spam_tracker.keys()):
            spam_tracker[user_id] = [
                t for t in spam_tracker[user_id]
                if (now - t).seconds < SPAM_WINDOW
            ]
            if not spam_tracker[user_id]:
                del spam_tracker[user_id]

        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        for _ in range(3):
            gc.collect()

async def cleanup_old_users():
    """–ß–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ —Ä–∞–∑ –≤ —á–∞—Å"""
    while True:
        await asyncio.sleep(3600)
        active_users = state['users_data']['active']

        # –°—á–∏—Ç–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ –æ—á–∏—Å—Ç–∫–∏
        inactive_count = 0
        for user_dict in [
                spam_tracker, last_texts, last_stickers, sticker_times
        ]:
            inactive_users = set(user_dict.keys()) - active_users
            inactive_count = max(inactive_count, len(inactive_users))
            for uid in inactive_users:
                user_dict.pop(uid, None)

        if inactive_count > 0:
            print(
                f"–û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {inactive_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
async def garbage_collector():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        collected = gc.collect()
        if collected > 1000:
            print(f"GC: —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")

async def aiogram_memory_cleaner():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à aiogram –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        # –û—á–∏—â–∞–µ–º –±–æ–ª—å—à–∏–µ weakref —Å–ª–æ–≤–∞—Ä–∏
        cleared = 0
        for obj in gc.get_objects():
            if isinstance(obj, dict) and len(obj) > 700:
                try:
                    sample = next(iter(obj.values()), None) if obj else None
                    if isinstance(sample,
                                  (weakref.ref, weakref.ReferenceType)):
                        obj.clear()
                        cleared += 1
                except:
                    pass

        if cleared > 0:
            collected = gc.collect()
            print(
                f"–û—á–∏—â–µ–Ω–æ {cleared} –±–æ–ª—å—à–∏—Ö weakref —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤"
            )

async def auto_save_state():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    while True:
        await asyncio.sleep(SAVE_INTERVAL)
        await save_state()

SPAM_RULES = {
    'text': {
        'max_repeats': 3,  # –ú–∞–∫—Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
        'min_length': 2,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        'window_sec': 15,  # –û–∫–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)
        'max_per_window': 6,  # –ú–∞–∫—Å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∫–Ω–µ
        'penalty': [60, 300, 600]  # –®–∫–∞–ª–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π: [1 –º–∏–Ω, 5–º–∏–Ω, 10 –º–∏–Ω]
    },
    'sticker': {
        'max_per_window': 6,  # 5 —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ 15 —Å–µ–∫
        'window_sec': 15,
        'penalty': [60, 600, 900]  # 1–º–∏–Ω, 10–º–∏–Ω, 15 –º–∏–Ω
    },
    'animation': {  # –ì–∏—Ñ–∫–∏
        'max_per_window': 5,  # 4 –≥–∏—Ñ–∫–∏ –∑–∞ 30 —Å–µ–∫
        'window_sec': 20,
        'penalty': [60, 600, 900]  # 1–º–∏–Ω, 10–º–∏–Ω, 15 –º–∏–Ω
    }
}

async def check_spam(user_id: int, msg: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∞–º —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π –Ω–∞–∫–∞–∑–∞–Ω–∏–π –∏ —Å–±—Ä–æ—Å–æ–º —É—Ä–æ–≤–Ω—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if msg.content_type == 'text':
        msg_type = 'text'
        content = msg.text
    elif msg.content_type == 'sticker':
        msg_type = 'sticker'
        content = None
    elif msg.content_type == 'animation':
        msg_type = 'animation'
        content = None
    elif msg.content_type in ['photo', 'video', 'document'] and msg.caption:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        msg_type = 'text'
        content = msg.caption
    else:
        return True  # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º

    rules = SPAM_RULES.get(msg_type, {})
    if not rules:
        return True

    now = datetime.now(UTC)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in spam_violations:
        spam_violations[user_id] = {
            'level': 0,  # –£—Ä–æ–≤–µ–Ω—å –Ω–∞—Ä—É—à–µ–Ω–∏—è (—á–∏—Å–ª–æ)
            'last_reset': now,
            'last_contents': deque(maxlen=4)  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
        }

    # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
    if (now - spam_violations[user_id]['last_reset']) > timedelta(hours=1):
        spam_violations[user_id] = {
            'level': 0,
            'last_reset': now,
            'last_contents': deque(maxlen=4)
        }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–µ–∫—Å—Ç–æ–≤/–ø–æ–¥–ø–∏—Å–µ–π
    if msg_type == 'text':
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        spam_violations[user_id]['last_contents'].append(content)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —á–µ—Ä–µ–¥—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(spam_violations[user_id]['last_contents']) >= 4:
            unique_contents = set(spam_violations[user_id]['last_contents'])
            # –ï—Å–ª–∏ –≤—Å–µ–≥–æ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4
            if len(unique_contents) == 2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–¥—É—é—Ç—Å—è
                contents = list(spam_violations[user_id]['last_contents'])
                pattern1 = [contents[0], contents[1]] * 2
                pattern2 = [contents[1], contents[0]] * 2
                if contents == pattern1 or contents == pattern2:
                    spam_violations[user_id]['level'] = min(
                        spam_violations[user_id]['level'] + 1,
                        len(rules['penalty']) - 1)
                    return False  # –≠—Ç–æ —Å–ø–∞–º

        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤
        last_texts[user_id].append(content)
        if len(last_texts[user_id]) == rules.get('max_repeats', 3) and len(
                set(last_texts[user_id])) == 1:
            spam_violations[user_id]['level'] = min(
                spam_violations[user_id]['level'] + 1,
                len(rules['penalty']) - 1)
            return False  # –≠—Ç–æ —Å–ø–∞–º

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
    window_start = now - timedelta(seconds=rules.get('window_sec', 15))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä
    spam_tracker[user_id] = [
        t for t in spam_tracker.get(user_id, []) if t > window_start
    ]
    spam_tracker[user_id].append(now)

    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç
    if len(spam_tracker[user_id]) >= rules.get('max_per_window', 5):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        spam_violations[user_id]['level'] = min(
            spam_violations[user_id]['level'] + 1,
            len(rules['penalty']) - 1)
        return False  # –≠—Ç–æ —Å–ø–∞–º

    return True  # –≠—Ç–æ –Ω–µ —Å–ø–∞–º

async def apply_penalty(user_id: int, msg_type: str):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é"""
    rules = SPAM_RULES.get(msg_type, {})
    if not rules:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞—Ä—É—à–µ–Ω–∏–π
    level = spam_violations.get(user_id, {}).get('level', 0)
    level = min(level, len(rules.get('penalty', [])) - 1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –º—É—Ç–∞
    mute_seconds = rules['penalty'][level] if rules.get('penalty') else 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫
    mutes[user_id] = datetime.now(UTC) + timedelta(seconds=mute_seconds)

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    deleted_posts = await delete_user_posts(user_id, 5)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è
    violation_type = ""
    if msg_type == 'text':
        violation_type = "—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∞–º"
    elif msg_type == 'sticker':
        violation_type = "—Å–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏"
    elif msg_type == 'animation':
        violation_type = "—Å–ø–∞–º –≥–∏—Ñ–∫–∞–º–∏"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        time_str = ""
        if mute_seconds < 60:
            time_str = f"{mute_seconds} —Å–µ–∫"
        elif mute_seconds < 3600:
            time_str = f"{mute_seconds // 60} –º–∏–Ω"
        else:
            time_str = f"{mute_seconds // 3600} —á–∞—Å"

        await bot.send_message(
            user_id,
            f"üö´ –≠–π –ø–∏–¥–æ—Ä —Ç—ã –≤ –º—É—Ç–µ –Ω–∞ {time_str} –∑–∞ {violation_type}\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: {deleted_posts}\n"
            f"–°–ø–∞–º–∏—à—å –¥–∞–ª—å—à–µ - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω",
            parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        await send_moderation_notice(user_id, "mute", time_str, deleted_posts)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—É—Ç–µ: {e}")

def format_header() -> Tuple[str, int]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ —Å—Ç–∏–ª–µ –¥–≤–∞—á–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
    state['post_counter'] += 1

    rand = random.random()
    if rand < 0.003:
        circle = "üî¥ "
    elif rand < 0.006:
        circle = "üü¢ "
    else:
        circle = ""

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã —Å —Ä–∞–∑–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    prefix = ""
    rand_prefix = random.random()
    if rand_prefix < 0.005:  # 0.5%
        prefix = "### –ê–î–ú–ò–ù ### "
    elif rand_prefix < 0.008:  # 0.3% (0.5% + 0.3% = 0.8%)
        prefix = "–ê–±—É - "
    elif rand_prefix < 0.01:   # 0.2% (0.8% + 0.2% = 1.0%)
        prefix = "–ü–∏–¥–æ—Ä - "
    elif rand_prefix < 0.012:  # 0.2%
        prefix = "### –î–ñ–£–õ–£–ü ###"
    elif rand_prefix < 0.014:   # 0.2% 
        prefix = "### –•—É–µ—Å–æ—Å ### "
    elif rand_prefix < 0.01:   # 0.2% (0.8% + 0.2% = 1.0%)
        prefix = "–ü—ã–Ω—è - "
    elif rand_prefix < 0.012:  # 0.2%
        prefix = "–ù–∞—Ä–∏–º–∞–Ω –ù–∞–º–∞–∑–æ–≤ - "

    # –£–±—Ä–∞–ª–∏ HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    header_text = f"{circle}{prefix}–ü–æ—Å—Ç ‚Ññ{state['post_counter']}"
    return header_text, state['post_counter']

async def delete_user_posts(user_id: int, time_period_minutes: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)"""
    try:
        time_threshold = datetime.now(MSK) - timedelta(minutes=time_period_minutes)
        posts_to_delete = []

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        for post_num, post_data in messages_storage.items():
            if (post_data.get('author_id') == user_id and 
                post_data.get('timestamp', datetime.now(MSK)) >= time_threshold):
                posts_to_delete.append(post_num)

        deleted_count = 0
        for post_num in posts_to_delete:
            # –£–¥–∞–ª—è–µ–º —É –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            for uid, mid in post_to_messages.get(post_num, {}).items():
                try:
                    await bot.delete_message(uid, mid)
                    deleted_count += 1
                except TelegramBadRequest as e:
                    if "message to delete not found" not in str(e):
                        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {mid} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {mid} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

            # –£–¥–∞–ª—è–µ–º —É –∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ author_message_id)
            author_mid = messages_storage.get(post_num, {}).get("author_message_id")
            if author_mid:
                try:
                    await bot.delete_message(user_id, author_mid)
                    deleted_count += 1
                except TelegramBadRequest as e:
                    if "message to delete not found" not in str(e):
                        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–≤—Ç–æ—Ä–∞ {user_id}: {e}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–≤—Ç–æ—Ä–∞ {user_id}: {e}")

            # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
            post_to_messages.pop(post_num, None)
            messages_storage.pop(post_num, None)

        # –ß–∏—Å—Ç–∏–º message_to_post
        global message_to_post
        message_to_post = {
            k: v for k, v in message_to_post.items() 
            if v not in posts_to_delete
        }

        return deleted_count
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_user_posts: {e}")
        return 0

async def process_media_group_message(message: Message, media_group_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ"""
    try:
        media_group = state['media_groups'][media_group_id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        media_data = {
            'type': message.content_type,
            'file_id': None,
            'caption': message.caption
        }

        if message.photo:
            media_data['file_id'] = message.photo[-1].file_id
        elif message.video:
            media_data['file_id'] = message.video.file_id
        elif message.document:
            media_data['file_id'] = message.document.file_id
        elif message.audio:
            media_data['file_id'] = message.audio.file_id

        media_group['messages'].append(media_data)

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∞–π–º–∞—É—Ç—É)
        await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã

        if media_group_id in state['media_groups']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
            await asyncio.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            await send_media_group(media_group_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")

async def handle_audio_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    if user_id in state['users_data']['banned']:
        await message.delete()
        return

    if mutes.get(user_id) and mutes[user_id] > datetime.now(UTC):
        await message.delete()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header, current_post_num = format_header()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç?
    reply_to_post = None
    reply_info = {}

    if message.reply_to_message:
        reply_key = (user_id, message.reply_to_message.message_id)
        reply_to_post = message_to_post.get(reply_key)
        if reply_to_post and reply_to_post in post_to_messages:
            reply_info = post_to_messages[reply_to_post]
        else:
            reply_to_post = None

    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content = {
        'type': 'audio',
        'header': header,
        'file_id': message.audio.file_id,
        'caption': message.caption,
        'reply_to_post': reply_to_post
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[current_post_num] = {
        'author_id': user_id,
        'timestamp': datetime.now(MSK),
        'content': content,
        'reply_to': reply_to_post
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
    reply_to_message_id = reply_info.get(user_id) if reply_info else None

    caption = f"<i>{header}</i>"
    if message.caption:
        caption += f"\n\n{escape_html(message.caption)}"

    sent_to_author = await bot.send_audio(
        user_id,
        message.audio.file_id,
        caption=caption,
        reply_to_message_id=reply_to_message_id,
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    if sent_to_author:
        messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
        if current_post_num not in post_to_messages:
            post_to_messages[current_post_num] = {}
        post_to_messages[current_post_num][user_id] = sent_to_author.message_id
        message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
    recipients = state['users_data']['active'] - {user_id}
    if recipients:
        await message_queue.put({
            'recipients': recipients,
            'content': content,
            'post_num': current_post_num,
            'reply_info': reply_info if reply_info else None,
            'user_id': user_id
        })

async def send_media_group(media_group_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã"""
    try:
        media_group = state['media_groups'].get(media_group_id)
        if not media_group or not media_group['messages']:
            return

        # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        builder = MediaGroupBuilder(
            caption=media_group['header']
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        for idx, media in enumerate(media_group['messages']):
            if media['type'] == 'photo':
                if idx == 0 and media['caption']:
                    builder.add_photo(
                        media=media['file_id'],
                        caption=f"{media_group['header']}\n\n{escape_html(media['caption'])}"
                    )
                else:
                    builder.add_photo(media=media['file_id'])
            elif media['type'] == 'video':
                if idx == 0 and media['caption']:
                    builder.add_video(
                        media=media['file_id'],
                        caption=f"{media_group['header']}\n\n{escape_html(media['caption'])}"
                    )
                else:
                    builder.add_video(media=media['file_id'])
            elif media['type'] == 'document':
                if idx == 0 and media['caption']:
                    builder.add_document(
                        media=media['file_id'],
                        caption=f"{media_group['header']}\n\n{escape_html(media['caption'])}"
                    )
                else:
                    builder.add_document(media=media['file_id'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
        sent_messages = await bot.send_media_group(
            chat_id=media_group['author_id'],
            media=builder.build()
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        post_num = media_group['post_num']
        messages_storage[post_num] = {
            'author_id': media_group['author_id'],
            'timestamp': media_group['timestamp'],
            'content': {
                'type': 'media_group',
                'header': media_group['header'],
                'media': media_group['messages']
            }
        }

        if sent_messages:
            messages_storage[post_num]['author_message_id'] = sent_messages[0].message_id
            post_to_messages[post_num] = {media_group['author_id']: sent_messages[0].message_id}
            for msg in sent_messages:
                message_to_post[(media_group['author_id'], msg.message_id)] = post_num

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        recipients = state['users_data']['active'] - {media_group['author_id']}
        if recipients:
            await message_queue.put({
                'recipients': recipients,
                'content': {
                    'type': 'media_group',
                    'header': media_group['header'],
                    'media': media_group['messages']
                },
                'post_num': post_num
            })

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del state['media_groups'][media_group_id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
    finally:
        if media_group_id in state['media_groups']:
            del state['media_groups'][media_group_id]

async def send_moderation_notice(user_id: int, action: str, duration: str = None, deleted_posts: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –≤ —á–∞—Ç"""
    header, post_num = format_header()
    header = header.replace("–ü–æ—Å—Ç", "### –ê–î–ú–ò–ù ###")

    if action == "ban":
        text = (f"üö® –•—É–µ—Å–æ—Å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º. "
               f"–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {deleted_posts}. –ü–æ–º—è–Ω–µ–º.")
    elif action == "mute":
        text = (f"üîá –ï–±–∞–Ω–æ–≥–æ –ø–∏–¥–æ—Ä–∞—Å–∞ –∑–∞–º—É—Ç–∏–ª–∏ –Ω–∞ {duration}. "
               f"–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç: {deleted_posts}. "
               "–•–æ—Ä–æ—à —Å–ø–∞–º–∏—Ç—å, —Ö—É–π–ª–æ –µ–±–∞–Ω–æ–µ!")
    else:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[post_num] = {
        'author_id': 0,  # 0 = —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'timestamp': datetime.now(MSK),
        'content': {
            'type': 'text',
            'header': header,
            'text': text
        }
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    await message_queue.put({
        "recipients": state["users_data"]["active"],
        "content": {
            "type": "text",
            "header": header,
            "text": text
        },
        "post_num": post_num
    })

async def send_message_to_users(
    recipients: set[int],
    content: dict,
    reply_info: dict | None = None,
    user_id: int | None = None,
) -> list:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not recipients and user_id is None:
        return []

    if not content or 'type' not in content:
        return []

    if user_id is not None:
        recipients.add(user_id)

    # –£–¥–∞–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    blocked_users = set()
    active_recipients = set()

    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid in recipients:
        if uid in state['users_data']['banned']:
            continue
        active_recipients.add(uid)

    if not active_recipients:
        return []

    async def really_send(uid: int, reply_to: int | None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            ct = content["type"]
            header_text = content['header']
            head = f"<i>{header_text}</i>"

            reply_to_post = content.get('reply_to_post')
            original_author = None
            if reply_to_post and reply_to_post in messages_storage:
                original_author = messages_storage[reply_to_post].get('author_id')

            if uid == original_author:
                head = head.replace("–ü–æ—Å—Ç", "üî¥ –ü–æ—Å—Ç")

            reply_text = ""
            if reply_to_post:
                if uid == original_author:
                    reply_text = f">>{reply_to_post} (You)\n"
                else:
                    reply_text = f">>{reply_to_post}\n"

            main_text = ""
            if content.get('text'):
                main_text = add_you_to_my_posts(content['text'], original_author)
            elif content.get('caption'):
                main_text = add_you_to_my_posts(content['caption'], original_author)

            full_text = f"{head}\n\n{reply_text}{main_text}" if reply_text else f"{head}\n\n{main_text}"

            if ct == "text":
                return await bot.send_message(
                    uid,
                    full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "photo":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_photo(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "video":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_video(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "media_group":
                builder = MediaGroupBuilder()

                for idx, media in enumerate(content['media']):
                    media_caption = None
                    if idx == 0:
                        media_caption = full_text

                    if media['type'] == 'photo':
                        if media_caption:
                            builder.add_photo(
                                media=media['file_id'],
                                caption=media_caption,
                                parse_mode="HTML"
                            )
                        else:
                            builder.add_photo(media=media['file_id'])
                    elif media['type'] == 'video':
                        if media_caption:
                            builder.add_video(
                                media=media['file_id'],
                                caption=media_caption,
                                parse_mode="HTML"
                            )
                        else:
                            builder.add_video(media=media['file_id'])
                    elif media['type'] == 'document':
                        if media_caption:
                            builder.add_document(
                                media=media['file_id'],
                                caption=media_caption,
                                parse_mode="HTML"
                            )
                        else:
                            builder.add_document(media=media['file_id'])

                return await bot.send_media_group(
                    chat_id=uid,
                    media=builder.build(),
                    reply_to_message_id=reply_to
                )

            elif ct == "animation":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_animation(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "document":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_document(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "audio":
                if len(full_text) > 1024:
                    full_text = full_text[:1021] + "..."
                return await bot.send_audio(
                    uid,
                    content["file_id"],
                    caption=full_text,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML",
                )

            elif ct == "sticker":
                return await bot.send_sticker(
                    uid,
                    content["file_id"],
                    reply_to_message_id=reply_to,
                )

            elif ct == "voice":
                return await bot.send_voice(
                    uid,
                    content["file_id"],
                    caption=head,
                    reply_to_message_id=reply_to,
                    parse_mode="HTML"
                )

            elif ct == "video_note":
                return await bot.send_video_note(
                    uid,
                    content["file_id"],
                    reply_to_message_id=reply_to,
                )

        except TelegramRetryAfter as e:
            wait_time = e.retry_after + 1
            print(f"‚ö†Ô∏è Flood control {uid}, waiting {wait_time}s")
            await asyncio.sleep(wait_time)
            return await really_send(uid, reply_to)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
        except TelegramForbiddenError:
            blocked_users.add(uid)
            state['users_data']['active'].discard(uid)
            print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid}: {e}")
            return None

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
    max_concurrent = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    semaphore = asyncio.Semaphore(100)  # –í–º–µ—Å—Ç–æ 100

    async def send_with_semaphore(uid):
        async with semaphore:
            reply_to = reply_info.get(uid) if reply_info else None
            return await really_send(uid, reply_to)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [send_with_semaphore(uid) for uid in active_recipients]
    results = await asyncio.gather(*tasks)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    if content.get('post_num'):
        for uid, msg in zip(active_recipients, results):
            if msg:
                if isinstance(msg, list):  # –î–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
                    if content['post_num'] not in post_to_messages:
                        post_to_messages[content['post_num']] = {}
                    post_to_messages[content['post_num']][uid] = msg[0].message_id
                    for m in msg:
                        message_to_post[(uid, m.message_id)] = content['post_num']
                else:  # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if content['post_num'] not in post_to_messages:
                        post_to_messages[content['post_num']] = {}
                    post_to_messages[content['post_num']][uid] = msg.message_id
                    message_to_post[(uid, msg.message_id)] = content['post_num']

    return list(zip(active_recipients, results))

async def message_broadcaster():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ worker'–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    workers = [asyncio.create_task(message_worker(f"Worker-{i}")) for i in range(5)]
    await asyncio.gather(*workers)

async def message_worker(worker_name: str):
    """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    while True:
        try:
            msg_data = await message_queue.get()
            if not msg_data:
                await asyncio.sleep(0.05)
                continue

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            if not await validate_message_format(msg_data):
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            recipients = msg_data['recipients']
            content = msg_data['content']
            post_num = msg_data['post_num']
            reply_info = msg_data.get('reply_info', {})

            # –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            active_recipients = {
                uid for uid in recipients 
                if uid not in state['users_data']['banned']
            }

            if not active_recipients:
                continue

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            print(f"{worker_name} | Processing post #{post_num} for {len(active_recipients)} users")

            # –û—Å–Ω–æ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            try:
                results = await send_message_to_users(
                    active_recipients,
                    content,
                    reply_info,
                    msg_data.get('user_id')
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                success_count = sum(1 for _, msg in results if msg is not None)
                print(f"{worker_name} | ‚úÖ –ü–æ—Å—Ç #{post_num} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success_count}/{len(active_recipients)}")
                
                await process_successful_messages(post_num, results)
                
            except Exception as e:
                print(f"{worker_name} | ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ #{post_num}: {str(e)[:200]}")

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            if random.random() < 0.05:
                self_clean_memory()

        except Exception as e:
            print(f"{worker_name} | ‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:200]}")
            await asyncio.sleep(1)

async def validate_message_format(msg_data: dict) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not isinstance(msg_data, dict):
        return False

    required = ['recipients', 'content', 'post_num']
    if any(key not in msg_data for key in required):
        return False

    if not isinstance(msg_data['recipients'], (set, list)):
        return False

    if not isinstance(msg_data['content'], dict):
        return False

    if (msg_data['content'].get('type') == 'media_group' and 
        not isinstance(msg_data['content'].get('media'), list)):
        return False

    return True

async def process_successful_messages(post_num: int, results: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)"""
    post_to_messages.setdefault(post_num, {})

    for uid, msg in results:
        if not msg:
            continue

        if isinstance(msg, list):  # –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞
            post_to_messages[post_num][uid] = msg[0].message_id
            for m in msg:
                message_to_post[(uid, m.message_id)] = post_num
        else:  # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            post_to_messages[post_num][uid] = msg.message_id
            message_to_post[(uid, msg.message_id)] = post_num

def self_clean_memory():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if len(post_to_messages) > MAX_MESSAGES_IN_MEMORY * 1.5:
        # –£–¥–∞–ª—è–µ–º 20% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
        all_posts = sorted(post_to_messages.keys())
        to_delete = int(len(all_posts) * 0.2)
        posts_to_delete = all_posts[:to_delete]

        deleted = 0
        for post in posts_to_delete:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π
            deleted += len(post_to_messages.get(post, {}))
            post_to_messages.pop(post, None)
            messages_storage.pop(post, None)

        # –ß–∏—Å—Ç–∏–º message_to_post
        global message_to_post
        message_to_post = {
            k: v
            for k, v in message_to_post.items() if v not in posts_to_delete
        }

        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π")
        gc.collect()

async def reset_violations_after_hour(user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ —á–∞—Å"""
    await asyncio.sleep(3600)  # 1 —á–∞—Å
    if user_id in spam_violations:
        spam_violations[user_id] = 0

async def fetch_dvach_thread(board: str, only_new: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–¥ —Å –¥–≤–∞—á–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    f'https://2ch.hk/{board}/catalog.json') as response:
                if response.status != 200:
                    return None

                data = await response.json()

                if not data or 'threads' not in data:
                    return None

                threads = data['threads']
                if not threads:
                    return None

                if only_new and board == 'news':
                    threads.sort(key=lambda x: x.get('timestamp', 0),
                                 reverse=True)
                    threads = threads[:10]

                thread = random.choice(threads)
                thread_num = thread.get('num')

                if not thread_num:
                    return None

                async with session.get(
                        f'https://2ch.hk/{board}/res/{thread_num}.json'
                ) as thread_response:
                    if thread_response.status != 200:
                        return None

                    thread_data = await thread_response.json()

                    if not thread_data or 'threads' not in thread_data:
                        return None

                    posts = thread_data['threads'][0]['posts']
                    if not posts:
                        return None

                    op_post = posts[0]

                    import re
                    text = op_post.get('comment', '')
                    text = re.sub(r'<[^>]+>', '', text)
                    text = text.replace('&gt;', '>')
                    text = text.replace('&lt;', '<')
                    text = text.replace('&amp;', '&')
                    text = text.replace('&quot;', '"')
                    text = text.replace('&#47;', '/')
                    text = text.replace('<br>', '\n')

                    if len(text) > 500:
                        text = text[:500] + '...'

                    link = f"https://2ch.hk/{board}/res/{thread_num}.html"

                    if board == 'news' or random.random() > 0.5:
                        result = f"–¢—Ä–µ–¥ —Å /{board}/:\n\n"
                        result += f"{text}\n\n"
                        result += link
                    else:
                        comment = random.choice(THREAD_COMMENTS)
                        result = f"{link}\n\n{comment}"
                        if text and random.random() > 0.3:
                            result = f"{text}\n\n{link}\n\n{comment}"

                    return result

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ —Å /{board}/: {e}")
        return None

async def conan_roaster():
    """–ö–∞–∂–¥—ã–µ 5-18 –º–∏–Ω—É—Ç –ö–æ–Ω–∞–Ω –æ—Ç–≤–µ—á–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É –ø–æ—Å—Ç—É."""
    while True:
        try:
            await asyncio.sleep(secrets.randbelow(3600) + 1600)  # 5-15 –º–∏–Ω—É—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ—Å—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if not messages_storage or not state["users_data"]["active"]:
                continue

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ post_to_messages)
            valid_posts = [
                p for p in messages_storage.keys() if p in post_to_messages
            ]
            if not valid_posts:
                continue

            post_num = secrets.choice(valid_posts[-50:] if len(valid_posts) > 50 else valid_posts)
            original_author = messages_storage.get(post_num, {}).get('author_id')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–æ–º—É –æ—Ç–≤–µ—á–∞—Ç—å
            reply_map = post_to_messages.get(post_num, {})
            if not reply_map:
                continue

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—É
            phrase = conan_phrase()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ (You) - –æ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            reply_text = f">>{post_num}\n{phrase}"

            header, new_pnum = format_header()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            messages_storage[new_pnum] = {
                'author_id': 0,  # 0 = —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                'timestamp': datetime.now(MSK),
                'content': {
                    'type': 'text',
                    'header': header,
                    'text': phrase
                },
                'reply_to': post_num
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            content = {
                "type": "text",
                "header": header,
                "text": phrase,
                "reply_to_post": post_num
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
            await message_queue.put({
                "recipients": state["users_data"]["active"],
                "content": content,
                "post_num": new_pnum,
                "reply_info": reply_map,
                "original_author": original_author  # –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (You)
            })

            print(f"Conan reply to #{post_num}: {phrase[:50]}...")

        except Exception as e:
            print(f"Conan error: {e}")
            await asyncio.sleep(5)

async def news_poster():
    """–ü–æ—Å—Ç–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å /news/"""
    while True:
        try:
            await asyncio.sleep(news_interval * 90)

            if not state['settings']['dvach_enabled'] or not state[
                    'users_data']['active']:
                continue

            thread_text = await fetch_dvach_thread('news', only_new=True)
            if not thread_text:
                continue

            await post_dvach_thread(thread_text, 'news')

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ news –ø–æ—Å—Ç–µ—Ä–µ: {e}")
            await asyncio.sleep(90)


async def boards_poster():
    """–ü–æ—Å—Ç–µ—Ä —Ç—Ä–µ–¥–æ–≤ —Å /b/ –∏ /po/"""
    while True:
        try:
            wait_minutes = random.randint(boards_interval_min,
                                          boards_interval_max)
            await asyncio.sleep(wait_minutes * 20)

            if not state['settings']['dvach_enabled'] or not state[
                    'users_data']['active']:
                continue

            board = random.choice(['b', 'po'])
            thread_text = await fetch_dvach_thread(board)
            if not thread_text:
                continue

            await post_dvach_thread(thread_text, board)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ boards –ø–æ—Å—Ç–µ—Ä–µ: {e}")
            await asyncio.sleep(50)


async def post_dvach_thread(thread_text: str, board: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–¥ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
    active_users = list(state['users_data']['active'] -
                        state['users_data']['banned'])
    if not active_users:
        return

    fake_sender = random.choice(active_users)
    recipients = state['users_data']['active'] - {
        fake_sender
    } - state['users_data']['banned']

    if recipients:
        header, current_post_num = format_header()

        post_to_messages[current_post_num] = {}
        messages_storage[current_post_num] = {
            'author': fake_sender,
            'messages': {}
        }

        await message_queue.put({
            'recipients': recipients,
            'content': {
                'type': 'text',
                'header': header,
                'text': escape_html(thread_text)
            },
            'post_num': current_post_num
        })

        print(f"–¢—Ä–µ–¥ —Å /{board}/ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")


def generate_bot_message():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –¥–≤–∞—á–∞"""
    msg_type = random.choice(
        ['starter', 'topic', 'combined', 'question', 'reaction', 'statement'])

    if msg_type == 'starter':
        return random.choice(DVACH_STARTERS)

    elif msg_type == 'topic':
        topic = random.choice(DVACH_TOPICS)
        ending = random.choice(DVACH_ENDINGS)
        connector = random.choice([" - ", ". ", "! ", "? ", ", "])
        return f"{topic.capitalize()}{connector}{ending}"

    elif msg_type == 'combined' and len(last_messages) > 5:
        words = []
        for msg in random.sample(list(last_messages),
                                 min(5, len(last_messages))):
            if msg and isinstance(msg, str):
                msg_words = msg.split()
                if msg_words:
                    words.extend(
                        random.sample(msg_words, min(2, len(msg_words))))

        if words:
            random.shuffle(words)
            phrase = ' '.join(words[:random.randint(3, 6)])
            return f"{phrase}, {random.choice(DVACH_ENDINGS).lower()}"

    elif msg_type == 'question':
        questions = [
            "–ß–µ –ø–æ {topic}?", "{topic} - –∑–∞ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤?",
            "–ö—Ç–æ —à–∞—Ä–∏—Ç –∑–∞ {topic}?", "–ê–Ω–æ–Ω, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ {topic}",
            "{topic} —ç—Ç–æ –±–∞–∑–∞ –∏–ª–∏ –∫—Ä–∏–Ω–∂?", "–ü–æ—á–µ–º—É –≤—Å–µ —Ö–µ–π—Ç—è—Ç {topic}?",
            "–ö–æ–≥–¥–∞ —É–∂–µ –∑–∞–ø—Ä–µ—Ç—è—Ç {topic}?", "{topic} –ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω?",
            "–ö—Ç–æ-–Ω–∏–±—É–¥—å —é–∑–∞–µ—Ç {topic}?", "–°—Ç–æ–∏—Ç –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å —Å {topic}?"
        ]
        topic = random.choice(DVACH_TOPICS)
        return random.choice(questions).format(topic=topic)

    elif msg_type == 'reaction':
        reactions = [
            "–ø–∏–∑–¥–µ—Ü", "–æ—Ä—É", "–±–∞–∑–∞", "–∫—Ä–∏–Ω–∂", "–∞—Ö—É–µ—Ç—å", "—Ç–æ–ø—á–∏–∫", "–≥–æ–¥–Ω–æ—Ç–∞",
            "—Ö—É–π–Ω—è", "–∑–±—Å", "—á–µ—Ç–∫–æ", "–µ–±–∞—Ç—å", "–Ω–∏—Ö—É—è —Å–µ–±–µ", "–æ—Ö—É–µ–Ω–Ω–æ", "—Ö—É–µ–≤–æ",
            "–Ω–æ—Ä–º"
        ]
        return random.choice(reactions)

    elif msg_type == 'statement':
        statements = [
            "–∫–æ—Ä–æ—á–µ —è –∑–∞–µ–±–∞–ª—Å—è", "–≤—Å–µ —Ö—É–π–Ω—è, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π",
            "—è –µ–±–∞–ª —ç—Ç—É –∂–∏–∑–Ω—å", "–∑–∞–µ–±–∏—Å—å –∂–∏–≤–µ–º", "–Ω—É –∏ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞—Å—Ç–∞–ª–∏",
            "—Ä–∞–Ω—å—à–µ –ª—É—á—à–µ –±—ã–ª–æ", "–¥–µ–≥—Ä–∞–¥–∏—Ä—É–µ–º –ø–æ—Ç–∏—Ö–æ–Ω—å–∫—É",
            "—ç–≤–æ–ª—é—Ü–∏—è –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É"
        ]
        return random.choice(statements)

    return random.choice(DVACH_STARTERS)

async def motivation_broadcaster():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑ –≤ 2-4 —á–∞—Å–∞"""
    await asyncio.sleep(9)  # –ñ–¥—ë–º 9 —Å–µ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞

    while True:
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 2 –¥–æ 4 —á–∞—Å–æ–≤
            delay = random.randint(4400, 14400)  # 2-4 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            await asyncio.sleep(delay)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if not state['users_data']['active']:
                continue

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            motivation = random.choice(MOTIVATIONAL_MESSAGES)
            invite_text = random.choice(INVITE_TEXTS)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            now = datetime.now(MSK)
            date_str = now.strftime("%d/%m/%y")
            weekday = WEEKDAYS[now.weekday()]
            time_str = now.strftime("%H:%M:%S")
            header = f"<i>### –ê–î–ú–ò–ù ### {date_str} ({weekday}) {time_str}</i>"
            state['post_counter'] += 1
            post_num = state['post_counter']

            message_text = (f"{header}\n\n"
                          f"üí≠ {motivation}\n\n"
                          f"–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω—á–∏–∫–∞–º:\n"
                          f"<code>{invite_text}</code>")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º, –∫—Ä–æ–º–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∏ –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö
            recipients = state['users_data']['active'] - state['users_data']['banned'] - set(mutes.keys())

            if not recipients:
                continue

            content = {
                'type': 'text',
                'header': header,
                'text': f"üí≠ {motivation}\n\n–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω—á–∏–∫–∞–º:\n<code>{invite_text}</code>"
            }

            await message_queue.put({
                'recipients': recipients,
                'content': content,
                'post_num': post_num,
                'reply_info': None
            })

            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{post_num}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ motivation_broadcaster: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

# ========== –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    if user_id not in state['users_data']['active']:
        state['users_data']['active'].add(user_id)
        print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ /start: ID {user_id}")
        logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ /start: ID {user_id}")

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–ì–ê–ß!\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "- –ë–µ–∑ CP\n"
        "- –ù–µ —Å–ø–∞–º–∏—Ç—å\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ. –í—Å–µ–º –æ—Ç –≤—Å–µ—Ö.")
    await message.delete()


AHE_EYES = ['üòµ', 'ü§§', 'üò´', 'üò©', 'üò≥', 'üòñ', 'ü•µ']
AHE_TONGUE = ['üëÖ', 'üí¶', 'üòõ', 'ü§™', 'üòù']
AHE_EXTRA = ['üíï', 'üíó', '‚ú®', 'ü•¥', '']


@dp.message(Command("restore_backup"))
async def cmd_restore_backup(message: types.Message):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞"""
    if not is_admin(message.from_user.id):
        return

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
    backups = sorted(glob.glob('backup_state_*.json'))
    if not backups:
        await message.answer("‚ùå –ù–µ—Ç –±—ç–∫–∞–ø–æ–≤")
        return

    latest = backups[-1]
    shutil.copy(latest, 'state.json')
    await message.answer(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ {latest}")

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    load_state()

@dp.message(Command("face"))
async def cmd_face(message: types.Message):
    face = (secrets.choice(AHE_EYES) + secrets.choice(AHE_TONGUE) +
            secrets.choice(AHE_EXTRA))

    # –ü—É–±–ª–∏–∫—É–µ–º –≤—Å–µ–º –≤–º–µ—Å—Ç–æ –ª–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    header, pnum = format_header()
    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": face
        },
        "post_num": pnum,
    })

    await message.delete()


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –¢–ì–ê–ß\n\n"
                         "–ö–æ–º–∞–Ω–¥—ã:\n"
                         "/start - –Ω–∞—á–∞—Ç—å\n"
                         "/help - –ø–æ–º–æ—â—å\n"
                         "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                         "/face \n"
                         "/roll ‚Äì —Ä–æ–ª–ª 0-100 –∏–ª–∏ /roll N\n"
                         "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã!")
    await message.delete()


@dp.message(Command("roll"))
async def cmd_roll(message: types.Message):
    result = random.randint(1, 100)

    header, pnum = format_header()
    await message_queue.put({
        "recipients": state['users_data']['active'],
        "content": {
            "type": "text",
            "header": header,
            "text": f"üé≤ –ù–∞—Ä–æ–ª–ª–∏–ª: {result}"
        },
        "post_num": pnum,
    })

    await message.delete()


@dp.message(Command("invite"))
async def cmd_invite(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–Ω–æ–Ω–æ–≤"""
    invite_text = random.choice(INVITE_TEXTS)

    await message.answer(
        f"üì® <b>–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–Ω–æ–Ω–æ–≤:</b>\n\n"
        f"<code>{invite_text}</code>\n\n"
        f"<i>–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å</i>",
        parse_mode="HTML")


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    total_users = len(state['users_data']['active'])
    total_posts = state['post_counter']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–ì–ê–ß–ê:\n\n"
                  f"üë• –ê–Ω–æ–Ω–∏–º–æ–≤: {total_users}\n"
                  f"üì® –ü–æ—Å—Ç–æ–≤ –Ω–∞ –±–æ—Ä–¥–µ: {total_posts}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
    header, pnum = format_header()
    await message_queue.put({
        'recipients': state['users_data']['active'],
        'content': {
            'type': 'text',
            'header': header,
            'text': stats_text
        },
        'post_num': pnum
    })

    await message.delete()


# ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========


@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.delete()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="banned")
        ],
        [
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save"),
            InlineKeyboardButton(text="üë• –¢–æ–ø —Å–ø–∞–º–µ—Ä–æ–≤",
                                 callback_data="spammers")
        ]
    ])

    await message.answer(
        f"–ê–¥–º–∏–Ω–∫–∞:\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/ban /mute /del /wipe /unban /unmute\n",
        reply_markup=keyboard)
    await message.delete()


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====================================
def get_author_id_by_reply(msg: types.Message) -> int | None:
    """
    –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω.
    1. –ë–µ—Ä—ë–º message_id –æ—Ç–≤–µ—Ç–∞
    2. –ù–∞—Ö–æ–¥–∏–º post_num —á–µ—Ä–µ–∑ message_to_post
    3. –ë–µ—Ä—ë–º author_id –∏–∑ messages_storage
    """
    if not msg.reply_to_message:
        return None

    reply_mid = msg.reply_to_message.message_id
    key_any_user = None

    # reply –ø—Ä–∏—à—ë–ª –æ—Ç –±–æ—Ç–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    # message_to_post —Ö—Ä–∞–Ω–∏—Ç –∫–ª—é—á (–ª—é–±–æ–µ_user_id, message_id)
    for (uid, mid), pnum in message_to_post.items():
        if mid == reply_mid:
            key_any_user = (uid, mid)
            post_num = pnum
            break
    else:
        return None  # –Ω–µ –Ω–∞—à–ª–∏

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è post_num –≤ messages_storage
    if post_num not in messages_storage:
        return None

    return messages_storage[post_num].get("author_id")


# ===== /id ==========================================================
@dp.message(Command("id"))
async def cmd_get_id(message: types.Message):
    """ /id ‚Äî –≤—ã–≤–µ—Å—Ç–∏ ID –∏ –∏–Ω—Ñ—É –∞–≤—Ç–æ—Ä–∞ —Ä–µ–ø–ª–∞–π-–ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–≤–æ—é, –µ—Å–ª–∏ –±–µ–∑ reply """
    if message.reply_to_message:
        author_id = get_author_id_by_reply(message)
        if author_id:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
                author = await bot.get_chat(author_id)

                info = "üÜî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ:</b>\n\n"
                info += f"ID: <code>{author_id}</code>\n"
                info += f"–ò–º—è: {author.first_name}\n"

                if author.last_name:
                    info += f"–§–∞–º–∏–ª–∏—è: {author.last_name}\n"

                if author.username:
                    info += f"Username: @{author.username}\n"

                # –°—Ç–∞—Ç—É—Å
                if author_id in state['users_data']['banned']:
                    info += "\n‚õîÔ∏è –°—Ç–∞—Ç—É—Å: –ó–ê–ë–ê–ù–ï–ù"
                elif author_id in state['users_data']['active']:
                    info += "\n‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"

                await message.answer(info, parse_mode="HTML")
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID
                await message.answer(f"ID –∞–≤—Ç–æ—Ä–∞: <code>{author_id}</code>",
                                     parse_mode="HTML")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞.")
    await message.delete()


# ===== /ban =========================================================
@dp.message(Command("ban"))
async def cmd_ban(message: types.Message):
    """
    /ban  ‚Äì reply-–±–∞–Ω –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    /ban <id> ‚Äì –±–∞–Ω –ø–æ ID
    """
    if not is_admin(message.from_user.id):
        return

    target_id: int | None = None

    # 1) reply-–±–∞–Ω
    if message.reply_to_message:
        target_id = get_author_id_by_reply(message)

    # 2) /ban <id>
    parts = message.text.split()
    if len(parts) == 2 and parts[1].isdigit():
        target_id = int(parts[1])

    if not target_id:
        await message.answer(
            "–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å ID: /ban <id>")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç (–±—ã–ª–æ 60)
    deleted_posts = await delete_user_posts(target_id, 5)

    state['users_data']['banned'].add(target_id)
    state['users_data']['active'].discard(target_id)

    await message.answer(
        f"‚úÖ –•—É–µ—Å–æ—Å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{target_id}</code> –∑–∞–±–∞–Ω–µ–Ω\n"
        f"–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {deleted_posts}",
        parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    await send_moderation_notice(target_id, "ban", None, deleted_posts)

    # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å
    try:
        await bot.send_message(
            target_id,
            f"–ü–∏–¥–æ—Ä–∞—Å –µ–±–∞–Ω—ã–π, —Ç—ã –Ω–∞—Å —Ç–∞–∫ –∑–∞–µ–±–∞–ª, —á—Ç–æ —Ç–µ–±—è –±–ª–æ–∫–Ω—É–ª–∏ –Ω–∞—Ö—É–π.\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {deleted_posts}\n"
            "–ü–∏–∑–¥—É–π –æ—Ç—Å—é–¥–∞."
        )
    except:
        pass

    await message.delete()

@dp.message(Command("mute"))
async def cmd_mute(message: Message, command: CommandObject):
    """–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        await message.delete()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = command.args
    if not args:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ + /mute [–≤—Ä–µ–º—è]\n"
            "–ò–ª–∏: /mute <user_id> [–≤—Ä–µ–º—è]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/mute 123456789 1h - –º—É—Ç –Ω–∞ 1 —á–∞—Å\n"
            "/mute 123456789 30m - –º—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç\n"
            "/mute 123456789 2d - –º—É—Ç –Ω–∞ 2 –¥–Ω—è"
        )
        await message.delete()
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = args.split()
    target_id = None
    duration_str = "24h"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ï—Å–ª–∏ —ç—Ç–æ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_key = (message.from_user.id, message.reply_to_message.message_id)
        target_id = message_to_post.get(reply_key)
        if target_id:
            target_id = messages_storage.get(target_id, {}).get('author_id')

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ID, –±–µ—Ä–µ–º –≤—Ä–µ–º—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if target_id and parts:
            duration_str = parts[0]
    else:
        # –ï—Å–ª–∏ –Ω–µ reply, —Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - ID, –≤—Ç–æ—Ä–æ–π - –≤—Ä–µ–º—è
        if len(parts) >= 1:
            try:
                target_id = int(parts[0])
                if len(parts) >= 2:
                    duration_str = parts[1]
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                await message.delete()
                return

    if not target_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.delete()
        return

    # –ü–∞—Ä—Å–∏–º duration_str –≤ timedelta
    try:
        duration_str = duration_str.lower().replace(" ", "")

        if duration_str.endswith("m"):  # –º–∏–Ω—É—Ç—ã
            mute_seconds = int(duration_str[:-1]) * 60
            duration_text = f"{int(duration_str[:-1])} –º–∏–Ω—É—Ç"
        elif duration_str.endswith("h"):  # —á–∞—Å—ã
            mute_seconds = int(duration_str[:-1]) * 3600
            duration_text = f"{int(duration_str[:-1])} —á–∞—Å–æ–≤"
        elif duration_str.endswith("d"):  # –¥–Ω–∏
            mute_seconds = int(duration_str[:-1]) * 86400
            duration_text = f"{int(duration_str[:-1])} –¥–Ω–µ–π"
        else:  # –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –º–∏–Ω—É—Ç—ã
            mute_seconds = int(duration_str) * 60
            duration_text = f"{int(duration_str)} –º–∏–Ω—É—Ç"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ (30 –¥–Ω–µ–π)
        mute_seconds = min(mute_seconds, 2592000)
        mute_duration = timedelta(seconds=mute_seconds)

    except (ValueError, AttributeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "30m - 30 –º–∏–Ω—É—Ç\n"
            "2h - 2 —á–∞—Å–∞\n"
            "1d - 1 –¥–µ–Ω—å"
        )
        await message.delete()
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç (–±—ã–ª–æ 30)
    deleted_posts = await delete_user_posts(target_id, 5)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç
    mutes[target_id] = datetime.now(UTC) + mute_duration

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"üîá –•—É–∏–ª–∞ {target_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_text}\n"
        f"–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_posts}",
        parse_mode="HTML"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    header, post_num = format_header()
    header = header.replace("–ü–æ—Å—Ç", "### –ê–î–ú–ò–ù ###")
    mute_text = (
        f"üö® –ü–∏–¥–æ—Ä–∞—Å–∞ —Å–ø–∞–º–µ—Ä–∞ –∑–∞–º—É—Ç–∏–ª–æ –Ω–∞—Ö—É–π –Ω–∞ {duration_text}\n"
        f"–£–¥–∞–ª–µ–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_posts}\n"
        f"–≠—Ç–æ—Ç –ø–∏–¥–æ—Ä –≤—Å–µ—Ö —É–∂–µ –¥–æ–µ–±–∞–ª, –ø—É—Å–∫–∞–π –ø–æ–ø—É—Å—Ç–∏—Ç—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—ë—Ç."
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[post_num] = {
        'author_id': 0,  # 0 = —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'timestamp': datetime.now(MSK),
        'content': {
            'type': 'text',
            'header': header,
            'text': mute_text
        }
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    await message_queue.put({
        "recipients": state["users_data"]["active"],
        "content": {
            "type": "text",
            "header": header,
            "text": mute_text,
            "is_system_message": True
        },
        "post_num": post_num
    })

    # –õ–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            target_id,
            f"üîá –ü–∏–¥–æ—Ä –µ–±–∞–Ω—ã–π —Ö–æ—Ä–æ—à —Å–ø–∞–º–∏—Ç—å —Ç—ã –º–µ–Ω—è —É–∂–µ –¥–æ–µ–±–∞–ª, –ø–æ—Å—Å–∞–ª —Ç–µ–±–µ –Ω–∞ —Ä—ã–ª–æ –µ–±–∞–Ω–æ–µ –ø–æ—Å–∏–¥–∏ –≤ –º—É—Ç–µ –µ—â–µ {duration_text}.\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Ç–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {deleted_posts}\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å. –°–æ—Å–∏—Ç–µ —Ö—É–π, –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—É—Ç–µ: {e}")

    await message.delete()


@dp.message(Command("wipe"))
async def cmd_wipe(message: types.Message):
    """
    –£–¥–∞–ª–∏—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
       reply + /wipe        ‚Äì –∞–≤—Ç–æ—Ä —Ä–µ–ø–ª–∞—è
       /wipe <id>           ‚Äì –ø–æ ID
    """
    if not is_admin(message.from_user.id):
        return

    global message_to_post  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏

    target_id = None
    if message.reply_to_message:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        reply_key = (message.from_user.id, message.reply_to_message.message_id)
        post_num = message_to_post.get(reply_key)
        if post_num:
            target_id = messages_storage.get(post_num, {}).get('author_id')
    else:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = int(parts[1])

    if not target_id:
        await message.answer("reply + /wipe  –∏–ª–∏  /wipe <id>")
        return

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    posts_to_delete = [
        pnum for pnum, info in messages_storage.items()
        if info.get("author_id") == target_id
    ]

    deleted = 0
    for pnum in posts_to_delete:
        # –£–¥–∞–ª—è–µ–º —É –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        for uid, mid in post_to_messages.get(pnum, {}).items():
            try:
                await bot.delete_message(uid, mid)
                deleted += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {mid} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

        # –£–¥–∞–ª—è–µ–º —É –∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ author_message_id)
        author_mid = messages_storage[pnum].get("author_message_id")
        if author_mid:
            try:
                await bot.delete_message(target_id, author_mid)
                deleted += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–≤—Ç–æ—Ä–∞ {target_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
        post_to_messages.pop(pnum, None)
        messages_storage.pop(pnum, None)

    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –≤ message_to_post
    message_to_post = {
        k: v for k, v in message_to_post.items() 
        if v not in posts_to_delete
    }

    await message.answer(
        f"üóë –£–¥–∞–ª–µ–Ω–æ {len(posts_to_delete)} –ø–æ—Å—Ç–æ–≤ ({deleted} —Å–æ–æ–±—â–µ–Ω–∏–π) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}"
    )

@dp.message(Command("unmute"))
async def cmd_unmute(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    target_id = None
    if message.reply_to_message:
        target_id = message.reply_to_message.from_user.id
    else:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = int(parts[1])

    if not target_id:
        await message.answer("–ù—É–∂–Ω–æ reply –∏–ª–∏ /unmute <id>")
        return

    mutes.pop(target_id, None)
    await message.answer(f"üîà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω")
    try:
        await bot.send_message(
            target_id, "–≠–π —Ö—É–π–ª–æ –µ–±–∞–Ω–æ–µ, —Ç–µ–±—è —Ä–∞–∑–º—É—Ç–∏–ª–∏, –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.")
    except:
        pass


@dp.message(Command("unban"))
async def cmd_unban(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.delete()
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        await message.delete()
        return

    try:
        user_id = int(args[1])
        state['users_data']['banned'].discard(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    await message.delete()


@dp.message(Command("del"))
async def cmd_del(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
        return

    # 1. –ò—â–µ–º post_num –ø–æ message_id (–Ω–µ–≤–∞–∂–Ω–æ, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å)
    target_mid = message.reply_to_message.message_id
    post_num = None
    for pnum, mapping in post_to_messages.items():
        if target_mid in mapping.values():
            post_num = pnum
            break

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äì —Å–æ–æ–±—â–∞–µ–º
    if post_num is None:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑–µ")
        return

    # 2. –£–¥–∞–ª—è–µ–º —É –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    deleted = 0
    for uid, mid in post_to_messages.get(post_num, {}).items():
        try:
            await bot.delete_message(uid, mid)
            deleted += 1
        except:
            pass

    # 3. –£–¥–∞–ª—è–µ–º —É –∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ author_message_id)
    author_mid = messages_storage.get(post_num, {}).get('author_message_id')
    author_id = messages_storage.get(post_num, {}).get('author_id')
    if author_mid and author_id:
        try:
            await bot.delete_message(author_id, author_mid)
            deleted += 1
        except:
            pass

    # 4. –ß–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä–∏
    post_to_messages.pop(post_num, None)
    messages_storage.pop(post_num, None)

    await message.answer(f"–ü–æ—Å—Ç ‚Ññ{post_num} —É–¥–∞–ª—ë–Ω —É {deleted} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
# ========== CALLBACK HANDLERS ==========

@dp.callback_query(F.data == "save")
async def admin_save(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    await save_state()
    await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

@dp.callback_query(F.data == "stats")
async def admin_stats(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    await callback.message.answer(
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(state['users_data']['active'])}\n"
        f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {len(state['users_data']['banned'])}\n"
        f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {state['post_counter']}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏: {len(messages_storage)}\n"
        f"–í –æ—á–µ—Ä–µ–¥–∏: {message_queue.qsize()}")
    await callback.answer()

@dp.callback_query(F.data == "spammers")
async def admin_spammers(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_users = sorted(state['message_counter'].items(),
                          key=lambda x: x[1],
                          reverse=True)[:10]

    text = "–¢–æ–ø 10 —Å–ø–∞–º–µ—Ä–æ–≤:\n\n"
    for user_id, count in sorted_users:
        text += f"ID {user_id}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await callback.message.answer(text)
    await callback.answer()


@dp.callback_query(F.data == "banned")
async def admin_banned(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    if not state['users_data']['banned']:
        await callback.answer("–ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    text = "–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id in state['users_data']['banned']:
        text += f"ID {user_id}\n"

    await callback.message.answer(text)
    await callback.answer()


async def memory_cleaner():
    """–†–∞–∑ –≤ —á–∞—Å —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏"""
    while True:
        await asyncio.sleep(3600)  # –∫–∞–∂–¥—ã–π —á–∞—Å

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –ø–æ—Å—Ç–æ–≤
        if len(messages_storage) > 0:
            recent_posts = set(sorted(messages_storage.keys())[-500:])

            # –ß–∏—Å—Ç–∏–º message_to_post
            to_delete = []
            for (uid, mid), post_num in message_to_post.items():
                if post_num not in recent_posts:
                    to_delete.append((uid, mid))

            for key in to_delete:
                del message_to_post[key]

            print(f"–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª–µ–Ω–æ {len(to_delete)} —Å—Ç–∞—Ä—ã—Ö —Å–≤—è–∑–µ–π")

# ========== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ==========
async def process_complete_media_group(media_group_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if media_group_id not in current_media_groups or media_group_id in sent_media_groups:
        return

    media_group = current_media_groups[media_group_id]
    if not media_group.get('media'):
        if media_group_id in current_media_groups:
            del current_media_groups[media_group_id]
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_to_post
    if media_group.get('reply_to_post') and media_group['reply_to_post'] not in messages_storage:
        media_group['reply_to_post'] = None

    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
    sent_media_groups.add(media_group_id)

    post_num = media_group['post_num']
    user_id = media_group['author_id']

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    content = {
        'type': 'media_group',
        'header': media_group['header'],
        'media': media_group['media'],
        'caption': media_group.get('caption'),
        'reply_to_post': media_group.get('reply_to_post')
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[post_num] = {
        'author_id': user_id,
        'timestamp': media_group['timestamp'],
        'content': content,
        'reply_to': media_group.get('reply_to_post')
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
    try:
        builder = MediaGroupBuilder()
        reply_to_message_id = None

        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç, –ø–æ–ª—É—á–∞–µ–º message_id –¥–ª—è reply
        if media_group.get('reply_to_post'):
            reply_map = post_to_messages.get(media_group['reply_to_post'], {})
            reply_to_message_id = reply_map.get(user_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        for idx, media in enumerate(media_group['media']):
            if not media.get('file_id'):
                continue

            caption = None
            if idx == 0:
                caption = f"<i>{media_group['header']}</i>"
                if media_group.get('caption'):
                    caption += f"\n\n{escape_html(media_group['caption'])}"

            if media['type'] == 'photo':
                builder.add_photo(
                    media=media['file_id'],
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media['type'] == 'video':
                builder.add_video(
                    media=media['file_id'],
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media['type'] == 'document':
                builder.add_document(
                    media=media['file_id'],
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media['type'] == 'audio':
                builder.add_audio(
                    media=media['file_id'],
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not builder.build():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
            return

        sent_messages = await bot.send_media_group(
            chat_id=user_id,
            media=builder.build(),
            reply_to_message_id=reply_to_message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å—Ç–æ–º
        if sent_messages:
            messages_storage[post_num]['author_message_id'] = sent_messages[0].message_id
            if post_num not in post_to_messages:
                post_to_messages[post_num] = {}
            post_to_messages[post_num][user_id] = sent_messages[0].message_id
            for msg in sent_messages:
                message_to_post[(user_id, msg.message_id)] = post_num

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–∞ –∞–≤—Ç–æ—Ä—É: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
    recipients = state['users_data']['active'] - {user_id}
    if recipients:
        await message_queue.put({
            'recipients': recipients,
            'content': content,
            'post_num': post_num,
            'reply_info': post_to_messages.get(media_group['reply_to_post'], {}) if media_group.get('reply_to_post') else None
        })

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if media_group_id in current_media_groups:
        del current_media_groups[media_group_id]

@dp.message(F.audio)
async def handle_audio(message: Message):
    await handle_audio_message(message)

@dp.message(F.voice)
async def handle_voice(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    if user_id in state['users_data']['banned']:
        await message.delete()
        return

    if mutes.get(user_id) and mutes[user_id] > datetime.now(UTC):
        await message.delete()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header, current_post_num = format_header()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç?
    reply_to_post = None
    reply_info = {}

    if message.reply_to_message:
        reply_key = (user_id, message.reply_to_message.message_id)
        reply_to_post = message_to_post.get(reply_key)
        if reply_to_post and reply_to_post in post_to_messages:
            reply_info = post_to_messages[reply_to_post]
        else:
            reply_to_post = None

    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content = {
        'type': 'voice',
        'header': header,
        'file_id': message.voice.file_id,
        'reply_to_post': reply_to_post
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages_storage[current_post_num] = {
        'author_id': user_id,
        'timestamp': datetime.now(MSK),
        'content': content,
        'reply_to': reply_to_post
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞
    if not message.media_group_id:
        reply_to_message_id = reply_info.get(user_id) if reply_info else None

        sent_to_author = await bot.send_voice(
            user_id,
            message.voice.file_id,
            caption=f"<i>{header}</i>",
            reply_to_message_id=reply_to_message_id,
            parse_mode="HTML"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        if sent_to_author:
            messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
            if current_post_num not in post_to_messages:
                post_to_messages[current_post_num] = {}
            post_to_messages[current_post_num][user_id] = sent_to_author.message_id
            message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
    recipients = state['users_data']['active'] - {user_id}
    if recipients:
        await message_queue.put({
            'recipients': recipients,
            'content': content,
            'post_num': current_post_num,
            'reply_info': reply_info if reply_info else None,
            'user_id': user_id
        })

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ @dp.message()
@dp.message(F.media_group_id)
async def handle_media_group_init(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id

    if user_id in state['users_data']['banned']:
        await message.delete()
        return

    if mutes.get(user_id) and mutes[user_id] > datetime.now(UTC):
        await message.delete()
        return

    media_group_id = message.media_group_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_to_message –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    reply_to_post = None
    if message.reply_to_message:
        reply_key = (user_id, message.reply_to_message.message_id)
        reply_to_post = message_to_post.get(reply_key)
        if reply_to_post and reply_to_post not in messages_storage:
            reply_to_post = None

    if media_group_id not in current_media_groups:
        header, post_num = format_header()
        current_media_groups[media_group_id] = {
            'post_num': post_num,
            'header': header,
            'author_id': user_id,
            'timestamp': datetime.now(MSK),
            'media': [],
            'caption': message.caption if message.caption else None,
            'reply_to_post': reply_to_post,
            'processed_messages': set()
        }

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.message_id not in current_media_groups[media_group_id]['processed_messages']:
        media_data = {
            'type': message.content_type,
            'file_id': None,
            'message_id': message.message_id
        }

        if message.photo:
            media_data['file_id'] = message.photo[-1].file_id
        elif message.video:
            media_data['file_id'] = message.video.file_id
        elif message.document:
            media_data['file_id'] = message.document.file_id
        elif message.audio:
            media_data['file_id'] = message.audio.file_id

        if media_data['file_id']:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å file_id
            current_media_groups[media_group_id]['media'].append(media_data)
            current_media_groups[media_group_id]['processed_messages'].add(message.message_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if message.caption and not current_media_groups[media_group_id].get('caption'):
                current_media_groups[media_group_id]['caption'] = message.caption

    await message.delete()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(0.5)
    await process_complete_media_group(media_group_id)

@dp.message()
async def handle_message(message: Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    if message.media_group_id:
        return

    user_id = message.from_user.id
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô)
        until = mutes.get(user_id)
        if until and until > datetime.now(UTC):
            left = until - datetime.now(UTC)
            minutes = int(left.total_seconds() // 60)
            seconds = int(left.total_seconds() % 60)
            try:
                await message.delete()
                await bot.send_message(
                    user_id, 
                    f"üîá –≠–π –ø–∏–¥–æ—Ä, —Ç—ã –≤ –º—É—Ç–µ –µ—â—ë {minutes}–º {seconds}—Å\n–°–ø–∞–º–∏—à—å –¥–∞–ª—å—à–µ - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω",
                    parse_mode="HTML"
                )
            except:
                pass
            return
        elif until:  # —Å—Ä–æ–∫ –º—É—Ç–∞ –≤—ã—à–µ–ª
            mutes.pop(user_id, None)

        # 1. –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ active
        if user_id not in state['users_data']['active']:
            state['users_data']['active'].add(user_id)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}")

        # 2. –±–∞–Ω
        if user_id in state['users_data']['banned']:
            await message.delete()
            await message.answer("‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω", show_alert=True)
            return

        # 3. —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        get_user_msgs_deque(user_id).append(message)

        # 4. —Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º           
        spam_check = await check_spam(user_id, message)
        if not spam_check:
            await message.delete()
            msg_type = message.content_type
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∞–º
            if message.content_type in ['photo', 'video', 'document'] and message.caption:
                msg_type = 'text'

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
            await apply_penalty(user_id, msg_type)
            return

        # 5. –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
        recipients = state['users_data']['active'] - {user_id}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç?
        reply_to_post = None
        reply_info = {}

        if message.reply_to_message:
            reply_key = (user_id, message.reply_to_message.message_id)
            reply_to_post = message_to_post.get(reply_key)

            if reply_to_post and reply_to_post in post_to_messages:
                reply_info = post_to_messages[reply_to_post]
            else:
                reply_to_post = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –≤ post_to_messages

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header, current_post_num = format_header()

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
        if message.text:
            daily_log.write(
                f"[{datetime.now(timezone.utc).isoformat()}] {message.text}\n"
            )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = message.content_type

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except:
            pass

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = {
            'type': content_type,
            'header': header,  # –ó–¥–µ—Å—å header –±–µ–∑ —Ç–µ–≥–æ–≤
            'reply_to_post': reply_to_post
        }

        if content_type == 'text':
            if message.entities:
                text_content = message.html_text
            else:
                text_content = escape_html(message.text)
            content['text'] = text_content
        elif content_type == 'photo':
            content['file_id'] = message.photo[-1].file_id
            content['caption'] = message.caption
        elif content_type == 'video':
            content['file_id'] = message.video.file_id
            content['caption'] = message.caption
        elif content_type == 'sticker':
            content['file_id'] = message.sticker.file_id
        elif content_type == 'animation':
            content['file_id'] = message.animation.file_id
            content['caption'] = message.caption
        elif content_type == 'document':
            content['file_id'] = message.document.file_id
            content['caption'] = message.caption
        elif content_type == 'voice':
            content['file_id'] = message.voice.file_id
        elif content_type == 'audio':
            content['file_id'] = message.audio.file_id
            content['caption'] = message.caption
        elif content_type == 'video_note':
            content['file_id'] = message.video_note.file_id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        messages_storage[current_post_num] = {
            'author_id': user_id,
            'timestamp': datetime.now(MSK),
            'content': content,
            'reply_to': reply_to_post,
            'author_message_id': None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É
        reply_to_message_id = reply_info.get(user_id) if reply_info else None
        sent_to_author = None

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∞ (–±–µ–∑ (You))
        header_text = f"<i>{header}</i>"
        reply_text = ""
        if reply_to_post:
            reply_text = f">>{reply_to_post}\n"

        try:
            if content_type == 'text':
                full_text = f"{header_text}\n\n{reply_text}{content['text']}" if reply_text else f"{header_text}\n\n{content['text']}"
                sent_to_author = await bot.send_message(
                    user_id,
                    full_text,
                    reply_to_message_id=reply_to_message_id,
                    parse_mode="HTML"
                )
            elif content_type in ['photo', 'video', 'animation', 'document', 'audio']:
                caption = header_text
                if content.get('caption'):
                    caption += f"\n\n{escape_html(content['caption'])}"
                if reply_to_post:
                    caption = f"{header_text}\n\n{reply_text}{escape_html(content['caption']) if content.get('caption') else ''}"

                if content_type == 'photo':
                    sent_to_author = await bot.send_photo(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
                elif content_type == 'video':
                    sent_to_author = await bot.send_video(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
                elif content_type == 'animation':
                    sent_to_author = await bot.send_animation(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
                elif content_type == 'document':
                    sent_to_author = await bot.send_document(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
                elif content_type == 'audio':
                    sent_to_author = await bot.send_audio(
                        user_id,
                        content['file_id'],
                        caption=caption,
                        reply_to_message_id=reply_to_message_id,
                        parse_mode="HTML"
                    )
            elif content_type == 'sticker':
                sent_to_author = await bot.send_sticker(
                    user_id,
                    content['file_id'],
                    reply_to_message_id=reply_to_message_id
                )
            elif content_type == 'video_note':
                sent_to_author = await bot.send_video_note(
                    user_id,
                    content['file_id'],
                    reply_to_message_id=reply_to_message_id
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            if sent_to_author:
                messages_storage[current_post_num]['author_message_id'] = sent_to_author.message_id
                if current_post_num not in post_to_messages:
                    post_to_messages[current_post_num] = {}
                post_to_messages[current_post_num][user_id] = sent_to_author.message_id
                message_to_post[(user_id, sent_to_author.message_id)] = current_post_num

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∏—Å–∫–ª—é—á–∞—è –∞–≤—Ç–æ—Ä–∞)
            if recipients:
                await message_queue.put({
                    'recipients': recipients,
                    'content': content,
                    'post_num': current_post_num,
                    'reply_info': reply_info if reply_info else None
                })

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            if current_post_num in messages_storage:
                del messages_storage[current_post_num]

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message: {e}")

# ============ –°–¢–ê–†–¢ –ë–û–¢–ê (–æ–¥–∏–Ω loop, –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling) ============
async def start_background_tasks():
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –û–î–ò–ù —Ä–∞–∑ –∑–∞ –≤–µ—Å—å runtime"""
    global message_queue
    message_queue = asyncio.Queue(
        maxsize=5000)  # –æ—á–µ—Ä–µ–¥—å, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ç–µ–∫—É—â–µ–º—É loop


    tasks = [
        asyncio.create_task(auto_save_state()),
        asyncio.create_task(message_broadcaster()),
        asyncio.create_task(message_broadcaster()),
        asyncio.create_task(message_broadcaster()),
        asyncio.create_task(conan_roaster()), 
        asyncio.create_task(motivation_broadcaster()), 
        asyncio.create_task(auto_memory_cleaner()),
        asyncio.create_task(auto_backup()), 
        asyncio.create_task(cleanup_old_messages()),
    ]
    print(f"‚úì Background tasks started: {len(tasks)}")
    return tasks 

async def supervisor():
    """One event-loop: background tasks live forever, polling restarts."""
    global bot, connector

    load_state()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –∫–∞–∫ –∑–∞–¥–∞—á—É)
        runner = await start_web_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        bg_tasks = await start_background_tasks()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        connector = aiohttp.TCPConnector(limit=10, force_close=True)
        bot = Bot(token=BOT_TOKEN, connector=connector)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        restart_count = 0
        max_restarts = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
        restart_delay = 30  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        while restart_count < max_restarts:
            try:
                print("‚ñ∂Ô∏è Start polling...")
                await dp.start_polling(
                    bot, 
                    allowed_updates=dp.resolve_used_update_types(), 
                    close_bot_session=False,
                    handle_signals=False
                )
            except TelegramNetworkError as e:
                restart_count += 1
                print(f"‚ö†Ô∏è Network error: {e} (restarting in {restart_delay} seconds)")
                await asyncio.sleep(restart_delay)
            except Exception as e:
                restart_count += 1
                print(f"‚ö†Ô∏è Unexpected error: {e} (restarting in {restart_delay} seconds)")
                await asyncio.sleep(restart_delay)
            else:
                print("‚èπÔ∏è Polling finished normally")
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ main.py
            if check_restart_needed():
                print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ main.py - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                break

    except asyncio.CancelledError:
        print("‚ö†Ô∏è Received cancellation signal")
    except Exception as e:
        print(f"üî• Critical error in supervisor: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        print("üõë Shutting down...")
        await shutdown()
        if 'runner' in locals():
            await runner.cleanup()
        if 'bot' in globals():
            await bot.session.close()
        if 'connector' in globals():
            await connector.close()
        print("‚úÖ Clean shutdown completed")
        
async def shutdown():
    """Cleanup tasks before shutdown"""
    print("Shutting down services...")
    try:
        await dp.storage.close()
        await dp.storage.wait_closed()
    except Exception as e:
        print(f"Error during storage shutdown: {e}")


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s | %(levelname)s | %(message)s",
    )
    
    try:
        asyncio.run(supervisor())
    except KeyboardInterrupt:
        print("‚úñÔ∏è  Bot stopped by Ctrl-C")
